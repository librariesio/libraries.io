# frozen_string_literal: true

dependencies_fields = {
  dependencies_for_version: @version.number,
  dependencies: (@version.dependencies.includes(:project) || [])
    .map { |d| DependencySerializer.new(d) },
}

case @subset
when "default"
  @project
    .slice(Project::API_FIELDS)
    .merge({
             versions: @project
               .versions
               .pluck(*Version::API_FIELDS)
               .map do |v|
                 Version::API_FIELDS
                   .zip(v)
                   .to_h
                   .tap { |vv| vv[:repository_sources] = [@project.platform] unless vv[:repository_sources].present? }
               end,
           })
    .merge(dependencies_fields)
when "minimum"
  @project.slice(:name, :platform).merge(dependencies_fields)
else
  raise ActionController::BadRequest, "Unsupported subset"
end
