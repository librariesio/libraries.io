---
http_interactions:
- request:
    method: get
    uri: http://localhost:9200/github_issues/github_issue/_search?from=0&size=30
    body:
      encoding: UTF-8
      string: '{"query":{"function_score":{"query":{"filtered":{"query":{"match_all":{}},"filter":{"bool":{"must":[{"term":{"state":"open"}},{"term":{"locked":false}}],"must_not":[{"term":{"labels":"wontfix"}}],"should":[{"term":{"labels":"good
        first bug"}},{"term":{"labels":"good first contribution"}},{"term":{"labels":"good-first-bug"}},{"term":{"labels":"first-timers-only"}},{"term":{"labels":"good
        first issue"}},{"term":{"labels":"good first task"}},{"term":{"labels":"easy
        first bug"}},{"term":{"labels":"your first pr"}},{"term":{"labels":"firstbug"}},{"term":{"labels":"good-first-pr"}},{"term":{"labels":"[Type]
        Good First Bug"}},{"term":{"labels":"good first patch"}},{"term":{"labels":"first
        bug"}},{"term":{"labels":"good first step"}},{"term":{"labels":"good-first-issue"}},{"term":{"labels":"IdealFirstBug"}},{"term":{"labels":"first
        contribution"}},{"term":{"labels":"first timers only"}},{"term":{"labels":"your-first-pr"}},{"term":{"labels":"starter"}},{"term":{"labels":"beginner"}},{"term":{"labels":"easy"}},{"term":{"labels":"E-easy"}}]}}}},"field_value_factor":{"field":"stars","modifier":"square"}}},"facets":{"language":{"terms":{"field":"language","size":35},"facet_filter":{"bool":{"must":[]}}},"labels":{"terms":{"field":"labels","size":35},"facet_filter":{"bool":{"must":[]}}},"license":{"terms":{"field":"license","size":35},"facet_filter":{"bool":{"must":[]}}}},"filter":{"bool":{"must":[],"must_not":[]}},"track_scores":true,"sort":[{"comments_count":"asc"},{"stars":"desc"},{"created_at":"asc"},{"contributions_count":"asc"}]}'
    headers:
      User-Agent:
      - Faraday v0.10.0
      Accept-Encoding:
      - gzip,deflate
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Content-Length:
      - '40141'
    body:
      encoding: UTF-8
      string: '{"took":7,"timed_out":false,"_shards":{"total":1,"successful":1,"failed":0},"hits":{"total":75,"max_score":2.7872304E8,"hits":[{"_index":"github_issues","_type":"github_issue","_id":"1347294","_score":2.7872304E8,"_source":{"id":1347294,"github_repository_id":162034,"github_id":38123443,"number":364,"state":"open","title":"Plugins
        should warn about invalid options","body":"For instance, I repeatedly tried
        doing `new webpack.optimize.LimitChunkCountPlugin(n)` instead of `new webpack.optimize.LimitChunkCountPlugin({
        maxChunks: n })`, and the plugin just no-oped.","github_user_id":810438,"locked":false,"comments_count":0,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2014-07-17T20:38:22.000Z","updated_at":"2016-06-28T23:54:39.555Z","last_synced_at":"2016-06-28T23:54:39.534Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[0,16695,1405629502000,150]},{"_index":"github_issues","_type":"github_issue","_id":"1331489","_score":2.7872304E8,"_source":{"id":1331489,"github_repository_id":162034,"github_id":53947916,"number":677,"state":"open","title":"CLI
        --module-bind + resolve extension","body":"(Related: #503)\r\n\r\nMore specifically,
        regarding `--module-bind` and `resolve.extension`: my use-cases are demoing
        some quick examples of my code so I didn''t want to bother with a config file.
        Passing e.g. `--module-bind ''jsx=jsx-loader''` is really convenient, except
        this doesn''t work because `.jsx` isn''t a recognized extension unless it''s
        specified in `resolve.extension` in the config that (which I don''t have).\r\n\r\nI
        kinda wish the API for `module.loaders` was designed so that it wouldn''t
        need `resolve.extension`. This way that use-case would work in CLI:\r\n\r\n```js\r\nloaders:
        [\r\n  {extensions: [''jsx''], test: /moreComplicatedTestHere/, loader: ''jsx-loader?harmony''},\r\n]\r\n```\r\n\r\nI''m
        not that familiar with webpack yet so maybe this isn''t a good idea; if so,
        feel free to close this. Anyhow, should I go ahead and put a note on the docs
        page on [loaders](http://webpack.github.io/docs/using-loaders.html)?\r\n","github_user_id":1909539,"locked":false,"comments_count":0,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2015-01-10T05:56:55.000Z","updated_at":"2016-06-28T23:53:42.119Z","last_synced_at":"2016-06-28T23:53:42.097Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[0,16695,1420869415000,150]},{"_index":"github_issues","_type":"github_issue","_id":"256913","_score":2.7872304E8,"_source":{"id":256913,"github_repository_id":162034,"github_id":95267835,"number":1254,"state":"open","title":"Incorrect
        output.path leads to compiler not finishing","body":"I could not really figure
        out how this happens but it bugged me for days\r\n\r\nI accidentally set the
        output.path to a string \"./C:\\some\\path\" which is obviously wrong\r\nUnfortunately,
        the compiler instance did not finish (neither calling the callback function
        nor exiting nor crashing).\r\n\r\nThis should really be reported as an error
        by the compiler","github_user_id":3418034,"locked":false,"comments_count":0,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2015-07-15T19:08:17.000Z","updated_at":"2016-06-28T23:51:59.157Z","last_synced_at":"2016-06-28T23:51:59.137Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[0,16695,1436987297000,150]},{"_index":"github_issues","_type":"github_issue","_id":"202665","_score":2.7872304E8,"_source":{"id":202665,"github_repository_id":162034,"github_id":136054864,"number":2096,"state":"open","title":"Using
        UMD causes unnecessary and missing semicolon","body":"Every time, I try compile
        and pack my code with umd, I have one unnecessary semicolon in the last line
        and one missing at the last function, where my classes are.\r\n\r\nTried with
        commonjs, commonjs2, this, var and got no problems - only umd seems to do
        this unlovely thing ;)\r\n\r\nEven if I pack my stuff without grunt-webpack
        and webpack directly, that happens to my packed file.\r\n\r\nAny ideas so
        far? Am I missing something?\r\n\r\n\r\n*config:*\r\n```javascript\r\nentry:
        {\r\n    mappedJS: __dirname + ''/plugin/src/js/Main.js''\r\n},\r\noutput:
        {\r\n    path: ''plugin/dist/js/'',\r\n    filename: ''[name].js'',\r\n    libraryTarget:
        \"umd\",\r\n    library: [\"de\"],\r\n    umdNamedDefine: true\r\n},\r\ndevtool:
        \"cheap-module-source-map\",\r\nstats: {\r\n    colors: true,\r\n    modules:
        true,\r\n    reasons: true\r\n},\r\nexternals: {\r\n    jquery: \"jQuery\"\r\n},\r\ntarget:
        \"web\",\r\nmodule: {\r\n    loaders: [{\r\n        test: /\\.js?$/,\r\n        loader:
        ''babel-loader'',\r\n        exclude: /node_modules/,\r\n        query: {\r\n            presets:
        [''es2015'']\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\n*built file*\r\n```
        javascript\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof
        exports === ''object'' && typeof module === ''object'')\r\n\t\tmodule.exports
        = factory();\r\n\telse if(typeof define === ''function'' && define.amd)\r\n\t\tdefine(\"de\",
        [], factory);\r\n\telse if(typeof exports === ''object'')\r\n\t\texports[\"de\"]
        = factory();\r\n\telse\r\n\t\troot[\"de\"] = factory();\r\n})(this, function()
        {\r\nreturn /******/ (function(modules) { \r\n\t// WEBPACK BOOTSTRAP\r\n})\r\n/************************************************************************/\r\n/******/
        ([\r\n/* 0 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\t//
        CLASS 1\r\n/***/ },\r\n/* 1 */\r\n/***/ function(module, exports) {\r\n\t\t//
        CLASS 2\r\n/***/ }\r\n/******/ **])**\r\n});\r\n**;**\r\n//# sourceMappingURL=test.js.map\r\n```\r\n\r\n*package.json*\r\n```javascript\r\n\"engines\":
        {\r\n    \"node\": \"~5.0.0\",\r\n    \"npm\": \"~3.7.1\"\r\n  },\r\n  \"devDependencies\":
        {\r\n    \"autoprefixer\": \"^6.3.3\",\r\n    \"babel-core\": \"^6.5.2\",\r\n    \"babel-loader\":
        \"^6.2.3\",\r\n    \"babel-preset-es2015\": \"^6.5.0\",\r\n    \"cssnano\":
        \"^3.5.2\",\r\n    \"grunt\": \"^0.4.5\",\r\n    \"grunt-babel\": \"^6.0.0\",\r\n    \"grunt-cli\":
        \"^0.1.13\",\r\n    \"grunt-css-statistics\": \"^0.9.6\",\r\n    \"grunt-jsbeautifier\":
        \"^0.2.10\",\r\n    \"grunt-jsdoc-to-markdown\": \"^1.2.0\",\r\n    \"grunt-md\":
        \"0.0.4\",\r\n    \"grunt-plato\": \"^1.2.1\",\r\n    \"grunt-postcss\": \"^0.7.2\",\r\n    \"grunt-shell\":
        \"^1.1.2\",\r\n    \"grunt-webpack\": \"^1.0.11\",\r\n    \"jsdoc-to-markdown\":
        \"^1.3.3\",\r\n    \"jshint-loader\": \"^0.8.3\",\r\n    \"plato\": \"git+https://github.com/deedubs/es6-plato.git\",\r\n    \"postcss-scss\":
        \"^0.1.5\",\r\n    \"webpack\": \"^1.12.13\",\r\n    \"webpack-dev-server\":
        \"^1.14.1\"\r\n  },\r\n```\r\n","github_user_id":6652447,"locked":false,"comments_count":0,"closed_at":null,"labels":["easy"],"created_at":"2016-02-24T12:57:19.000Z","updated_at":"2016-02-24T19:45:08.000Z","last_synced_at":"2016-06-28T23:49:30.783Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[0,16695,1456318639000,150]},{"_index":"github_issues","_type":"github_issue","_id":"45487","_score":4.2315024E7,"_source":{"id":45487,"github_repository_id":17350,"github_id":131899087,"number":2871,"state":"open","title":"Computed
        names for object getters and setters","body":"```js\r\nvar x = {\r\n  get
        [\"a\"]() { return 1; }\r\n};\r\n```\r\n\r\nJSHint throws `Expected ''(''
        and instead saw ''[''.` and `Expected an identifier and instead saw ''a''.`.","github_user_id":7000710,"locked":false,"comments_count":0,"closed_at":null,"labels":["ES6","good
        first bug"],"created_at":"2016-02-06T20:52:29.000Z","updated_at":"2016-06-10T15:52:57.556Z","last_synced_at":"2016-06-10T15:52:57.530Z","pull_request":false,"contributions_count":222,"stars":6505,"language":"JavaScript","license":"MIT"},"sort":[0,6505,1454791949000,222]},{"_index":"github_issues","_type":"github_issue","_id":"5526909","_score":6656400.0,"_source":{"id":5526909,"github_repository_id":172554,"github_id":48184785,"number":2156,"state":"open","title":"Frozen
        string literal should be a new object if String#freeze is redefined","body":"I
        added \"foo\".freeze support recently, but I did not put in a check if String#freeze
        has been overridden. That leads to a failure in this test from ruby/test_optimization.rb:\r\n\r\n```ruby\r\n  def
        test_string_freeze\r\n    assert_equal \"foo\", \"foo\".freeze\r\n    assert_redefine_method(''String'',
        ''freeze'', ''assert_nil \"foo\".freeze'')\r\n  end\r\n```\r\n\r\nI consider
        this a beginner bug for the interpreter, but a bit more JVM smarts will be
        required to fix the compiler.","github_user_id":10135,"locked":false,"comments_count":0,"closed_at":null,"labels":["beginner","core","ir","jit","JRuby
        9000"],"created_at":"2014-11-08T23:38:37.000Z","updated_at":"2015-07-14T18:30:42.000Z","last_synced_at":"2016-05-27T16:01:55.840Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[0,2580,1415489917000,290]},{"_index":"github_issues","_type":"github_issue","_id":"5526579","_score":6656400.0,"_source":{"id":5526579,"github_repository_id":172554,"github_id":48284700,"number":2167,"state":"open","title":"getHomeDirectoryPath
        fails when ENV is stubbed (RSpec)","body":"How to reproduce:\r\n\r\n```ruby\r\nclass
        Foo; def self.[](name); ENV[name]; end; end\r\n\r\nObject.__send__(:remove_const,
        ''ENV'')\r\nObject.const_set(''ENV'', Foo)\r\n\r\nFile.expand_path(''~/anything'')
        # works as expected on MRI\r\n```\r\n\r\nError is:\r\n```\r\nRubyDir.java:769:in
        `getHomeDirectoryPath'': java.lang.ClassCastException: org.jruby.RubyClass
        cannot be cast to org.jruby.RubyHash\r\n\tfrom RubyFile.java:1760:in `expandUserPath''\r\n```\r\n\r\nLine:\r\nhttps://github.com/jruby/jruby/blob/1.7.16.1/core/src/main/java/org/jruby/RubyDir.java#L769\r\n\r\n\r\nSame
        on master (obviously - code hasn''t changed).\r\n\r\nI''m not an expert on
        Java or JRuby, so it would probably take ages for me to create a proper PR.","github_user_id":150197,"locked":false,"comments_count":0,"closed_at":null,"labels":["beginner","JRuby
        1.7.x","JRuby 9000"],"created_at":"2014-11-10T16:41:18.000Z","updated_at":"2016-01-15T15:49:12.000Z","last_synced_at":"2016-05-27T16:01:53.957Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[0,2580,1415637678000,290]},{"_index":"github_issues","_type":"github_issue","_id":"5518415","_score":6656400.0,"_source":{"id":5518415,"github_repository_id":172554,"github_id":52247349,"number":2332,"state":"open","title":"JRUBY_5122
        regression spec \"write should not block\" tests nothing","body":"The spec
        for \"should not block for write\" [JRUBY-5122 TCPSocket regression spec](https://github.com/jruby/jruby/blob/master/spec/regression/JRUBY-5122_nonblocking_io_spec.rb)
        does not appear to test anything and occasionally failed due to several inherent
        races. I improved the race situation somewhat, but it''s unclear whether this
        spec can ever fail since it appears to accept both blocking and nonblocking
        write.\r\n\r\nI believe the spec originally expected small writes not to block,
        which is reasonable, but at some point it mutated into a test that write *does*
        block under certain circumstances, making the original assertions meaningless.\r\n\r\nI
        will remove the spec for now, since there''s a large number of other tests
        that would hang if writes blocked, and the blocking behavior is testing platform-specific
        buffering behavior external to Ruby.\r\n\r\nFor this bug, I would like to
        see confirmation that the assertions this test made tested individually, or
        else confirm that other suites (MRI/RubySpec) cover them as well or better.","github_user_id":10135,"locked":false,"comments_count":0,"closed_at":null,"labels":["beginner","tests"],"created_at":"2014-12-17T14:43:21.000Z","updated_at":"2014-12-17T14:43:21.000Z","last_synced_at":"2016-05-27T16:01:09.491Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[0,2580,1418827401000,290]},{"_index":"github_issues","_type":"github_issue","_id":"9033982","_score":6656400.0,"_source":{"id":9033982,"github_repository_id":172554,"github_id":154564896,"number":3885,"state":"open","title":"Backport
        recent File.expand_path and basename encoding fixes","body":"As requested
        by @enebo we should try to backport the fixes for #3877 and #3866 to 1.7.\r\n\r\nThe
        #3866 fix is mostly isolated from joni transcoding, but the #3877 fix would
        require 1.7 to start using joni for at least the encoding of java.lang.String
        to unusual target encodings (like Windows-1250).\r\n\r\nI started wotking
        on #3866 but there have been refactorings on 9.1 to negotiate, and there''s
        missing fixes for e.g. the \"filesystem\" encoding. With all of #3866 naively
        ported, I was getting NPEs due to a null filesystem encoding.\r\n\r\nRegardless,
        I don''t believe it would be a lot of work to get both fixes ported appropriately.","github_user_id":10135,"locked":false,"comments_count":0,"closed_at":null,"labels":["beginner","cext","encoding","JRuby
        1.7.x"],"created_at":"2016-05-12T19:43:36.000Z","updated_at":"2016-05-27T15:54:57.749Z","last_synced_at":"2016-05-27T15:54:57.703Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[0,2580,1463082216000,290]},{"_index":"github_issues","_type":"github_issue","_id":"9819946","_score":6656400.0,"_source":{"id":9819946,"github_repository_id":172554,"github_id":158912670,"number":3956,"state":"open","title":"Range#eql?
        returns incorrect result for float vs int","body":"```\r\n>ruby -v\r\njruby
        9.1.1.0 (2.3.0) 2016-05-19 fe84e89 Java HotSpot(TM) 64-Bit Server VM 25.45-b02
        on 1.8.0_45-b14 +jit [darwin-x86_64]\r\n```\r\nThe docs for `Range#eql?` in
        MRI say a Range object is eql? if start1 && start2 are eql? and end1 && end2
        are eql? However, it seems JRuby is treating a float as an int:\r\n\r\n```\r\nRange.new(1.0,
        25).eql?(Range.new(1, 25)) # true, but should be false\r\n```\r\nSince `1.eql?(1.0)`
        is false, the above should be false as well.\r\n\r\nCourtesy of berger_spec.\r\n","github_user_id":78529,"locked":false,"comments_count":0,"closed_at":null,"labels":["beginner","core"],"created_at":"2016-06-07T12:39:57.000Z","updated_at":"2016-06-08T10:34:41.000Z","last_synced_at":"2016-06-10T15:43:39.421Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[0,2580,1465303197000,290]},{"_index":"github_issues","_type":"github_issue","_id":"897932","_score":246016.0,"_source":{"id":897932,"github_repository_id":43328,"github_id":107987843,"number":274,"state":"open","title":"Intermittent
        failures when using CTR mode ciphers in multithreaded code","body":"While
        doing parallel chef-provisioning deployments we''ve been seeing failures with
        error messages like this: NoMethodError: undefined method `update'' for #<OpenSSL::Cipher::Cipher:0x000000086ce9d8>\r\n\r\nThis
        bug looks similar to the one fixed by net-ssh#240.  Defining singleton methods
        using this syntax (as is done by lib/net/ssh/transport/ctr.rb) is not thread
        safe:\r\n\r\n```ruby\r\nclass << io\r\n  def singleton(data)\r\n  end\r\nend\r\n```\r\n   \r\nSee  https://bugs.ruby-lang.org/issues/11153,
        https://bugs.ruby-lang.org/issues/10871 \r\n\r\nApparently, the underlying
        ruby bug will be fixed in Ruby 2.3.\r\n\r\nThe error can be seen by running
        this code (prints FAIL on my box several times):\r\n\r\n```ruby\r\nrequire
        ''thread''\r\nrequire ''net/ssh''\r\n\r\ndef define_singleton_methods_in_thread\r\n  Thread.new
        do\r\n    100_000.times do\r\n       obj = Net::SSH::Transport::CipherFactory.get(''aes256-ctr'',
        encrypt: true, iv: ''ABC'', key: \"abc\", digester: OpenSSL::Digest::MD5,
        shared: \"1234567890123456780\", hash: ''!@#$%#$^%$&^&%#$@$'')\r\n      puts
        \"FAIL\" unless obj.respond_to?(:update)\r\n    end\r\n  end\r\nend\r\n2.times.map
        { define_singleton_methods_in_thread }.map(&:join)\r\n```\r\n\r\nIf the code
        above is run without a -ctr cipher, then no issue is seen, even with more
        threads.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","github_user_id":1018163,"locked":false,"comments_count":0,"closed_at":null,"labels":["easy"],"created_at":"2015-09-23T19:18:29.000Z","updated_at":"2016-06-19T06:11:50.657Z","last_synced_at":"2016-06-19T06:11:50.616Z","pull_request":false,"contributions_count":100,"stars":496,"language":"Ruby","license":"MIT"},"sort":[0,496,1443035909000,100]},{"_index":"github_issues","_type":"github_issue","_id":"1347522","_score":2.7872304E8,"_source":{"id":1347522,"github_repository_id":162034,"github_id":37600317,"number":354,"state":"open","title":"Add
        module dependency \"path\" to module processing errors","body":"So the verbose
        output when webpack can''t process a module is super nice. But what would
        be great is if it added the dependency path of how that module got there in
        the first place. I''m sharing lots of code between my front and backends,
        and sometimes i accidentally add in a module I shouldn''t to the frontend
        dependency tree. It can be pretty hard for me to figure out how it got in
        there.\r\n\r\nIt would be nice if, say, you had Module A requiring Module
        B, which requires Module C, that if Module C has some stuff that can''t be
        bundled, webpack would output something like:\r\n\r\nmoduleA:23:10 \"require(''moduleB'')\"\r\nmoduleB:2:0
        \"require(''moduleC'')\"\r\n<the usual verbose output...>","github_user_id":149531,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2014-07-10T20:12:58.000Z","updated_at":"2016-06-28T23:54:41.147Z","last_synced_at":"2016-06-28T23:54:41.127Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1405023178000,150]},{"_index":"github_issues","_type":"github_issue","_id":"1328844","_score":2.7872304E8,"_source":{"id":1328844,"github_repository_id":162034,"github_id":55889160,"number":738,"state":"open","title":"First
        time user confusion when running webpack without arguments","body":"I''m just
        starting to use webpack. So far so good! But I''ve got a minor (and easy to
        solve?) problem with it.\r\n\r\nHere''s my story. I''ve made a mistake and
        put `webpack.config.js` into the wrong directory and run `webpack` without
        arguments. It didn''t find config file and just printed help screen. I was
        very confused because I was still thinking `webpack.config.js` is in the current
        directory.\r\n\r\nI think It could be very helpful if running `webpack` would
        print some message about the config file. E.g.: `Looking for webpack.config.js:
        none found.` Or something like that. It could also be nice if `webpack` didn''t
        show the whole help screen. It was too big and increased my confusion. Telling
        that `webpack --help` would show help is good enough I think.\r\n\r\nWrapping
        up:\r\n\r\n```\r\n$ webpack\r\nwebpack: config file: <none>\r\nwebpack: nothing
        to do. Try webpack --help.\r\n```","github_user_id":510678,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2015-01-29T11:45:33.000Z","updated_at":"2016-06-28T23:53:27.326Z","last_synced_at":"2016-06-28T23:53:27.305Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1422531933000,150]},{"_index":"github_issues","_type":"github_issue","_id":"305961","_score":2.7872304E8,"_source":{"id":305961,"github_repository_id":162034,"github_id":56890246,"number":766,"state":"open","title":"Log
        \"Watching...\"","body":"It would be nice to have a line of output saying
        \"Watching...\" when watching the file system.  Its a little hard to know
        that webpack is doing the right thing without this logging.","github_user_id":234437,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2015-02-07T01:14:27.000Z","updated_at":"2015-11-15T10:59:18.000Z","last_synced_at":"2016-06-28T23:53:22.530Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1423271667000,150]},{"_index":"github_issues","_type":"github_issue","_id":"296678","_score":2.7872304E8,"_source":{"id":296678,"github_repository_id":162034,"github_id":61021246,"number":885,"state":"open","title":"ERROR
        in Entry module not found: Error: Cannot resolve ''file'' or ''directory''
        if you have invalid package.json","body":"I''ve added by mistake the following
        line\r\n\r\n    // some comment\r\n\r\nin the first line in package.json and
        got this error in webpack: `ERROR in Entry module not found: Error: Cannot
        resolve ''file'' or ''directory'' ./src/client/index.js in C:\\a`\r\n\r\nThis
        is solved if the comment is removed.","github_user_id":236974,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2015-03-13T09:27:56.000Z","updated_at":"2016-06-28T23:53:02.084Z","last_synced_at":"2016-06-28T23:53:02.063Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1426238876000,150]},{"_index":"github_issues","_type":"github_issue","_id":"290007","_score":2.7872304E8,"_source":{"id":290007,"github_repository_id":162034,"github_id":66483421,"number":947,"state":"open","title":"web:
        inefficient shims for nextTick & setImmediate","body":"The current shim webpack
        uses for nextTick and setImmediate uses `setTimeout(task, 0)` but there are
        better alternatives. See https://github.com/calvinmetcalf/immediate. ","github_user_id":3065230,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2015-04-05T21:21:53.000Z","updated_at":"2016-06-28T23:52:51.333Z","last_synced_at":"2016-06-28T23:52:51.313Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1428268913000,150]},{"_index":"github_issues","_type":"github_issue","_id":"254980","_score":2.7872304E8,"_source":{"id":254980,"github_repository_id":162034,"github_id":97835252,"number":1308,"state":"open","title":"webpack
        --watch does not check if stdin was closed","body":"This is basically a clone
        of brunch/brunch#920, but for context:\r\n\r\nI would like to automatically
        run `webpack --watch` as part of my application but, when it shuts down, the
        webpack process persists and continues running. I have observed that my application
        does close STDIN, however, `webpack --watch` is not checking if STDIN was
        closed or not. These two lines solve the issue:\r\n\r\n```javascript\r\nprocess.stdin.on(''end'',
        function() { process.exit(0) });\r\nprocess.stdin.resume();\r\n```\r\n\r\nSee
        matthewlehner/webpack@879ab0b3c4d554f68ccd17478a80a5860a33cbb8 for the fix,
        implemented.\r\n\r\nI can send a pull request for this, but am wondering if
        this should always run this or if it should be it opt-in.","github_user_id":136013,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","enhancement"],"created_at":"2015-07-29T01:28:12.000Z","updated_at":"2016-06-28T23:51:49.683Z","last_synced_at":"2016-06-28T23:51:49.659Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1438133292000,150]},{"_index":"github_issues","_type":"github_issue","_id":"239847","_score":2.7872304E8,"_source":{"id":239847,"github_repository_id":162034,"github_id":118276161,"number":1660,"state":"open","title":"Document
        logging levels","body":"Current docs don''t have an info on this. See https://github.com/webpack/webpack/pull/1323
        .","github_user_id":166921,"locked":false,"comments_count":1,"closed_at":null,"labels":["documentation","easy"],"created_at":"2015-11-22T17:26:57.000Z","updated_at":"2016-06-28T23:50:47.897Z","last_synced_at":"2016-06-28T23:50:47.876Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1448213217000,150]},{"_index":"github_issues","_type":"github_issue","_id":"225023","_score":2.7872304E8,"_source":{"id":225023,"github_repository_id":162034,"github_id":121225678,"number":1733,"state":"open","title":"Escape
        ! in binding loaders section of the tutorial","body":"In the [tutorial](http://webpack.github.io/docs/tutorials/getting-started/#binding-loaders),
        I encountered an error \"event not found: css\" when doing:\r\n\r\n```\r\n$
        webpack ./entry.js bundle.js --module-bind \"css=style!css\"\r\n```\r\nIt
        appears that the ! before css needs to be escaped in order to function properly:\r\n```\r\n$
        webpack ./entry.js bundle.js --module-bind \"css=style\\!css\"\r\n```\r\nA
        note reminding users to escape that might be helpful. I spend a few minutes
        trying to figure this one out.\r\n","github_user_id":1418949,"locked":false,"comments_count":1,"closed_at":null,"labels":["documentation","easy"],"created_at":"2015-12-09T12:23:26.000Z","updated_at":"2016-06-28T23:50:30.782Z","last_synced_at":"2016-06-28T23:50:30.761Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1449663806000,150]},{"_index":"github_issues","_type":"github_issue","_id":"208441","_score":2.7872304E8,"_source":{"id":208441,"github_repository_id":162034,"github_id":130209495,"number":1963,"state":"open","title":"Node
        `global` polyfill is broken by ''use strict''","body":"I think I may have
        found an issue caused by how how Webpack polyfills `global`.\r\n\r\n[Here''s
        what happened:](https://github.com/lodash/lodash/issues/1916)\r\n\r\n0. Lodash
        uses `global` in its code\r\n1. We introduced Lodash as a dependency into
        Redux\r\n2. I noticed that the UMD build (created with Webpack) is broken
        *if transpiled another time with Babel*\r\n\r\nWe could argue that transpiling
        UMD builds is wasteful but some people do that due to bad configurations,
        and we don''t want to break them.\r\n\r\nSo why is the build broken? This
        happens because Webpack `global` polyfill emits code like this:\r\n\r\n```js\r\n    /*
        WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\r\n```\r\n\r\nThis
        works as a polyfill in most cases but if you add `''use strict''` at the top
        of the file, it will return `undefined` due to strict semantics. And Babel
        adds `''use strict''`.\r\n\r\nIt would be nice if the `global` polyfill was
        resistant to `''use strict''`. For example, Lodash uses `Function(''return
        this'')` as last resort, which is immune to strict semantics. However this
        may cause issues in restricted environments.\r\n\r\nIn practice, some combination
        of global checks might be helpful. Unfortunately I don''t know enough about
        the ways to fix that, but hope it helps!","github_user_id":810438,"locked":false,"comments_count":1,"closed_at":null,"labels":["bug","easy"],"created_at":"2016-01-31T23:08:20.000Z","updated_at":"2016-02-02T09:28:38.000Z","last_synced_at":"2016-06-28T23:49:52.334Z","pull_request":false,"contributions_count":150,"stars":16695,"language":"JavaScript","license":"MIT"},"sort":[1,16695,1454281700000,150]},{"_index":"github_issues","_type":"github_issue","_id":"9298680","_score":4.2315024E7,"_source":{"id":9298680,"github_repository_id":17350,"github_id":151743427,"number":2920,"state":"open","title":"built-in
        ES6 typedArray names","body":"With the exception of `ArrayBufferView` the
        typedArray global names (including `ArrayBuffer` and `DataView`) should be
        considered when setting `esversion: 6`.\r\n\r\nRef: https://github.com/jshint/jshint/blob/b1c8d5b68e467f9eea830cd7289fb733a1f8131b/src/jshint.js#L211-L213","github_user_id":301201,"locked":false,"comments_count":1,"closed_at":null,"labels":["ES6","good
        first bug"],"created_at":"2016-04-28T21:06:42.000Z","updated_at":"2016-06-10T15:52:03.874Z","last_synced_at":"2016-06-10T15:52:03.850Z","pull_request":false,"contributions_count":222,"stars":6505,"language":"JavaScript","license":"MIT"},"sort":[1,6505,1461877602000,222]},{"_index":"github_issues","_type":"github_issue","_id":"8705558","_score":4.1422096E7,"_source":{"id":8705558,"github_repository_id":137557,"github_id":153015555,"number":1117,"state":"open","title":"Accelerometer:
        update fixed point values to match datasheets for fractional digit accuracy
        ","body":"To better understand what needs to be done here, take a look at
        this example from the `Thermometer` class: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/lib/thermometer.js#L480-L499\r\n\r\nAnd
        the corresponding tests: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/test/thermometer.js#L692\r\n\r\n\r\nUse
        the `digits.fractional(value)` function to get the number of fractional digits
        in a given value. ","github_user_id":27985,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","Hardware
        Not  Required","help-wanted","Needs New Tests"],"created_at":"2016-05-04T13:45:14.000Z","updated_at":"2016-06-23T17:17:54.378Z","last_synced_at":"2016-06-23T17:17:54.355Z","pull_request":false,"contributions_count":110,"stars":6436,"language":"JavaScript","license":"Other"},"sort":[1,6436,1462369514000,110]},{"_index":"github_issues","_type":"github_issue","_id":"8705557","_score":4.1422096E7,"_source":{"id":8705557,"github_repository_id":137557,"github_id":153015685,"number":1118,"state":"open","title":"Altimeter:
        update fixed point values to match datasheets for fractional digit accuracy
        ","body":"To better understand what needs to be done here, take a look at
        this example from the `Thermometer` class: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/lib/thermometer.js#L480-L499\r\n\r\nAnd
        the corresponding tests: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/test/thermometer.js#L692\r\n\r\n\r\nUse
        the `digits.fractional(value)` function to get the number of fractional digits
        in a given value. ","github_user_id":27985,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","Hardware
        Not  Required","help-wanted","Needs New Tests"],"created_at":"2016-05-04T13:45:48.000Z","updated_at":"2016-06-23T17:17:54.214Z","last_synced_at":"2016-06-23T17:17:54.193Z","pull_request":false,"contributions_count":110,"stars":6436,"language":"JavaScript","license":"Other"},"sort":[1,6436,1462369548000,110]},{"_index":"github_issues","_type":"github_issue","_id":"8705556","_score":4.1422096E7,"_source":{"id":8705556,"github_repository_id":137557,"github_id":153015835,"number":1119,"state":"open","title":"Barometer:
        update fixed point values to match datasheets for fractional digit accuracy
        ","body":"To better understand what needs to be done here, take a look at
        this example from the `Thermometer` class: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/lib/thermometer.js#L480-L499\r\n\r\nAnd
        the corresponding tests: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/test/thermometer.js#L692\r\n\r\n\r\nUse
        the `digits.fractional(value)` function to get the number of fractional digits
        in a given value. ","github_user_id":27985,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","Hardware
        Not  Required","help-wanted","Needs New Tests"],"created_at":"2016-05-04T13:46:27.000Z","updated_at":"2016-06-23T17:17:54.055Z","last_synced_at":"2016-06-23T17:17:54.025Z","pull_request":false,"contributions_count":110,"stars":6436,"language":"JavaScript","license":"Other"},"sort":[1,6436,1462369587000,110]},{"_index":"github_issues","_type":"github_issue","_id":"8705555","_score":4.1422096E7,"_source":{"id":8705555,"github_repository_id":137557,"github_id":153015995,"number":1120,"state":"open","title":"Compass:
        update fixed point values to match datasheets for fractional digit accuracy
        ","body":"To better understand what needs to be done here, take a look at
        this example from the `Thermometer` class: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/lib/thermometer.js#L480-L499\r\n\r\nAnd
        the corresponding tests: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/test/thermometer.js#L692\r\n\r\n\r\nUse
        the `digits.fractional(value)` function to get the number of fractional digits
        in a given value. ","github_user_id":27985,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","Hardware
        Not  Required","help-wanted","Needs New Tests"],"created_at":"2016-05-04T13:47:12.000Z","updated_at":"2016-06-23T17:17:53.883Z","last_synced_at":"2016-06-23T17:17:53.862Z","pull_request":false,"contributions_count":110,"stars":6436,"language":"JavaScript","license":"Other"},"sort":[1,6436,1462369632000,110]},{"_index":"github_issues","_type":"github_issue","_id":"8705554","_score":4.1422096E7,"_source":{"id":8705554,"github_repository_id":137557,"github_id":153016094,"number":1121,"state":"open","title":"Gyro:
        update fixed point values to match datasheets for fractional digit accuracy
        ","body":"To better understand what needs to be done here, take a look at
        this example from the `Thermometer` class: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/lib/thermometer.js#L480-L499\r\n\r\nAnd
        the corresponding tests: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/test/thermometer.js#L692\r\n\r\n\r\nUse
        the `digits.fractional(value)` function to get the number of fractional digits
        in a given value. ","github_user_id":27985,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","Hardware
        Not  Required","help-wanted","Needs New Tests"],"created_at":"2016-05-04T13:47:39.000Z","updated_at":"2016-06-23T17:17:53.721Z","last_synced_at":"2016-06-23T17:17:53.700Z","pull_request":false,"contributions_count":110,"stars":6436,"language":"JavaScript","license":"Other"},"sort":[1,6436,1462369659000,110]},{"_index":"github_issues","_type":"github_issue","_id":"8705553","_score":4.1422096E7,"_source":{"id":8705553,"github_repository_id":137557,"github_id":153016147,"number":1122,"state":"open","title":"Hygrometer:
        update fixed point values to match datasheets for fractional digit accuracy
        ","body":"To better understand what needs to be done here, take a look at
        this example from the `Thermometer` class: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/lib/thermometer.js#L480-L499\r\n\r\nAnd
        the corresponding tests: \r\n\r\n- https://github.com/rwaldron/johnny-five/blob/master/test/thermometer.js#L692\r\n\r\n\r\nUse
        the `digits.fractional(value)` function to get the number of fractional digits
        in a given value. ","github_user_id":27985,"locked":false,"comments_count":1,"closed_at":null,"labels":["easy","Hardware
        Not  Required","help-wanted","Needs New Tests"],"created_at":"2016-05-04T13:47:53.000Z","updated_at":"2016-06-23T17:17:53.525Z","last_synced_at":"2016-06-23T17:17:53.504Z","pull_request":false,"contributions_count":110,"stars":6436,"language":"JavaScript","license":"Other"},"sort":[1,6436,1462369673000,110]},{"_index":"github_issues","_type":"github_issue","_id":"5573880","_score":6656400.0,"_source":{"id":5573880,"github_repository_id":172554,"github_id":20225951,"number":1043,"state":"open","title":"BasicObject.singleton_class
        behaviour different from MRI","body":"In MRI the following is `true`, but
        it is `false` under JRuby:\r\n\r\n```ruby\r\nNumeric.kind_of?(BasicObject.singleton_class)\r\n```\r\n\r\nI
        originally came across this difference when doing the following refactoring:\r\n\r\n```diff\r\n-        object.respond_to?(:ancestors)
        &&\r\n-        object.ancestors.include?(primitive)\r\n+        object.kind_of?(primitive.singleton_class)\r\n```","github_user_id":133,"locked":false,"comments_count":1,"closed_at":null,"labels":["beginner","core"],"created_at":"2013-09-29T08:40:46.000Z","updated_at":"2015-05-29T19:10:31.000Z","last_synced_at":"2016-05-27T16:04:57.727Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[1,2580,1380444046000,290]},{"_index":"github_issues","_type":"github_issue","_id":"5565270","_score":6656400.0,"_source":{"id":5565270,"github_repository_id":172554,"github_id":21877582,"number":1193,"state":"open","title":"Time.at(float).to_f
        rounding issues","body":"```ruby\r\nC:\\Users\\jonabush>jruby -v\r\njruby
        1.7.6 (1.9.3p392) 2013-10-22 6004147 on Java HotSpot(TM) 64-Bit Server VM
        1.7.0_45-b18 [Windows 7-amd64]\r\n\r\nC:\\Users\\jonabush>jruby --1.8 -e ''p
        Time.at(9.99949999999).to_f''\r\n9.9995\r\n\r\nC:\\Users\\jonabush>jruby --1.9
        -e ''p Time.at(9.99949999999).to_f''\r\n9.999500000000001\r\n\r\nC:\\Users\\jonabush>jruby
        --2.0 -e ''p Time.at(9.99949999999).to_f''\r\n9.999500000000001\r\n\r\nC:\\Users\\jonabush>ruby
        -v\r\nruby 1.9.2p290 (2011-07-09) [i386-mingw32]\r\n\r\nC:\\Users\\jonabush>ruby
        -e ''p Time.at(9.99949999999).to_f''\r\n9.99949999999\r\n\r\nC:\\Users\\jonabush>ruby
        -v\r\nruby 1.9.3p448 (2013-06-27) [i386-mingw32]\r\n\r\nC:\\Users\\jonabush>ruby
        -e ''p Time.at(9.99949999999).to_f''\r\n9.99949999999\r\n```\r\n\r\nto_f does
        not return the same float as that which created the Time object.","github_user_id":2800364,"locked":false,"comments_count":1,"closed_at":null,"labels":["beginner","core","JRuby
        1.7.x"],"created_at":"2013-10-31T05:16:05.000Z","updated_at":"2016-04-08T13:35:20.000Z","last_synced_at":"2016-05-27T16:04:41.495Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[1,2580,1383196565000,290]},{"_index":"github_issues","_type":"github_issue","_id":"5526938","_score":6656400.0,"_source":{"id":5526938,"github_repository_id":172554,"github_id":48183361,"number":2155,"state":"open","title":"Method#super_method
        finds something when super is undef''ed","body":"The last assertion in this
        test (from mri/ruby/test_method.rb) fails:\r\n\r\n```ruby\r\n  def test_super_method_removed\r\n    c1
        = Class.new {private def foo; end}\r\n    c2 = Class.new(c1) {public :foo}\r\n    c3
        = Class.new(c2) {def foo; end}\r\n    c1.class_eval {undef foo}\r\n    m =
        c3.instance_method(:foo)\r\n    m = assert_nothing_raised(NameError, Feature9781)
        {break m.super_method}\r\n    assert_nil(m, Feature9781)\r\n  end\r\n```\r\n\r\nundef
        installs an UndefinedMethod, and Method#super_method checks for UndefinedMethod,
        so I''m not sure what''s broken here. Here''s the output\r\n\r\n```\r\nTestMethod#test_super_method_removed
        [/Users/headius/projects/jruby/test/mri/ruby/test_method.rb:857]:\r\n[ruby-core:62202]
        [Feature #9781].\r\nExpected #<UnboundMethod: #<Class:0x36c56a77>#foo> to
        be nil.\r\n```","github_user_id":10135,"locked":false,"comments_count":1,"closed_at":null,"labels":["beginner","core","JRuby
        9000"],"created_at":"2014-11-08T22:43:21.000Z","updated_at":"2015-07-14T18:30:42.000Z","last_synced_at":"2016-05-27T16:01:55.952Z","pull_request":false,"contributions_count":290,"stars":2580,"language":"Ruby","license":"Other"},"sort":[1,2580,1415486601000,290]}]},"facets":{"language":{"_type":"terms","missing":0,"total":75,"other":0,"terms":[{"term":"JavaScript","count":48},{"term":"Ruby","count":27}]},"labels":{"_type":"terms","missing":0,"total":185,"other":4,"terms":[{"term":"easy","count":41},{"term":"enhancement","count":22},{"term":"beginner","count":22},{"term":"core","count":9},{"term":"good
        first bug","count":8},{"term":"JRuby 1.7.x","count":8},{"term":"help-wanted","count":7},{"term":"Needs
        New Tests","count":7},{"term":"Hardware Not  Required","count":7},{"term":"documentation","count":5},{"term":"bug","count":5},{"term":"JRuby
        9000","count":5},{"term":"stdlib","count":3},{"term":"ruby 2.0-2.2","count":3},{"term":"ES6","count":3},{"term":"your-first-pr","count":2},{"term":"webpack-2","count":2},{"term":"ready","count":2},{"term":"docs","count":2},{"term":"cli
        Issue","count":2},{"term":"Proposal","count":2},{"term":"windows","count":1},{"term":"truffle","count":1},{"term":"tests","count":1},{"term":"starter","count":1},{"term":"ruby
        2.3","count":1},{"term":"ruby 1.9","count":1},{"term":"jit","count":1},{"term":"java
        integration","count":1},{"term":"ir","count":1},{"term":"help wanted","count":1},{"term":"ffi","count":1},{"term":"encoding","count":1},{"term":"deprecated","count":1},{"term":"cext","count":1}]},"license":{"_type":"terms","missing":0,"total":75,"other":0,"terms":[{"term":"MIT","count":44},{"term":"Other","count":30},{"term":"Apache-2.0","count":1}]}}}'
    http_version: 
  recorded_at: Wed, 28 Dec 2016 09:55:04 GMT
recorded_with: VCR 3.0.3
