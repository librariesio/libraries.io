---
http_interactions:
- request:
    method: get
    uri: https://pkg.go.dev/google.golang.org/grpc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '330464376307310110'
      X-Datadog-Parent-Id:
      - '3207290971637394370'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 19:54:31 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 19:54:31 GMT
- request:
    method: get
    uri: https://proxy.golang.org/google.golang.org/grpc/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1281177548617032596'
      X-Datadog-Parent-Id:
      - '1973616898012515081'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '190'
      Content-Type:
      - application/json
      Date:
      - Thu, 11 Apr 2024 15:21:01 GMT
      Expires:
      - Thu, 11 Apr 2024 15:22:01 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.63.2","Time":"2024-04-08T22:11:04Z","Origin":{"VCS":"git","URL":"https://github.com/grpc/grpc-go","Ref":"refs/tags/v1.63.2","Hash":"d32e66ce27447a0a217464a36fdd3935801c0453"}}'
  recorded_at: Thu, 11 Apr 2024 15:21:01 GMT
- request:
    method: get
    uri: https://proxy.golang.org/google.golang.org/grpc/@v/v1.63.2.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3948863480127489515'
      X-Datadog-Parent-Id:
      - '2969836247074989536'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '1051'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 11 Apr 2024 14:09:49 GMT
      Expires:
      - Thu, 11 Apr 2024 17:09:49 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '4272'
      Last-Modified:
      - Mon, 08 Apr 2024 22:13:22 GMT
      Etag:
      - '"b98093638ec321c1342d76452f160da8dafa0d95b9ed6ef1ab195f0a55a96858"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: "module google.golang.org/grpc\n\ngo 1.19\n\nrequire (\n\tgithub.com/cespare/xxhash/v2
        v2.2.0\n\tgithub.com/cncf/xds/go v0.0.0-20231128003011-0fa0005c9caa\n\tgithub.com/envoyproxy/go-control-plane
        v0.12.0\n\tgithub.com/golang/glog v1.2.0\n\tgithub.com/golang/protobuf v1.5.4\n\tgithub.com/google/go-cmp
        v0.6.0\n\tgithub.com/google/uuid v1.6.0\n\tgolang.org/x/net v0.21.0\n\tgolang.org/x/oauth2
        v0.17.0\n\tgolang.org/x/sync v0.6.0\n\tgolang.org/x/sys v0.17.0\n\tgoogle.golang.org/genproto/googleapis/rpc
        v0.0.0-20240227224415-6ceb2ff114de\n\tgoogle.golang.org/protobuf v1.33.0\n)\n\nrequire
        (\n\tcloud.google.com/go/compute v1.24.0 // indirect\n\tcloud.google.com/go/compute/metadata
        v0.2.3 // indirect\n\tgithub.com/census-instrumentation/opencensus-proto v0.4.1
        // indirect\n\tgithub.com/envoyproxy/protoc-gen-validate v1.0.4 // indirect\n\tgolang.org/x/text
        v0.14.0 // indirect\n\tgoogle.golang.org/appengine v1.6.8 // indirect\n\tgoogle.golang.org/genproto
        v0.0.0-20240227224415-6ceb2ff114de // indirect\n\tgoogle.golang.org/genproto/googleapis/api
        v0.0.0-20240227224415-6ceb2ff114de // indirect\n)\n"
  recorded_at: Thu, 11 Apr 2024 15:21:01 GMT
- request:
    method: get
    uri: https://pkg.go.dev/google.golang.org/GRPC
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1637868599575270926'
      X-Datadog-Parent-Id:
      - '4456826577322419829'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs='' ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w=''
        ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q='' ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      X-Cloud-Trace-Context:
      - a67ca1482dad258e9b3ab8eee4a49294
      Date:
      - Thu, 11 Apr 2024 16:20:03 GMT
      Server:
      - Google Frontend
      Content-Length:
      - '30090'
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 11 Apr 2024 16:20:03 GMT
- request:
    method: get
    uri: https://proxy.golang.org/google.golang.org/!g!r!p!c/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2407929209814186375'
      X-Datadog-Parent-Id:
      - '1017959933170975732'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 11 Apr 2024 16:20:04 GMT
      Expires:
      - Thu, 11 Apr 2024 16:21:04 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '192'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: "not found: google.golang.org/GRPC@latest: unrecognized import path
        \"google.golang.org/GRPC\": reading https://google.golang.org/GRPC?go-get=1:
        404 Not Found\n\tserver response: 404 page not found"
  recorded_at: Thu, 11 Apr 2024 16:20:04 GMT
- request:
    method: get
    uri: https://proxy.golang.org/google.golang.org/!grpc/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1732874361674415446'
      X-Datadog-Parent-Id:
      - '3914586077825665952'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 11 Apr 2024 17:32:56 GMT
      Expires:
      - Thu, 11 Apr 2024 17:33:56 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '192'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: "not found: google.golang.org/Grpc@latest: unrecognized import path
        \"google.golang.org/Grpc\": reading https://google.golang.org/Grpc?go-get=1:
        404 Not Found\n\tserver response: 404 page not found"
  recorded_at: Thu, 11 Apr 2024 17:32:56 GMT
- request:
    method: get
    uri: https://pkg.go.dev/google.golang.org/Grpc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '644451042371286122'
      X-Datadog-Parent-Id:
      - '66017569489358465'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs='' ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w=''
        ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q='' ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      X-Cloud-Trace-Context:
      - 0bdf5dcc7d9df63b1f6b05e8c8063e08
      Date:
      - Thu, 11 Apr 2024 17:32:56 GMT
      Server:
      - Google Frontend
      Content-Length:
      - '30090'
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 11 Apr 2024 17:32:56 GMT
recorded_with: VCR 6.2.0
