---
http_interactions:
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1293863780291634372'
      X-Datadog-Parent-Id:
      - '2939563498557483490'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:01 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:01 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/list
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3340636881778957174'
      X-Datadog-Parent-Id:
      - '640053559928259649'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '112'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:02 GMT
      Expires:
      - Wed, 17 Jan 2024 20:38:02 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        v0.3.9
        v0.3.11
        v0.3.8
        v0.3.6
        v0.3.4
        v1.0.0
        v0.3.7
        v0.3.5
        v0.3.13
        v0.3.12
        v0.3.16
        v0.3.3
        v0.3.15
        v0.3.14
        v0.3.10
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1841217172813398218'
      X-Datadog-Parent-Id:
      - '4266799739689509863'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '189'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:02 GMT
      Expires:
      - Wed, 17 Jan 2024 20:38:02 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1639605635605733105'
      X-Datadog-Parent-Id:
      - '4528424938086678990'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 20:37:02 GMT
      Expires:
      - Wed, 17 Jan 2024 20:38:02 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '594278742281228994'
      X-Datadog-Parent-Id:
      - '895569480518949726'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:52:49 GMT
      Expires:
      - Wed, 17 Jan 2024 21:52:49 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '6253'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.9.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4468084343209806776'
      X-Datadog-Parent-Id:
      - '1705164545867302990'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 19:33:23 GMT
      Expires:
      - Wed, 17 Jan 2024 22:33:23 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '3819'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.9","Time":"2020-03-24T21:25:48Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1110056892305655996'
      X-Datadog-Parent-Id:
      - '1284728961491673899'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:02 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.11.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4203497809186803522'
      X-Datadog-Parent-Id:
      - '1928365584912934'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '51'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:16:02 GMT
      Expires:
      - Wed, 17 Jan 2024 21:16:02 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '8460'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.11","Time":"2020-08-11T19:49:30Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2198671709125106055'
      X-Datadog-Parent-Id:
      - '3123315513881048566'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:02 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGRhdGEtbGF5b3V0PSJyZXNwb25zaXZlIiBkYXRhLWxvY2FsPSIiPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB3aW5kb3cuX19lcnI9ZnVuY3Rpb24gZihlKXtmLnA9Zi5wfHxbXTtmLnAucHVzaChlKX0pOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0PgogICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5jb29raWUubWF0Y2goL3ByZWZlcnMtY29sb3Itc2NoZW1lPShsaWdodHxkYXJrfGF1dG8pLyk/LlsxXQogICAgICAgIGlmICh0aGVtZSkgewogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLnNldEF0dHJpYnV0ZSgnZGF0YS10aGVtZScsIHRoZW1lKTsKICAgICAgICB9CiAgICAgIH0oKSkKICAgIDwvc2NyaXB0PgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDxtZXRhIG5hbWU9IkRlc2NyaXB0aW9uIiBjb250ZW50PSJBIGhlbHBlciB0byBtZXJnZSBzdHJ1Y3RzIGFuZCBtYXBzIGluIEdvbGFuZy4iPgogICAgCiAgICA8bWV0YSBjbGFzcz0ianMtZ3RtSUQiIGRhdGEtZ3RtaWQ9IkdUTS1XOE1WUVhHIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9zaGFyZWQvaWNvbi9mYXZpY29uLmljbyI+CiAgICAKICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3BrZy5nby5kZXYvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIj4KICAKCiAgICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL2Zyb250ZW5kLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LThqZiIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIAogICAgPGxpbmsgcmVsPSJzZWFyY2giIHR5cGU9ImFwcGxpY2F0aW9uL29wZW5zZWFyY2hkZXNjcmlwdGlvbit4bWwiIGhyZWY9Ii9vcGVuc2VhcmNoLnhtbCIgdGl0bGU9IkdvIFBhY2thZ2VzIj4KICAgIAogICAgCiAgPHRpdGxlPm1lcmdvIHBhY2thZ2UgLSBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28gLSBHbyBQYWNrYWdlczwvdGl0bGU+CgogICAgCiAgPGxpbmsgaHJlZj0iL3N0YXRpYy9mcm9udGVuZC91bml0L3VuaXQubWluLmNzcz92ZXJzaW9uPXByb2QtZnJvbnRlbmQtMDAwNzktOGpmIiByZWw9InN0eWxlc2hlZXQiPgogIAogIDxsaW5rIGhyZWY9Ii9zdGF0aWMvZnJvbnRlbmQvdW5pdC9tYWluL21haW4ubWluLmNzcz92ZXJzaW9uPXByb2QtZnJvbnRlbmQtMDAwNzktOGpmIiByZWw9InN0eWxlc2hlZXQiPgoKCiAgPC9oZWFkPgogIDxib2R5PgogICAgCiAgICA8c2NyaXB0PgogICAgICBmdW5jdGlvbiBsb2FkU2NyaXB0KHNyYywgbW9kID0gdHJ1ZSkgewogICAgICAgIGxldCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICAgICAgcy5zcmMgPSBzcmM7CiAgICAgICAgaWYgKG1vZCkgewogICAgICAgICAgcy50eXBlID0gJ21vZHVsZSc7CiAgICAgICAgICBzLmFzeW5jID0gdHJ1ZTsKICAgICAgICAgIHMuZGVmZXIgPSB0cnVlCiAgICAgICAgfQogICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocyk7CiAgICAgIH0KICAgICAgbG9hZFNjcmlwdCgiL3RoaXJkX3BhcnR5L2RpYWxvZy1wb2x5ZmlsbC9kaWFsb2ctcG9seWZpbGwuanMiLCBmYWxzZSkKICAgICAgbG9hZFNjcmlwdCgiL3N0YXRpYy9mcm9udGVuZC9mcm9udGVuZC5qcyIpOwogICAgPC9zY3JpcHQ+CiAgICAKICA8aGVhZGVyIGNsYXNzPSJnby1IZWFkZXIgZ28tSGVhZGVyLS1mdWxsIGpzLXNpdGVIZWFkZXIiPgogICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLWlubmVyIGdvLUhlYWRlci1pbm5lci0tZGFyayI+CiAgICAgIDxuYXYgY2xhc3M9ImdvLUhlYWRlci1uYXYiPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2LyIgY2xhc3M9ImpzLWhlYWRlckxvZ28iIGRhdGEtZ3RtYz0ibmF2IGxpbmsiCiAgICAgICAgICAgIGRhdGEtdGVzdC1pZD0iZ28taGVhZGVyLWxvZ28tbGluayIgcm9sZT0iaGVhZGluZyIgYXJpYS1sZXZlbD0iMSI+CiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1IZWFkZXItbG9nbyIgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL2dvLXdoaXRlLnN2ZyIgYWx0PSJHbyI+CiAgICAgICAgPC9hPgogICAgICAgICA8ZGl2IGNsYXNzPSJza2lwLW5hdmlnYXRpb24td3JhcHBlciI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJza2lwLXRvLWNvbnRlbnQtbGluayIgYXJpYS1sYWJlbD0iU2tpcCB0byBtYWluIGNvbnRlbnQiIGhyZWY9IiNtYWluLWNvbnRlbnQiPiBTa2lwIHRvIE1haW4gQ29udGVudCA8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItcmlnaHRDb250ZW50Ij4KICAgICAgICAgIAo8ZGl2IGNsYXNzPSJnby1TZWFyY2hGb3JtIGpzLXNlYXJjaEZvcm0iPgogIDxmb3JtCiAgICBjbGFzcz0iZ28tSW5wdXRHcm91cCBnby1TaG9ydGN1dEtleSBnby1TZWFyY2hGb3JtLWZvcm0iCiAgICBhY3Rpb249Ii9zZWFyY2giCiAgICBkYXRhLXNob3J0Y3V0PSIvIgogICAgZGF0YS1zaG9ydGN1dC1hbHQ9InNlYXJjaCIKICAgIGRhdGEtZ3RtYz0ic2VhcmNoIGZvcm0iCiAgICBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIKICAgIHJvbGU9InNlYXJjaCIKICA+CiAgICA8aW5wdXQgbmFtZT0icSIgY2xhc3M9ImdvLUlucHV0IGpzLXNlYXJjaEZvY3VzIiBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIgdHlwZT0ic2VhcmNoIgogICAgICAgIGF1dG9jYXBpdGFsaXplPSJvZmYiIGF1dG9jb21wbGV0ZT0ib2ZmIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIKICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIHBhY2thZ2VzIG9yIHN5bWJvbHMiCiAgICAgICAgdmFsdWU9IiIgLz4KICAgIDxpbnB1dCBuYW1lPSJtIiB2YWx1ZT0iIiBoaWRkZW4+CiAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbnZlcnRlZCIgYXJpYS1sYWJlbD0iU3VibWl0IHNlYXJjaCI+CiAgICAgIDxpbWcKICAgICAgICBjbGFzcz0iZ28tSWNvbiIKICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgIHdpZHRoPSIyNCIKICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vc2VhcmNoX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgYWx0PSIiCiAgICAgIC8+CiAgICA8L2J1dHRvbj4KICA8L2Zvcm0+CiAgPGJ1dHRvbiBjbGFzcz0iZ28tU2VhcmNoRm9ybS1leHBhbmRTZWFyY2gganMtZXhwYW5kU2VhcmNoIiBkYXRhLWd0bWM9Im5hdiBidXR0b24iCiAgICAgIGFyaWEtbGFiZWw9Ik9wZW4gc2VhcmNoIiBkYXRhLXRlc3QtaWQ9ImV4cGFuZC1zZWFyY2giPgogICAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9zZWFyY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgoKICA8L2J1dHRvbj4KPC9kaXY+CgogICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItbWVudSI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYXJyb3dfZHJvcF9kb3duX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0ic3VibWVudSBkcm9wZG93biBpY29uIj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItc3VibWVudSBnby1IZWFkZXItc3VibWVudS0td2h5IGpzLWRlc2t0b3Atc3VibWVudS1ob3ZlciIgYXJpYS1sYWJlbD0ic3VibWVudSI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI2Nhc2Utc3R1ZGllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5DYXNlIFN0dWRpZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHA+Q29tbW9uIHByb2JsZW1zIGNvbXBhbmllcyBzb2x2ZSB3aXRoIEdvPC9wPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyN1c2UtY2FzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+VXNlIENhc2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxwPlN0b3JpZXMgYWJvdXQgaG93IGFuZCB3aHkgY29tcGFuaWVzIHVzZSBHbzwvcD4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlNlY3VyaXR5IFBvbGljeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8cD5Ib3cgR28gY2FuIGhlbHAga2VlcCB5b3Ugc2VjdXJlIGJ5IGRlZmF1bHQ8L3A+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyIgZGF0YS1ndG1jPSJuYXYgbGluayI+TGVhcm48L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Fycm93X2Ryb3BfZG93bl9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9InN1Ym1lbnUgZHJvcGRvd24gaWNvbiI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnUgZ28tSGVhZGVyLXN1Ym1lbnUtLWRvY3MganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZWZmZWN0aXZlX2dvIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVmZmVjdGl2ZSBHbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5UaXBzIGZvciB3cml0aW5nIGNsZWFyLCBwZXJmb3JtYW50LCBhbmQgaWRpb21hdGljIEdvIGNvZGU8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R28gVXNlciBNYW51YWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+QSBjb21wbGV0ZSBpbnRyb2R1Y3Rpb24gdG8gYnVpbGRpbmcgc29mdHdhcmUgd2l0aCBHbzwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L3N0ZCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdGFuZGFyZCBsaWJyYXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPlJlZmVyZW5jZSBkb2N1bWVudGF0aW9uIGZvciBHbydzIHN0YW5kYXJkIGxpYnJhcnk8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9kZXZlbC9yZWxlYXNlIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlbGVhc2UgTm90ZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TGVhcm4gd2hhdCdzIG5ldyBpbiBlYWNoIEdvIHJlbGVhc2U8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIGdvLUhlYWRlci1tZW51SXRlbS0tYWN0aXZlIj4KICAgICAgICAgICAgICA8YSBocmVmPSIvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj5QYWNrYWdlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJqcy1kZXNrdG9wLW1lbnUtaG92ZXIiIGhyZWY9IiMiIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPgogICAgICAgICAgICAgICAgQ29tbXVuaXR5CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hcnJvd19kcm9wX2Rvd25fZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJzdWJtZW51IGRyb3Bkb3duIGljb24iPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51IGdvLUhlYWRlci1zdWJtZW51LS1jb21tdW5pdHkganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90YWxrcy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjb3JkZWQgVGFsa3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VmlkZW9zIGZyb20gcHJpb3IgZXZlbnRzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NZWV0dXBzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TWVldCBvdGhlciBsb2NhbCBHbyBkZXZlbG9wZXJzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL3dpa2kvQ29uZmVyZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29uZmVyZW5jZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5MZWFybiBhbmQgbmV0d29yayB3aXRoIEdvIGRldmVsb3BlcnMgZnJvbSBhcm91bmQgdGhlIHdvcmxkPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9ibG9nIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvIGJsb2c8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VGhlIEdvIHByb2plY3QncyBvZmZpY2lhbCBibG9nLjwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HbyBwcm9qZWN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPkdldCBoZWxwIGFuZCBzdGF5IGluZm9ybWVkIGZyb20gR288L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIEdldCBjb25uZWN0ZWQKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgYXJpYS1sYWJlbD0iR2V0IGNvbm5lY3RlZCB3aXRoIGdvb2dsZS1ncm91cHMgKE9wZW5zIGluIG5ldyB3aW5kb3cpIiBocmVmPSJodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvZ29sYW5nLW51dHMiID48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ29vZ2xlLWdyb3Vwcy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggZ2l0aHViIChPcGVucyBpbiBuZXcgd2luZG93KSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL2dpdGh1Yi5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggdHdpdHRlciAoT3BlbnMgaW4gbmV3IHdpbmRvdykiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvdHdpdHRlci5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggcmVkZGl0IChPcGVucyBpbiBuZXcgd2luZG93KSIgaHJlZj0iaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2dvbGFuZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9yZWRkaXQuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgYXJpYS1sYWJlbD0iR2V0IGNvbm5lY3RlZCB3aXRoIHNsYWNrIChPcGVucyBpbiBuZXcgd2luZG93KSIgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zbGFjay5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggc3RhY2stb3ZlcmZsb3cgKE9wZW5zIGluIG5ldyB3aW5kb3cpIiBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2NvbGxlY3RpdmVzL2dvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvc3RhY2stb3ZlcmZsb3cuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ28tSGVhZGVyLW5hdk9wZW4ganMtaGVhZGVyTWVudUJ1dHRvbiBnby1IZWFkZXItbmF2T3Blbi0td2hpdGUiIGRhdGEtZ3RtYz0ibmF2IGJ1dHRvbiIgYXJpYS1sYWJlbD0iT3BlbiBuYXZpZ2F0aW9uIj4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICA8L25hdj4KICAgIDwvZGl2PgogIDwvaGVhZGVyPgogIDxhc2lkZSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBqcy1oZWFkZXIiPgogICAgPG5hdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvIj4KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbG9nbyIgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL2dvLWJsdWUuc3ZnIiBhbHQ9IkdvLiI+CiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPHVsIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3QiPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGpzLW1vYmlsZS1zdWJuYXYtdHJpZ2dlciBnby1OYXZpZ2F0aW9uRHJhd2VyLWhhc1N1Ym5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxzcGFuPldoeSBHbzwvc3Bhbj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfbmV4dF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbmF2Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX2JlZm9yZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgICBXaHkgR28KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI2Nhc2Utc3R1ZGllcyI+CiAgICAgICAgICAgICAgICAgICAgICBDYXNlIFN0dWRpZXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI3VzZS1jYXNlcyI+CiAgICAgICAgICAgICAgICAgICAgICBVc2UgQ2FzZXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc2VjdXJpdHkvcG9saWN5LyI+CiAgICAgICAgICAgICAgICAgICAgICBTZWN1cml0eSBQb2xpY3kKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9sZWFybi8iPkxlYXJuPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSBqcy1tb2JpbGUtc3VibmF2LXRyaWdnZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1oYXNTdWJuYXYiPgogICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICA8c3Bhbj5Eb2NzPC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9iZWZvcmVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICBEb2NzCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3QiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9lZmZlY3RpdmVfZ28iPgogICAgICAgICAgICAgICAgICAgICAgRWZmZWN0aXZlIEdvCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy8iPgogICAgICAgICAgICAgICAgICAgICAgR28gVXNlciBNYW51YWwKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L3N0ZCI+CiAgICAgICAgICAgICAgICAgICAgICBTdGFuZGFyZCBsaWJyYXJ5CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9kZXZlbC9yZWxlYXNlIj4KICAgICAgICAgICAgICAgICAgICAgIFJlbGVhc2UgTm90ZXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0gZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbS0tYWN0aXZlIj4KICAgICAgICAgICAgPGEgaHJlZj0iLyI+UGFja2FnZXM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGpzLW1vYmlsZS1zdWJuYXYtdHJpZ2dlciBnby1OYXZpZ2F0aW9uRHJhd2VyLWhhc1N1Ym5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxzcGFuPkNvbW11bml0eTwvc3Bhbj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfbmV4dF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfYmVmb3JlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgQ29tbXVuaXR5CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3QiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3RhbGtzLyI+CiAgICAgICAgICAgICAgICAgICAgICBSZWNvcmRlZCBUYWxrcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyI+CiAgICAgICAgICAgICAgICAgICAgICBNZWV0dXBzCiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9sYXVuY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL3dpa2kvQ29uZmVyZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgQ29uZmVyZW5jZXMKICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2Jsb2ciPgogICAgICAgICAgICAgICAgICAgICAgR28gYmxvZwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9oZWxwIj4KICAgICAgICAgICAgICAgICAgICAgIEdvIHByb2plY3QKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj5HZXQgY29ubmVjdGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvZ29sYW5nLW51dHMiPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9nb29nbGUtZ3JvdXBzLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL2dpdGh1Yi5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvdHdpdHRlci5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vd3d3LnJlZGRpdC5jb20vci9nb2xhbmcvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvcmVkZGl0LnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zbGFjay5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vY29sbGVjdGl2ZXMvZ28iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zdGFjay1vdmVyZmxvdy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgPC9uYXY+CiAgPC9hc2lkZT4KICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLXNjcmltIGpzLXNjcmltIiByb2xlPSJwcmVzZW50YXRpb24iPjwvZGl2PgoKICAgIAogIDxtYWluIGNsYXNzPSJnby1NYWluIiBpZD0ibWFpbi1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9ImdvLU1haW4tYmFubmVyIiByb2xlPSJhbGVydCI+PC9kaXY+CiAgICA8aGVhZGVyIGNsYXNzPSJnby1NYWluLWhlYWRlciBqcy1tYWluSGVhZGVyIj4KICAKICAKICA8bmF2IGNsYXNzPSJnby1NYWluLWhlYWRlckJyZWFkY3J1bWIgZ28tQnJlYWRjcnVtYiIgYXJpYS1sYWJlbD0iQnJlYWRjcnVtYiIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWJyZWFkY3J1bWIiPgogICAgPG9sPgogICAgICAKICAgICAgICAKICAgICAgICAgIDxsaSBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYkl0ZW0iPgogICAgICAgICAgICA8YSBocmVmPSIvIiBkYXRhLWd0bWM9ImJyZWFkY3J1bWIgbGluayI+RGlzY292ZXIgUGFja2FnZXM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ29AdjAuMy4xNiIgZGF0YS1ndG1jPSJicmVhZGNydW1iIGxpbmsiIGFyaWEtY3VycmVudD0ibG9jYXRpb24iCiAgICAgICAgICAgICAgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWJyZWFkY3J1bWJDdXJyZW50Ij4KICAgICAgICAgICAgZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvCiAgICAgICAgICA8L2E+CiAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUgZ28tQ2xpcGJvYXJkIGpzLWNsaXBib2FyZCIKICAgICAgICAgICAgICB0aXRsZT0iQ29weSBwYXRoIHRvIGNsaXBib2FyZC4mIzEwOyYjMTA7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIgogICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNvcHkgUGF0aCB0byBDbGlwYm9hcmQiCiAgICAgICAgICAgICAgZGF0YS10by1jb3B5PSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICAgICAgZGF0YS1ndG1jPSJicmVhZGNydW1icyBidXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCIKICAgICAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY29udGVudF9jb3B5X2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgCiAgICAgICAgCiAgICAgIDwvbGk+CiAgICA8L29sPgogIDwvbmF2PgoKICA8ZGl2IGNsYXNzPSJnby1NYWluLWhlYWRlckNvbnRlbnQiPgogICAgCiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJUaXRsZSBqcy1zdGlja3lIZWFkZXIiPgogICAgPGEgY2xhc3M9ImdvLU1haW4taGVhZGVyTG9nbyIgaHJlZj0iaHR0cHM6Ly9nby5kZXYvIiBhcmlhLWhpZGRlbj0idHJ1ZSIgdGFiaW5kZXg9Ii0xIiBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIiBhcmlhLWxhYmVsPSJMaW5rIHRvIEdvIEhvbWVwYWdlIj4KICAgICAgPGltZyBoZWlnaHQ9Ijc4IiB3aWR0aD0iMjA3IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vZ28tYmx1ZS5zdmciIGFsdD0iR28iPgogICAgPC9hPgogICAgPGgxIGNsYXNzPSJVbml0SGVhZGVyLXRpdGxlSGVhZGluZyIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLXRpdGxlIj5tZXJnbzwvaDE+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0taW52ZXJ0ZWQiPnBhY2thZ2U8L3NwYW4+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0taW52ZXJ0ZWQiPm1vZHVsZTwvc3Bhbj4KICAgIAogICAgCiAgICAgIAogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUgZ28tQ2xpcGJvYXJkIGpzLWNsaXBib2FyZCIKICAgICAgICAgIHRpdGxlPSJDb3B5IHBhdGggdG8gY2xpcGJvYXJkLiYjMTA7JiMxMDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICBhcmlhLWxhYmVsPSJDb3B5IFBhdGggdG8gQ2xpcGJvYXJkIgogICAgICAgICAgZGF0YS10by1jb3B5PSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICBkYXRhLWd0bWM9InRpdGxlIGJ1dHRvbiIKICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICA+CiAgICAgICAgICA8aW1nCiAgICAgICAgICAgIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkIgogICAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb250ZW50X2NvcHlfZ21fZ3JleV8yNGRwLnN2ZyIKICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAvPgogICAgICAgIDwvYnV0dG9uPgogICAgICAKICAgIAogIDwvZGl2PgoKICAgIAogIDxkaXYgY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlscyI+CiAgICAKICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLXZlcnNpb24iPgogICAgPGEgaHJlZj0iP3RhYj12ZXJzaW9ucyIgYXJpYS1sYWJlbD0iVmVyc2lvbjogdjAuMy4xNiIgCiAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIiBhcmlhLWRlc2NyaWJlZGJ5PSJ2ZXJzaW9uLWRlc2NyaXB0aW9uIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiIGFyaWEtaGlkZGVuPSJ0cnVlIj5WZXJzaW9uOiA8L3NwYW4+CiAgICAgICAgdjAuMy4xNgogICAgPC9hPgogICAgPGRpdiBjbGFzcz0ic2NyZWVuLXJlYWRlci1vbmx5IiBpZD0idmVyc2lvbi1kZXNjcmlwdGlvbiIgaGlkZGVuPgogICAgICBPcGVucyBhIG5ldyB3aW5kb3cgd2l0aCBsaXN0IG9mIHZlcnNpb25zIGluIHRoaXMgbW9kdWxlLgogICAgPC9kaXY+CiAgICAKICAgIDxzcGFuIGNsYXNzPSJEZXRhaWxzSGVhZGVyLWJhZGdlLS1sYXRlc3QiIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1taW5vclZlcnNpb25CYW5uZXIiPgogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBEZXRhaWxzSGVhZGVyLXNwYW4tLWxhdGVzdCI+TGF0ZXN0PC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBEZXRhaWxzSGVhZGVyLXNwYW4tLW5vdEF0TGF0ZXN0Ij4KICAgICAgICBMYXRlc3QKICAgICAgICAKICA8ZGV0YWlscyBjbGFzcz0iZ28tVG9vbHRpcCBqcy10b29sdGlwIiBkYXRhLWd0bWM9InRvb2x0aXAiPgogICAgPHN1bW1hcnk+CiAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2FsZXJ0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iV2FybmluZyI+CiAgICA8L3N1bW1hcnk+CiAgICA8cD5UaGlzIHBhY2thZ2UgaXMgbm90IGluIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBpdHMgbW9kdWxlLjwvcD4KICA8L2RldGFpbHM+CgogICAgICA8L3NwYW4+CiAgICAgIDxhIGhyZWY9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIGFyaWEtbGFiZWw9IkdvIHRvIExhdGVzdCBWZXJzaW9uIiBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1hbGVydCBEZXRhaWxzSGVhZGVyLXNwYW4tLWdvVG9MYXRlc3QiPkdvIHRvIGxhdGVzdDwvc3Bhbj4KICAgICAgPC9hPgogICAgPC9zcGFuPgogIDwvc3Bhbj4KCiAgICAgIAogIDxzcGFuIGNsYXNzPSJnby1NYWluLWhlYWRlckRldGFpbEl0ZW0iIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1jb21taXRUaW1lIj4KICAgIFB1Ymxpc2hlZDogQXByICAyLCAyMDIzCiAgPC9zcGFuPgoKICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWxpY2Vuc2VzIj4KICAgIExpY2Vuc2U6IDxhIGhyZWY9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28/dGFiPWxpY2Vuc2VzIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItbGljZW5zZSIgCiAgICAgICAgZGF0YS1ndG1jPSJoZWFkZXIgbGluayIgYXJpYS1kZXNjcmliZWRieT0ibGljZW5zZS1kZXNjcmlwdGlvbiI+QlNELTMtQ2xhdXNlPC9hPgogICAgICAKICAgIAogIDwvc3Bhbj4KICA8ZGl2IGNsYXNzPSJzY3JlZW4tcmVhZGVyLW9ubHkiIGlkPSJsaWNlbnNlLWRlc2NyaXB0aW9uIiBoaWRkZW4+CiAgICBPcGVucyBhIG5ldyB3aW5kb3cgd2l0aCBsaWNlbnNlIGluZm9ybWF0aW9uLgogIDwvZGl2PgoKICAgICAgCiAgICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWltcG9ydHMiPgogICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0cyIgYXJpYS1sYWJlbD0iSW1wb3J0czogNSIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIiBhcmlhLWRlc2NyaWJlZGJ5PSJpbXBvcnRzLWRlc2NyaXB0aW9uIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPkltcG9ydHM6IDwvc3Bhbj41CiAgICA8L2E+CiAgPC9zcGFuPgogIDxkaXYgY2xhc3M9InNjcmVlbi1yZWFkZXItb25seSIgaWQ9ImltcG9ydHMtZGVzY3JpcHRpb24iIGhpZGRlbj4KICAgIE9wZW5zIGEgbmV3IHdpbmRvdyB3aXRoIGxpc3Qgb2YgaW1wb3J0cy4KICA8L2Rpdj4KCiAgICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWltcG9ydGVkYnkiPgogICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0ZWRieSIgYXJpYS1sYWJlbD0iSW1wb3J0ZWQgQnk6IDAiCiAgICAgICAgZGF0YS1ndG1jPSJoZWFkZXIgbGluayIgYXJpYS1kZXNjcmliZWRieT0iaW1wb3J0ZWRieS1kZXNjcmlwdGlvbiI+CiAgICAgICA8c3BhbiBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+SW1wb3J0ZWQgYnk6IDwvc3Bhbj4wCiAgICA8L2E+CiAgPC9zcGFuPgogIDxkaXYgY2xhc3M9InNjcmVlbi1yZWFkZXItb25seSIgaWQ9ImltcG9ydGVkYnktZGVzY3JpcHRpb24iIGhpZGRlbj4KICAgIE9wZW5zIGEgbmV3IHdpbmRvdyB3aXRoIGxpc3Qgb2Yga25vd24gaW1wb3J0ZXJzLgogIDwvZGl2PgoKICAgICAgCiAgICAKICA8L2Rpdj4KICAKICA8ZGl2IGNsYXNzPSJVbml0SGVhZGVyLW92ZXJmbG93Q29udGFpbmVyIj4KICAgIDxzdmcgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dJbWFnZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBoZWlnaHQ9IjI0IiB2aWV3Qm94PSIwIDAgMjQgMjQiIHdpZHRoPSIyNCI+CiAgICAgIDxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz4KICAgICAgPHBhdGggZD0iTTEyIDhjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem0wIDJjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yem0wIDZjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yeiIvPgogICAgPC9zdmc+CiAgICA8c2VsZWN0IGNsYXNzPSJVbml0SGVhZGVyLW92ZXJmbG93U2VsZWN0IGpzLXNlbGVjdE5hdiIgdGFiaW5kZXg9Ii0xIj4KICAgICAgPG9wdGlvbiB2YWx1ZT0iLyI+TWFpbjwvb3B0aW9uPgogICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj12ZXJzaW9ucyI+CiAgICAgICAgVmVyc2lvbnMKICAgICAgPC9vcHRpb24+CiAgICAgIDxvcHRpb24gdmFsdWU9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28/dGFiPWxpY2Vuc2VzIj4KICAgICAgICBMaWNlbnNlcwogICAgICA8L29wdGlvbj4KICAgICAgCiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0cyI+CiAgICAgICAgICBJbXBvcnRzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0ZWRieSI+CiAgICAgICAgICBJbXBvcnRlZCBCeQogICAgICAgIDwvb3B0aW9uPgogICAgICAKICAgIDwvc2VsZWN0PgogIDwvZGl2PgoKCiAgPC9kaXY+Cgo8L2hlYWRlcj4KICAgIDxhc2lkZSBjbGFzcz0iZ28tTWFpbi1hc2lkZSAganMtbWFpbkFzaWRlIj4KICAKICA8ZGl2IGNsYXNzPSJVbml0TWV0YSI+CiAgICA8aDIgY2xhc3M9ImdvLXRleHRMYWJlbCI+RGV0YWlsczwvaDI+CiAgICAKICA8dWwgY2xhc3M9IlVuaXRNZXRhLWRldGFpbHMiPgogICAgPGxpPgogICAgICA8ZGV0YWlscyBjbGFzcz0iZ28tVG9vbHRpcCBqcy10b29sdGlwIiBkYXRhLWd0bWM9InRvb2x0aXAiPgogICAgICAgIDxzdW1tYXJ5IGNsYXNzPSJnby10ZXh0U3VidGxlIj4KICAgICAgICAgIAogIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQic3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NoZWNrX2NpcmNsZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9ImNoZWNrZWQiaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KCiAgICAgICAgICBWYWxpZCA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby90cmVlL3YwLjMuMTYvZ28ubW9kIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+Z28ubW9kPC9hPiBmaWxlCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+CiAgICAgICAgICBUaGUgR28gbW9kdWxlIHN5c3RlbSB3YXMgaW50cm9kdWNlZCBpbiBHbyAxLjExIGFuZCBpcyB0aGUgb2ZmaWNpYWwgZGVwZW5kZW5jeSBtYW5hZ2VtZW50CiAgICAgICAgICBzb2x1dGlvbiBmb3IgR28uCiAgICAgICAgPC9wPgogICAgICA8L2RldGFpbHM+CiAgICA8L2xpPgogICAgPGxpPgogICAgICA8ZGV0YWlscyBjbGFzcz0iZ28tVG9vbHRpcCBqcy10b29sdGlwIiBkYXRhLWd0bWM9InRvb2x0aXAiPgogICAgICAgIDxzdW1tYXJ5IGNsYXNzPSJnby10ZXh0U3VidGxlIj4KICAgICAgICAgIAogIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQic3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NoZWNrX2NpcmNsZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9ImNoZWNrZWQiaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KCiAgICAgICAgICBSZWRpc3RyaWJ1dGFibGUgbGljZW5zZQogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2hlbHBfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CiAgICAgICAgPC9zdW1tYXJ5PgogICAgICAgIDxwPgogICAgICAgICAgUmVkaXN0cmlidXRhYmxlIGxpY2Vuc2VzIHBsYWNlIG1pbmltYWwgcmVzdHJpY3Rpb25zIG9uIGhvdyBzb2Z0d2FyZSBjYW4gYmUgdXNlZCwKICAgICAgICAgIG1vZGlmaWVkLCBhbmQgcmVkaXN0cmlidXRlZC4KICAgICAgICA8L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFRhZ2dlZCB2ZXJzaW9uCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+TW9kdWxlcyB3aXRoIHRhZ2dlZCB2ZXJzaW9ucyBnaXZlIGltcG9ydGVycyBtb3JlIHByZWRpY3RhYmxlIGJ1aWxkcy48L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2FuY2VsX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0idW5jaGVja2VkImhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CgogICAgICAgICAgU3RhYmxlIHZlcnNpb24KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD5XaGVuIGEgcHJvamVjdCByZWFjaGVzIG1ham9yIHZlcnNpb24gdjEgaXQgaXMgY29uc2lkZXJlZCBzdGFibGUuPC9wPgogICAgICA8L2RldGFpbHM+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJVbml0TWV0YS1kZXRhaWxzTGVhcm4iPgogICAgICA8YSBocmVmPSIvYWJvdXQjYmVzdC1wcmFjdGljZXMiIGRhdGEtZ3RtYz0ibWV0YSBsaW5rIj5MZWFybiBtb3JlIGFib3V0IGJlc3QgcHJhY3RpY2VzPC9hPgogICAgPC9saT4KICA8L3VsPgoKICAgIDxoMiBjbGFzcz0iZ28tdGV4dExhYmVsIj5SZXBvc2l0b3J5PC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRNZXRhLXJlcG8iPgogICAgICAKICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIgdGl0bGU9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28KICAgICAgICA8L2E+CiAgICAgIAogICAgPC9kaXY+CiAgICAKICAgICAgPGgyIGNsYXNzPSJnby10ZXh0TGFiZWwiPkxpbmtzPC9oMj4KICAgICAgPHVsIGNsYXNzPSJVbml0TWV0YS1saW5rcyI+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGVwcy5kZXYvZ28vZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnby92MC4zLjE2IiB0aXRsZT0iVmlldyB0aGlzIG1vZHVsZSBvbiBPcGVuIFNvdXJjZSBJbnNpZ2h0cyIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgZGF0YS10ZXN0LWlkPSJtZXRhLWxpbmstZGVwc2RldiI+CiAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZGVwc2Rldi1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vZGVwc2Rldi1sb2dvLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iT3BlbiBTb3VyY2UgSW5zaWdodHMgTG9nbyIgLz4KICAgICAgICAgICAgICBPcGVuIFNvdXJjZSBJbnNpZ2h0cwogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIAogIAoKICAgICAgICAKICAKCiAgICAgICAgCiAgCgogICAgICA8L3VsPgogICAgCiAgPC9kaXY+Cgo8L2FzaWRlPgogICAgPG5hdiBjbGFzcz0iZ28tTWFpbi1uYXYgZ28tTWFpbi1uYXYtLXN0aWNreSBqcy1tYWluTmF2IiBhcmlhLWxhYmVsPSJPdXRsaW5lIj4KICA8ZGl2IGNsYXNzPSJnby1NYWluLW5hdkRlc2t0b3AiPgogICAgCiAgPGRpdiBjbGFzcz0iVW5pdE91dGxpbmUtanVtcFRvIj4KICAgIDxidXR0b24gY2xhc3M9IlVuaXRPdXRsaW5lLWp1bXBUb0lucHV0IGdvLVNob3J0Y3V0S2V5IGpzLWp1bXBUb0lucHV0IgogICAgICAgIGFyaWEtY29udHJvbHM9Imp1bXAtdG8tbW9kYWwiCiAgICAgICAgYXJpYS1sYWJlbD0iT3BlbiBKdW1wIHRvIElkZW50aWZpZXIiCiAgICAgICAgZGF0YS1zaG9ydGN1dD0iZiIKICAgICAgICBkYXRhLXNob3J0Y3V0LWFsdD0iZmluZCIKICAgICAgICBkYXRhLXRlc3QtaWQ9Imp1bXAtdG8tYnV0dG9uIiBkYXRhLWd0bWM9Im91dGxpbmUgYnV0dG9uIj4KICAgICAgSnVtcCB0byAuLi4KICAgIDwvYnV0dG9uPgogIDwvZGl2PgogIDx1bCBjbGFzcz0iZ28tVHJlZSBqcy10cmVlIiByb2xlPSJ0cmVlIiBhcmlhLWxhYmVsPSJPdXRsaW5lIj4KICAgIAogICAgICA8bGkgY2xhc3M9ImpzLXJlYWRtZU91dGxpbmUiPgogICAgICAgIDxhIGhyZWY9IiNzZWN0aW9uLXJlYWRtZSIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgUkVBRE1FCiAgICAgICAgPC9hPgogICAgICAgIAogIDx1bCBpZD0icmVhZG1lLW91dGxpbmUiPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLXN0YXR1cyIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIFN0YXR1cwogICAgICAgIDwvYT4KICAgICAgICAKICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1pbXBvcnRhbnQtbm90ZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgSW1wb3J0YW50IG5vdGUKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWRvbmF0aW9ucyIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgRG9uYXRpb25zCiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1tZXJnby1pbi10aGUtd2lsZCIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgTWVyZ28gaW4gdGhlIHdpbGQKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgCiAgICAgICAgICA8L3VsPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1pbnN0YWxsIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgSW5zdGFsbAogICAgICAgIDwvYT4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtdXNhZ2UiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBVc2FnZQogICAgICAgIDwvYT4KICAgICAgICAKICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS10cmFuc2Zvcm1lcnMiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgIFRyYW5zZm9ybWVycwogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvdWw+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWNvbnRhY3QtbWUiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBDb250YWN0IG1lCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1hYm91dCIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIEFib3V0CiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1saWNlbnNlIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgTGljZW5zZQogICAgICAgIDwvYT4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAgCiAgPC91bD4KCiAgICAgIDwvbGk+CiAgICAKICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tZG9jdW1lbnRhdGlvbiIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgRG9jdW1lbnRhdGlvbgogICAgICAgIDwvYT4KICAgICAgICAKPHVsPgogIAogICAgPGxpPgogICAgICA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3IiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPk92ZXJ2aWV3PC9hPgogICAgPC9saT4KICA8bGkgY2xhc3M9IkRvY05hdi1vdmVydmlldyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctaW5kZXgiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgSW5kZXgKICAgICAgPC9hPgogICAgICAKICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY05hdi1jb25zdGFudHMiPgogICAgICA8YSBocmVmPSIjcGtnLWNvbnN0YW50cyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBDb25zdGFudHMKICAgICAgPC9hPgogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LXZhcmlhYmxlcyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIFZhcmlhYmxlcwogICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtZnVuY3Rpb25zIj4KICAgICAgPGEgaHJlZj0iI3BrZy1mdW5jdGlvbnMiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgRnVuY3Rpb25zCiAgICAgIDwvYT4KICAgICAgCiAgICAgICAgPHVsPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjTWFwIiB0aXRsZT0iTWFwKGRzdCwgc3JjLCBvcHRzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIE1hcChkc3QsIHNyYywgb3B0cykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNYXBXaXRoT3ZlcndyaXRlIiB0aXRsZT0iTWFwV2l0aE92ZXJ3cml0ZShkc3QsIHNyYywgb3B0cykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI01lcmdlIiB0aXRsZT0iTWVyZ2UoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWVyZ2UoZHN0LCBzcmMsIG9wdHMpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjTWVyZ2VXaXRoT3ZlcndyaXRlIiB0aXRsZT0iTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIE1lcmdlV2l0aE92ZXJ3cml0ZShkc3QsIHNyYywgb3B0cykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoQXBwZW5kU2xpY2UiIHRpdGxlPSJXaXRoQXBwZW5kU2xpY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhBcHBlbmRTbGljZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aE92ZXJyaWRlIiB0aXRsZT0iV2l0aE92ZXJyaWRlKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoT3ZlcnJpZGUoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVycmlkZUVtcHR5U2xpY2UiIHRpdGxlPSJXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiIHRpdGxlPSJXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aFNsaWNlRGVlcENvcHkiIHRpdGxlPSJXaXRoU2xpY2VEZWVwQ29weShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aFNsaWNlRGVlcENvcHkoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhUcmFuc2Zvcm1lcnMiIHRpdGxlPSJXaXRoVHJhbnNmb3JtZXJzKHRyYW5zZm9ybWVycykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoVHJhbnNmb3JtZXJzKHRyYW5zZm9ybWVycykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoVHlwZUNoZWNrIiB0aXRsZT0iV2l0aFR5cGVDaGVjayhjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aFR5cGVDaGVjayhjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aG91dERlcmVmZXJlbmNlIiB0aXRsZT0iV2l0aG91dERlcmVmZXJlbmNlKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgIDwvdWw+CiAgICAgIAogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LXR5cGVzIj4KICAgICAgPGEgaHJlZj0iI3BrZy10eXBlcyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBUeXBlcwogICAgICA8L2E+CiAgICAgIDx1bD4KICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjQ29uZmlnIiB0aXRsZT0idHlwZSBDb25maWciIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBDb25maWcKICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNUcmFuc2Zvcm1lcnMiIHRpdGxlPSJ0eXBlIFRyYW5zZm9ybWVycyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIFRyYW5zZm9ybWVycwogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgIAogICAgICA8L3VsPgogICAgPC9saT4KICAKICAKPC91bD4KCiAgICAgIDwvbGk+CiAgICAKICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tc291cmNlZmlsZXMiIGRhdGEtZ3RtYz0ib3V0bGluZSBsaW5rIj4KICAgICAgICAgIFNvdXJjZSBGaWxlcwogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgIAogICAgCiAgPC91bD4KCiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1uYXZNb2JpbGUganMtbWFpbk5hdk1vYmlsZSI+CiAgICA8bGFiZWwgY2xhc3M9ImdvLUxhYmVsIj4KICAgICAgPHNlbGVjdCBjbGFzcz0iZ28tU2VsZWN0Ij4KICAgICAgICAKICAgICAgICAgIDxvcHRpb24gc2VsZWN0ZWQgZGlzYWJsZWQ+UkVBRE1FPC9vcHRpb24+CiAgICAgICAgCiAgICAgIDwvc2VsZWN0PgogICAgPC9sYWJlbD4KICA8L2Rpdj4KPC9uYXY+CiAgICA8YXJ0aWNsZSBjbGFzcz0iZ28tTWFpbi1hcnRpY2xlIGpzLW1haW5Db250ZW50Ij4KICA8ZGl2IGNsYXNzPSJVbml0RGV0YWlscyIgZGF0YS10ZXN0LWlkPSJVbml0RGV0YWlscyIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyI+CiAgICA8ZGl2IGNsYXNzPSJVbml0RGV0YWlscy1jb250ZW50IGpzLXVuaXREZXRhaWxzQ29udGVudCIgZGF0YS10ZXN0LWlkPSJVbml0RGV0YWlscy1jb250ZW50Ij4KICAgICAgCiAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdFJlYWRtZSBVbml0UmVhZG1lLS1leHBhbmRlZCBqcy1yZWFkbWUiPgogICAgPGgyIGNsYXNzPSJVbml0UmVhZG1lLXRpdGxlIiBpZD0ic2VjdGlvbi1yZWFkbWUiPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jaHJvbWVfcmVhZGVyX21vZGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICBSRUFETUUKICAgICAgPGEgY2xhc3M9IlVuaXRSZWFkbWUtaWRMaW5rIiBocmVmPSIjc2VjdGlvbi1yZWFkbWUiIGFyaWEtbGFiZWw9IkdvIHRvIFJlYWRtZSI+wrY8L2E+CiAgICA8L2gyPgogICAgCiAgICAgIDxkaXYgY2xhc3M9IlVuaXRSZWFkbWUtY29udGVudCIgZGF0YS10ZXN0LWlkPSJVbml0LXJlYWRtZUNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Ik92ZXJ2aWV3LXJlYWRtZUNvbnRlbnQganMtcmVhZG1lQ29udGVudCI+PGgzIGNsYXNzPSJoMSIgaWQ9InJlYWRtZS1tZXJnbyI+TWVyZ288L2gzPgo8cD48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9yZWxlYXNlcyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UvaW1kYXJpby9tZXJnby5zdmciIGFsdD0iR2l0SHViIHJlbGVhc2UiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ29yZXBvcnRjYXJkLmNvbS9yZXBvcnQvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9nb3JlcG9ydGNhcmQuY29tL2JhZGdlL2ltZGFyaW8vbWVyZ28iIGFsdD0iR29DYXJkIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9hY3Rpb25zL3dvcmtmbG93cy90ZXN0cy55bWwiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby93b3JrZmxvd3MvdGVzdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIiIGFsdD0iVGVzdCBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYXBpLnNlY3VyaXR5c2NvcmVjYXJkcy5kZXYvcHJvamVjdHMvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcGkuc2VjdXJpdHlzY29yZWNhcmRzLmRldi9wcm9qZWN0cy9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmFkZ2UiIGFsdD0iT3BlblNTRiBTY29yZWNhcmQiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYmVzdHByYWN0aWNlcy5jb3JlaW5mcmFzdHJ1Y3R1cmUub3JnL3Byb2plY3RzLzcxNzciIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2Jlc3RwcmFjdGljZXMuY29yZWluZnJhc3RydWN0dXJlLm9yZy9wcm9qZWN0cy83MTc3L2JhZGdlIiBhbHQ9Ik9wZW5TU0YgQmVzdCBQcmFjdGljZXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vY292ZXJhbGxzLmlvL2dpdGh1Yi9pbWRhcmlvL21lcmdvP2JyYW5jaD1tYXN0ZXIiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9naXRodWIvaW1kYXJpby9tZXJnby9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlciIgYWx0PSJDb3ZlcmFnZSBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9iYWRnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby8tL2JhZGdlLnN2ZyIgYWx0PSJTb3VyY2VncmFwaCIvPjwvYT4KPGEgaHJlZj0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vcHJvamVjdHMvZ2l0JTJCZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbz9yZWY9YmFkZ2Vfc2hpZWxkIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vYXBpL3Byb2plY3RzL2dpdCUyQmdpdGh1Yi5jb20lMkZpbWRhcmlvJTJGbWVyZ28uc3ZnP3R5cGU9c2hpZWxkIiBhbHQ9IkZPU1NBIHN0YXR1cyIvPjwvYT48L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9zdGF0dXMuc3ZnIiBhbHQ9IkdvRG9jIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc3BvbnNvcnMvaW1kYXJpbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3Nwb25zb3JzL2ltZGFyaW8iIGFsdD0iQmVjb21lIG15IHNwb25zb3IiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vdGlkZWxpZnQuY29tL3N1YnNjcmlwdGlvbi9wa2cvZ28tZ2l0aHViLmNvbS1pbWRhcmlvLW1lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly90aWRlbGlmdC5jb20vYmFkZ2VzL3BhY2thZ2UvZ28vZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbyIgYWx0PSJUaWRlbGlmdCIvPjwvYT48L3A+CjxwPkEgaGVscGVyIHRvIG1lcmdlIHN0cnVjdHMgYW5kIG1hcHMgaW4gR29sYW5nLiBVc2VmdWwgZm9yIGNvbmZpZ3VyYXRpb24gZGVmYXVsdCB2YWx1ZXMsIGF2b2lkaW5nIG1lc3N5IGlmLXN0YXRlbWVudHMuPC9wPgo8cD5NZXJnbyBtZXJnZXMgc2FtZS10eXBlIHN0cnVjdHMgYW5kIG1hcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBpbiB6ZXJvLXZhbHVlIGZpZWxkcy4gTWVyZ28gd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcy4gSXQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgb25lLiBJdCBhbHNvIHdvbiYjMzk7dCBtZXJnZSBzdHJ1Y3RzIGluc2lkZSBtYXBzIChiZWNhdXNlIHRoZXkgYXJlIG5vdCBhZGRyZXNzYWJsZSB1c2luZyBHbyByZWZsZWN0aW9uKS48L3A+CjxwPkFsc28gYSBsb3ZlbHkgPGEgaHJlZj0iaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZXJnbyIgcmVsPSJub2ZvbGxvdyI+Y29tdW5lPC9hPiAobXVuaWNpcGFsaXR5KSBpbiB0aGUgUHJvdmluY2Ugb2YgQW5jb25hIGluIHRoZSBJdGFsaWFuIHJlZ2lvbiBvZiBNYXJjaGUuPC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLXN0YXR1cyI+U3RhdHVzPC9oND4KPHA+SXQgaXMgcmVhZHkgZm9yIHByb2R1Y3Rpb24gdXNlLiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyNtZXJnby1pbi10aGUtd2lsZCIgcmVsPSJub2ZvbGxvdyI+SXQgaXMgdXNlZCBpbiBzZXZlcmFsIHByb2plY3RzIGJ5IERvY2tlciwgR29vZ2xlLCBUaGUgTGludXggRm91bmRhdGlvbiwgVk1XYXJlLCBTaG9waWZ5LCBNaWNyb3NvZnQsIGV0YzwvYT4uPC9wPgo8aDUgY2xhc3M9ImgzIiBpZD0icmVhZG1lLWltcG9ydGFudC1ub3RlIj5JbXBvcnRhbnQgbm90ZTwvaDU+CjxwPlBsZWFzZSBrZWVwIGluIG1pbmQgdGhhdCBhIHByb2JsZW1hdGljIFBSIGJyb2tlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuOSIgcmVsPSJub2ZvbGxvdyI+MC4zLjk8L2E+LiBJIHJldmVydGVkIGl0IGluIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuMTAiIHJlbD0ibm9mb2xsb3ciPjAuMy4xMDwvYT4sIGFuZCBJIGNvbnNpZGVyIGl0IHN0YWJsZSBidXQgbm90IGJ1Zy1mcmVlLiBBbHNvLCB0aGlzIHZlcnNpb24gYWRkcyBzdXBwb3J0IGZvciBnbyBtb2R1bGVzLjwvcD4KPHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2ltZGFyaW8vbWVyZ28vcmVsZWFzZXMvdGFnLzAuMy4yIiByZWw9Im5vZm9sbG93Ij4wLjMuMjwvYT4sIE1lcmdvIGNoYW5nZWQgPGNvZGU+TWVyZ2UoKTwvY29kZT5hbmQgPGNvZGU+TWFwKCk8L2NvZGU+IHNpZ25hdHVyZXMgdG8gc3VwcG9ydCA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgcmVsPSJub2ZvbGxvdyI+dHJhbnNmb3JtZXJzPC9hPi4gSSBhZGRlZCBhbiBvcHRpb25hbC92YXJpYWRpYyBhcmd1bWVudCBzbyB0aGF0IGl0IHdvbiYjMzk7dCBicmVhayB0aGUgZXhpc3RpbmcgY29kZS48L3A+CjxwPklmIHlvdSB3ZXJlIHVzaW5nIE1lcmdvIGJlZm9yZSBBcHJpbCA2dGgsIDIwMTUsIHBsZWFzZSBjaGVjayB5b3VyIHByb2plY3Qgd29ya3MgYXMgaW50ZW5kZWQgYWZ0ZXIgdXBkYXRpbmcgeW91ciBsb2NhbCBjb3B5IHdpdGggPGNvZGU+Z28gZ2V0IC11IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbzwvY29kZT4uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS48L3A+CjxoNSBjbGFzcz0iaDMiIGlkPSJyZWFkbWUtZG9uYXRpb25zIj5Eb25hdGlvbnM8L2g1Pgo8cD5JZiBNZXJnbyBpcyB1c2VmdWwgdG8geW91LCBjb25zaWRlciBidXlpbmcgbWUgYSBjb2ZmZWUsIGEgYmVlciwgb3IgbWFraW5nIGEgbW9udGhseSBkb25hdGlvbiB0byBhbGxvdyBtZSB0byBrZWVwIGJ1aWxkaW5nIGdyZWF0IGZyZWUgc29mdHdhcmUuIPCfmI08L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8va28tZmkuY29tL0IwQjU4ODM5IiByZWw9Im5vZm9sbG93Ij48aW1nIGhlaWdodD0iMzYiIHNyYz0iaHR0cHM6Ly9hejc0MzcwMi52by5tc2VjbmQubmV0L2Nkbi9rb2ZpMS5wbmc/dj0wIiBhbHQ9IkJ1eSBNZSBhIENvZmZlZSBhdCBrby1maS5jb20iLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9kYXJpby9kb25hdGUiIHJlbD0ibm9mb2xsb3ciPjxpbWcgYWx0PSJEb25hdGUgdXNpbmcgTGliZXJhcGF5IiBzcmM9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9hc3NldHMvd2lkZ2V0cy9kb25hdGUuc3ZnIj48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zcG9uc29ycy9pbWRhcmlvIiByZWw9Im5vZm9sbG93Ij48aW1nIGFsdD0iQmVjb21lIG15IHNwb25zb3IiIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvc3BvbnNvcnMvaW1kYXJpbz9zdHlsZT1mb3ItdGhlLWJhZGdlIi8+PC9hPjwvcD4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS1tZXJnby1pbi10aGUtd2lsZCI+TWVyZ28gaW4gdGhlIHdpbGQ8L2g1Pgo8dWw+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbW9ieS9tb2J5IiByZWw9Im5vZm9sbG93Ij5tb2J5L21vYnk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2t1YmVybmV0ZXMiIHJlbD0ibm9mb2xsb3ciPmt1YmVybmV0ZXMva3ViZXJuZXRlczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Ztd2FyZS9kaXNwYXRjaCIgcmVsPSJub2ZvbGxvdyI+dm13YXJlL2Rpc3BhdGNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vU2hvcGlmeS90aGVtZWtpdCIgcmVsPSJub2ZvbGxvdyI+U2hvcGlmeS90aGVtZWtpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vemFzIiByZWw9Im5vZm9sbG93Ij5pbWRhcmlvL3phczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hdGNvcm5pYy9oZXJtZXMiIHJlbD0ibm9mb2xsb3ciPm1hdGNvcm5pYy9oZXJtZXM8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuQmF6YWFyL29wZW5iYXphYXItZ28iIHJlbD0ibm9mb2xsb3ciPk9wZW5CYXphYXIvb3BlbmJhemFhci1nbzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2thdGFyYXMvaXJpcyIgcmVsPSJub2ZvbGxvdyI+a2F0YXJhcy9pcmlzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbHNhdXRlci9jcmFuZSIgcmVsPSJub2ZvbGxvdyI+bWljaGFlbHNhdXRlci9jcmFuZTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvLXRhc2svdGFzayIgcmVsPSJub2ZvbGxvdyI+Z28tdGFzay90YXNrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc2Vuc3UvdWNoaXdhIiByZWw9Im5vZm9sbG93Ij5zZW5zdS91Y2hpd2E8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vcnkvaHlkcmEiIHJlbD0ibm9mb2xsb3ciPm9yeS9oeWRyYTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Npc2F0ZWNoL3ZjbGkiIHJlbD0ibm9mb2xsb3ciPnNpc2F0ZWNoL3ZjbGk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kYWlyeWNhcnQvZGFpcnljYXJ0IiByZWw9Im5vZm9sbG93Ij5kYWlyeWNhcnQvZGFpcnljYXJ0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcHJvamVjdGNhbGljby9mZWxpeCIgcmVsPSJub2ZvbGxvdyI+cHJvamVjdGNhbGljby9mZWxpeDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Jlc2luLW9zL2JhbGVuYSIgcmVsPSJub2ZvbGxvdyI+cmVzaW4tb3MvYmFsZW5hPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ28ta2l2aWsva2l2aWsiIHJlbD0ibm9mb2xsb3ciPmdvLWtpdmlrL2tpdmlrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vVGVsZWZvbmljYS9nb3ZpY2UiIHJlbD0ibm9mb2xsb3ciPlRlbGVmb25pY2EvZ292aWNlPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvc3VwZXJnaWFudC9zdXBlcmdpYW50IiByZWw9Im5vZm9sbG93Ij5zdXBlcmdpYW50L3N1cGVyZ2lhbnQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9TZXJnZXlUc2Fsa292L2Jyb29jZSIgcmVsPSJub2ZvbGxvdyI+U2VyZ2V5VHNhbGtvdi9icm9vY2U8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zb25pYWgvZG5zbWFkZWVhc3kiIHJlbD0ibm9mb2xsb3ciPnNvbmlhaC9kbnNtYWRlZWFzeTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL29oc3UtY29tcC1iaW8vZnVubmVsIiByZWw9Im5vZm9sbG93Ij5vaHN1LWNvbXAtYmlvL2Z1bm5lbDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0VhZ2VySU8vU3RvdXQiIHJlbD0ibm9mb2xsb3ciPkVhZ2VySU8vU3RvdXQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpIiByZWw9Im5vZm9sbG93Ij5seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcnVzc3Jvc3MvY2FudmFzYXNzaWdubWVudHMiIHJlbD0ibm9mb2xsb3ciPnJ1c3Nyb3NzL2NhbnZhc2Fzc2lnbm1lbnRzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcmRlZ2dlcy9jcnlwdGx5LWFwaSIgcmVsPSJub2ZvbGxvdyI+cmRlZ2dlcy9jcnlwdGx5LWFwaTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Nhc3VhbGppbS9leGVnZ3V0b3IiIHJlbD0ibm9mb2xsb3ciPmNhc3VhbGppbS9leGVnZ3V0b3I8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kaXZzaG90L2dpdGxpbmciIHJlbD0ibm9mb2xsb3ciPmRpdnNob3QvZ2l0bGluZzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL1JXSk11cnBoeS9nb3JsIiByZWw9Im5vZm9sbG93Ij5SV0pNdXJwaHkvZ29ybDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2FuZHJlcm9ja2VyL2RlcGxveTQyIiByZWw9Im5vZm9sbG93Ij5hbmRyZXJvY2tlci9kZXBsb3k0MjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Vsd2luYXIvcmFtYmxlciIgcmVsPSJub2ZvbGxvdyI+ZWx3aW5hci9yYW1ibGVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vdG1haWFyb3RvL2dvcGFydG1hbiIgcmVsPSJub2ZvbGxvdyI+dG1haWFyb3RvL2dvcGFydG1hbjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2pmYnVzL2ltcHJlc3Npb25pc3QiIHJlbD0ibm9mb2xsb3ciPmpmYnVzL2ltcHJlc3Npb25pc3Q8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9KbWV5ZXJpbmcvemVhbG90IiByZWw9Im5vZm9sbG93Ij5KbWV5ZXJpbmcvemVhbG90PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29kZXAtbWlncmF0b3IvcmlnZ2VyLWhvc3QiIHJlbD0ibm9mb2xsb3ciPmdvZGVwLW1pZ3JhdG9yL3JpZ2dlci1ob3N0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vRHJvbmV2ZXJ5L011bHRpd2F5U3dpdGNoLUdvIiByZWw9Im5vZm9sbG93Ij5Ecm9uZXZlcnkvTXVsdGl3YXlTd2l0Y2gtR288L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90aG9hcy9waWNmaXQiIHJlbD0ibm9mb2xsb3ciPnRob2FzL3BpY2ZpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hbnRhc21hdGVsaXMvd2hvb3BsaXN0LXNlcnZlciIgcmVsPSJub2ZvbGxvdyI+bWFudGFzbWF0ZWxpcy93aG9vcGxpc3Qtc2VydmVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vam51dGhvbmcvaXRlbV9zZWFyY2giIHJlbD0ibm9mb2xsb3ciPmpudXRob25nL2l0ZW1fc2VhcmNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYnVrYWxhcGFrL3Nub3dib2FyZCIgcmVsPSJub2ZvbGxvdyI+YnVrYWxhcGFrL3Nub3dib2FyZDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcnNzaC9jb250YWluZXJzc2giIHJlbD0ibm9mb2xsb3ciPmNvbnRhaW5lcnNzaC9jb250YWluZXJzc2g8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb3JlbGVhc2VyL2dvcmVsZWFzZXIiIHJlbD0ibm9mb2xsb3ciPmdvcmVsZWFzZXIvZ29yZWxlYXNlcjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3RqcG56L3N0cnVjdGJvdCIgcmVsPSJub2ZvbGxvdyI+dGpwbnovc3RydWN0Ym90PC9hPjwvbGk+CjwvdWw+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtaW5zdGFsbCI+SW5zdGFsbDwvaDQ+CjxwcmU+PGNvZGU+Z28gZ2V0IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwoKLy8gdXNlIGluIHlvdXIgLmdvIGNvZGUKaW1wb3J0ICgKICAgICYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQo8L2NvZGU+PC9wcmU+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtdXNhZ2UiPlVzYWdlPC9oND4KPHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIDxhIGhyZWY9Imh0dHBzOi8vZ29sYW5nLm9yZy9yZWYvc3BlYyNUaGVfemVyb192YWx1ZSIgcmVsPSJub2ZvbGxvdyI+dGhleSBhcmUgemVybyB2YWx1ZXM8L2E+IHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BbHNvLCB5b3UgY2FuIG1lcmdlIG92ZXJ3cml0aW5nIHZhbHVlcyB1c2luZyB0aGUgdHJhbnNmb3JtZXIgPGNvZGU+V2l0aE92ZXJyaWRlPC9jb2RlPi48L3A+CjxwcmU+PGNvZGU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BZGRpdGlvbmFsbHksIHlvdSBjYW4gbWFwIGEgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gPGNvZGU+TWVyZ2UoKTwvY29kZT4uIEtleXMgYXJlIGNhcGl0YWxpemVkIHRvIGZpbmQgZWFjaCBjb3JyZXNwb25kaW5nIGV4cG9ydGVkIGZpZWxkLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWFwKCZhbXA7ZHN0LCBzcmNNYXApOyBlcnIgIT0gbmlsIHsKICAgIC8vIC4uLgp9CjwvY29kZT48L3ByZT4KPHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4uIFRoZXkgd2lsbCBiZSBqdXN0IGFzc2lnbmVkIGFzIHZhbHVlcy48L3A+CjxwPkhlcmUgaXMgYSBuaWNlIGV4YW1wbGU6PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQoKdHlwZSBGb28gc3RydWN0IHsKCUEgc3RyaW5nCglCIGludDY0Cn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBGb297CgkJQTogJiMzNDtvbmUmIzM0OywKCQlCOiAyLAoJfQoJZGVzdCA6PSBGb297CgkJQTogJiMzNDt0d28mIzM0OywKCX0KCW1lcmdvLk1lcmdlKCZhbXA7ZGVzdCwgc3JjKQoJZm10LlByaW50bG4oZGVzdCkKCS8vIFdpbGwgcHJpbnQKCS8vIHt0d28gMn0KfQo8L2NvZGU+PC9wcmU+CjxwPk5vdGU6IGlmIHRlc3QgYXJlIGZhaWxpbmcgZHVlIG1pc3NpbmcgcGFja2FnZSwgcGxlYXNlIGV4ZWN1dGU6PC9wPgo8cHJlPjxjb2RlPmdvIGdldCBnb3BrZy5pbi95YW1sLnYzCjwvY29kZT48L3ByZT4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS10cmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvaDU+CjxwPlRyYW5zZm9ybWVycyBhbGxvdyB0byBtZXJnZSBzcGVjaWZpYyB0eXBlcyBkaWZmZXJlbnRseSB0aGFuIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJbiBvdGhlciB3b3Jkcywgbm93IHlvdSBjYW4gY3VzdG9taXplIGhvdyBzb21lIHR5cGVzIGFyZSBtZXJnZWQuIEZvciBleGFtcGxlLCA8Y29kZT50aW1lLlRpbWU8L2NvZGU+IGlzIGEgc3RydWN0OyBpdCBkb2VzbiYjMzk7dCBoYXZlIHplcm8gdmFsdWUgYnV0IElzWmVybyBjYW4gcmV0dXJuIHRydWUgYmVjYXVzZSBpdCBoYXMgZmllbGRzIHdpdGggemVybyB2YWx1ZS4gSG93IGNhbiB3ZSBtZXJnZSBhIG5vbi16ZXJvIDxjb2RlPnRpbWUuVGltZTwvY29kZT4/PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKICAgICAgICAmIzM0O3JlZmxlY3QmIzM0OwogICAgICAgICYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9jb2RlPjwvcHJlPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWNvbnRhY3QtbWUiPkNvbnRhY3QgbWU8L2g0Pgo8cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIiByZWw9Im5vZm9sbG93Ij5AaW1fZGFyaW88L2E+PC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWFib3V0Ij5BYm91dDwvaDQ+CjxwPldyaXR0ZW4gYnkgPGEgaHJlZj0iaHR0cDovL2RhcmlvLmltIiByZWw9Im5vZm9sbG93Ij5EYXJpbyBDYXN0YcOxw6k8L2E+LjwvcD4KPGg0IGNsYXNzPSJoMiIgaWQ9InJlYWRtZS1saWNlbnNlIj5MaWNlbnNlPC9oND4KPHA+PGEgaHJlZj0iaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZSIgcmVsPSJub2ZvbGxvdyI+QlNEIDMtQ2xhdXNlPC9hPiBsaWNlbnNlLCBhcyA8YSBocmVmPSJodHRwOi8vZ29sYW5nLm9yZy9MSUNFTlNFIiByZWw9Im5vZm9sbG93Ij5HbyBsYW5ndWFnZTwvYT4uPC9wPgo8cD48YSBocmVmPSJodHRwczovL2FwcC5mb3NzYS5pby9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvP3JlZj1iYWRnZV9sYXJnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vYXBwLmZvc3NhLmlvL2FwaS9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvLnN2Zz90eXBlPWxhcmdlIiBhbHQ9IkZPU1NBIFN0YXR1cyIvPjwvYT48L3A+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iVW5pdFJlYWRtZS1leHBhbmRMaW5rIGpzLXJlYWRtZUV4cGFuZCIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWV4cGFuZCIgZGF0YS1ndG1jPSJyZWFkbWUgYnV0dG9uIgogICAgICAgICAgYXJpYS1sYWJlbD0iRXhwYW5kIFJlYWRtZSI+RXhwYW5kIOKWvjwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJVbml0UmVhZG1lLWNvbGxhcHNlTGluayBqcy1yZWFkbWVDb2xsYXBzZSIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWNvbGxhcHNlIiBkYXRhLWd0bWM9InJlYWRtZSBidXR0b24iCiAgICAgICAgICBhcmlhLWxhYmVsPSJFeHBhbmQgUmVhZG1lIj5Db2xsYXBzZSDilrQ8L2J1dHRvbj4KICAgIAogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdERvYyI+CiAgICA8aDIgY2xhc3M9IlVuaXREb2MtdGl0bGUiIGlkPSJzZWN0aW9uLWRvY3VtZW50YXRpb24iPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb2RlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgRG9jdW1lbnRhdGlvbgogICAgICA8YSBjbGFzcz0iVW5pdERvYy1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLWRvY3VtZW50YXRpb24iIGFyaWEtbGFiZWw9IkdvIHRvIERvY3VtZW50YXRpb24iPsK2PC9hPgogICAgPC9oMj4KICAgIAogIAogICAgCiAgCgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbiBqcy1kb2N1bWVudGF0aW9uIj4KICAgICAgCiAgICAgICAgCgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnRlbnQganMtZG9jQ29udGVudCI+IDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3Ij4KICAgIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctb3ZlcnZpZXciIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3SGVhZGVyIj5PdmVydmlldyA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3IiBhcmlhLWxhYmVsPSJHbyB0byBPdmVydmlldyI+wrY8L2E+PC9oMz4KCjxkaXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iVGFibGUgb2YgQ29udGVudHMiPgogIDx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2MgRG9jdW1lbnRhdGlvbi10b2MtY29sdW1ucyI+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1TdGF0dXMiPlN0YXR1czwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUltcG9ydGFudF9ub3RlIj5JbXBvcnRhbnQgbm90ZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUluc3RhbGwiPkluc3RhbGw8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1Vc2FnZSI+VXNhZ2U8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1UcmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUNvbnRhY3RfbWUiPkNvbnRhY3QgbWU8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1BYm91dCI+QWJvdXQ8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1MaWNlbnNlIj5MaWNlbnNlPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KPC9kaXY+CjxwPkEgaGVscGVyIHRvIG1lcmdlIHN0cnVjdHMgYW5kIG1hcHMgaW4gR29sYW5nLiBVc2VmdWwgZm9yIGNvbmZpZ3VyYXRpb24gZGVmYXVsdCB2YWx1ZXMsIGF2b2lkaW5nIG1lc3N5IGlmLXN0YXRlbWVudHMuCjwvcD48cD5NZXJnbyBtZXJnZXMgc2FtZS10eXBlIHN0cnVjdHMgYW5kIG1hcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBpbiB6ZXJvLXZhbHVlIGZpZWxkcy4gTWVyZ28gd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcy4gSXQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgb25lLiBJdCBhbHNvIHdvbiYjMzk7dCBtZXJnZSBzdHJ1Y3RzIGluc2lkZSBtYXBzIChiZWNhdXNlIHRoZXkgYXJlIG5vdCBhZGRyZXNzYWJsZSB1c2luZyBHbyByZWZsZWN0aW9uKS4KPC9wPjxoNCBpZD0iaGRyLVN0YXR1cyI+U3RhdHVzIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1TdGF0dXMiIGFyaWEtbGFiZWw9IkdvIHRvIFN0YXR1cyI+wrY8L2E+PC9oND48cD5JdCBpcyByZWFkeSBmb3IgcHJvZHVjdGlvbiB1c2UuIEl0IGlzIHVzZWQgaW4gc2V2ZXJhbCBwcm9qZWN0cyBieSBEb2NrZXIsIEdvb2dsZSwgVGhlIExpbnV4IEZvdW5kYXRpb24sIFZNV2FyZSwgU2hvcGlmeSwgZXRjLgo8L3A+PGg0IGlkPSJoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbXBvcnRhbnRfbm90ZSIgYXJpYS1sYWJlbD0iR28gdG8gSW1wb3J0YW50IG5vdGUiPsK2PC9hPjwvaDQ+PHA+UGxlYXNlIGtlZXAgaW4gbWluZCB0aGF0IGEgcHJvYmxlbWF0aWMgUFIgYnJva2UgMC4zLjkuIFdlIHJldmVydGVkIGl0IGluIDAuMy4xMC4gV2UgY29uc2lkZXIgMC4zLjEwIGFzIHN0YWJsZSBidXQgbm90IGJ1Zy1mcmVlLiAuIEFsc28sIHRoaXMgdmVyc2lvbiBhZGRzIHN1cHBvdCBmb3IgZ28gbW9kdWxlcy4KPC9wPjxwPktlZXAgaW4gbWluZCB0aGF0IGluIDAuMy4yLCBNZXJnbyBjaGFuZ2VkIE1lcmdlKCkgYW5kIE1hcCgpIHNpZ25hdHVyZXMgdG8gc3VwcG9ydCB0cmFuc2Zvcm1lcnMuIFdlIGFkZGVkIGFuIG9wdGlvbmFsL3ZhcmlhZGljIGFyZ3VtZW50IHNvIHRoYXQgaXQgd29uJiMzOTt0IGJyZWFrIHRoZSBleGlzdGluZyBjb2RlLgo8L3A+PHA+SWYgeW91IHdlcmUgdXNpbmcgTWVyZ28gYmVmb3JlIEFwcmlsIDZ0aCwgMjAxNSwgcGxlYXNlIGNoZWNrIHlvdXIgcHJvamVjdCB3b3JrcyBhcyBpbnRlbmRlZCBhZnRlciB1cGRhdGluZyB5b3VyIGxvY2FsIGNvcHkgd2l0aCBnbyBnZXQgLXUgZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvLiBJIGFwb2xvZ2l6ZSBmb3IgYW55IGlzc3VlIGNhdXNlZCBieSBpdHMgcHJldmlvdXMgYmVoYXZpb3IgYW5kIGFueSBmdXR1cmUgYnVnIHRoYXQgTWVyZ28gY291bGQgY2F1c2UgaW4gZXhpc3RpbmcgcHJvamVjdHMgYWZ0ZXIgdGhlIGNoYW5nZSAocmVsZWFzZSAwLjIuMCkuCjwvcD48aDQgaWQ9Imhkci1JbnN0YWxsIj5JbnN0YWxsIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbnN0YWxsIiBhcmlhLWxhYmVsPSJHbyB0byBJbnN0YWxsIj7CtjwvYT48L2g0PjxwPkRvIHlvdXIgdXN1YWwgaW5zdGFsbGF0aW9uIHByb2NlZHVyZToKPC9wPjxwcmU+Z28gZ2V0IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwoKLy8gdXNlIGluIHlvdXIgLmdvIGNvZGUKaW1wb3J0ICgKICAgICYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQo8L3ByZT48aDQgaWQ9Imhkci1Vc2FnZSI+VXNhZ2UgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLVVzYWdlIiBhcmlhLWxhYmVsPSJHbyB0byBVc2FnZSI+wrY8L2E+PC9oND48cD5Zb3UgY2FuIG9ubHkgbWVyZ2Ugc2FtZS10eXBlIHN0cnVjdHMgd2l0aCBleHBvcnRlZCBmaWVsZHMgaW5pdGlhbGl6ZWQgYXMgemVybyB2YWx1ZSBvZiB0aGVpciB0eXBlIGFuZCBzYW1lLXR5cGVzIG1hcHMuIE1lcmdvIHdvbiYjMzk7dCBtZXJnZSB1bmV4cG9ydGVkIChwcml2YXRlKSBmaWVsZHMgYnV0IHdpbGwgZG8gcmVjdXJzaXZlbHkgYW55IGV4cG9ydGVkIG9uZS4gSXQgd29uJiMzOTt0IG1lcmdlIGVtcHR5IHN0cnVjdHMgdmFsdWUgYXMgdGhleSBhcmUgemVybyB2YWx1ZXMgdG9vLiBBbHNvLCBtYXBzIHdpbGwgYmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5IGV4Y2VwdCBmb3Igc3RydWN0cyBpbnNpZGUgbWFwcyAoYmVjYXVzZSB0aGV5IGFyZSBub3QgYWRkcmVzc2FibGUgdXNpbmcgR28gcmVmbGVjdGlvbikuCjwvcD48cHJlPmlmIGVyciA6PSBtZXJnby5NZXJnZSgmYW1wO2RzdCwgc3JjKTsgZXJyICE9IG5pbCB7CgkvLyAuLi4KfQo8L3ByZT48cD5BbHNvLCB5b3UgY2FuIG1lcmdlIG92ZXJ3cml0aW5nIHZhbHVlcyB1c2luZyB0aGUgdHJhbnNmb3JtZXIgV2l0aE92ZXJyaWRlLgo8L3A+PHByZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYywgbWVyZ28uV2l0aE92ZXJyaWRlKTsgZXJyICE9IG5pbCB7CgkvLyAuLi4KfQo8L3ByZT48cD5BZGRpdGlvbmFsbHksIHlvdSBjYW4gbWFwIGEgbWFwW3N0cmluZ11pbnRlcmZhY2V7fSB0byBhIHN0cnVjdCAoYW5kIG90aGVyd2lzZSwgZnJvbSBzdHJ1Y3QgdG8gbWFwKSwgZm9sbG93aW5nIHRoZSBzYW1lIHJlc3RyaWN0aW9ucyBhcyBpbiBNZXJnZSgpLiBLZXlzIGFyZSBjYXBpdGFsaXplZCB0byBmaW5kIGVhY2ggY29ycmVzcG9uZGluZyBleHBvcnRlZCBmaWVsZC4KPC9wPjxwcmU+aWYgZXJyIDo9IG1lcmdvLk1hcCgmYW1wO2RzdCwgc3JjTWFwKTsgZXJyICE9IG5pbCB7CgkvLyAuLi4KfQo8L3ByZT48cD5XYXJuaW5nOiBpZiB5b3UgbWFwIGEgc3RydWN0IHRvIG1hcCwgaXQgd29uJiMzOTt0IGRvIGl0IHJlY3Vyc2l2ZWx5LiBEb24mIzM5O3QgZXhwZWN0IE1lcmdvIHRvIG1hcCBzdHJ1Y3QgbWVtYmVycyBvZiB5b3VyIHN0cnVjdCBhcyBtYXBbc3RyaW5nXWludGVyZmFjZXt9LiBUaGV5IHdpbGwgYmUganVzdCBhc3NpZ25lZCBhcyB2YWx1ZXMuCjwvcD48cD5IZXJlIGlzIGEgbmljZSBleGFtcGxlOgo8L3A+PHByZT5wYWNrYWdlIG1haW4KCmltcG9ydCAoCgkmIzM0O2ZtdCYjMzQ7CgkmIzM0O2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyYjMzQ7CikKCnR5cGUgRm9vIHN0cnVjdCB7CglBIHN0cmluZwoJQiBpbnQ2NAp9CgpmdW5jIG1haW4oKSB7CglzcmMgOj0gRm9vewoJCUE6ICYjMzQ7b25lJiMzNDssCgkJQjogMiwKCX0KCWRlc3QgOj0gRm9vewoJCUE6ICYjMzQ7dHdvJiMzNDssCgl9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYykKCWZtdC5QcmludGxuKGRlc3QpCgkvLyBXaWxsIHByaW50CgkvLyB7dHdvIDJ9Cn0KPC9wcmU+PGg0IGlkPSJoZHItVHJhbnNmb3JtZXJzIj5UcmFuc2Zvcm1lcnMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLVRyYW5zZm9ybWVycyIgYXJpYS1sYWJlbD0iR28gdG8gVHJhbnNmb3JtZXJzIj7CtjwvYT48L2g0PjxwPlRyYW5zZm9ybWVycyBhbGxvdyB0byBtZXJnZSBzcGVjaWZpYyB0eXBlcyBkaWZmZXJlbnRseSB0aGFuIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJbiBvdGhlciB3b3Jkcywgbm93IHlvdSBjYW4gY3VzdG9taXplIGhvdyBzb21lIHR5cGVzIGFyZSBtZXJnZWQuIEZvciBleGFtcGxlLCB0aW1lLlRpbWUgaXMgYSBzdHJ1Y3Q7IGl0IGRvZXNuJiMzOTt0IGhhdmUgemVybyB2YWx1ZSBidXQgSXNaZXJvIGNhbiByZXR1cm4gdHJ1ZSBiZWNhdXNlIGl0IGhhcyBmaWVsZHMgd2l0aCB6ZXJvIHZhbHVlLiBIb3cgY2FuIHdlIG1lcmdlIGEgbm9uLXplcm8gdGltZS5UaW1lPwo8L3A+PHByZT5wYWNrYWdlIG1haW4KCmltcG9ydCAoCgkmIzM0O2ZtdCYjMzQ7CgkmIzM0O2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyYjMzQ7CgkJJiMzNDtyZWZsZWN0JiMzNDsKCQkmIzM0O3RpbWUmIzM0OwopCgp0eXBlIHRpbWVUcmFuc2Zvcm1lciBzdHJ1Y3Qgewp9CgpmdW5jICh0IHRpbWVUcmFuc2Zvcm1lcikgVHJhbnNmb3JtZXIodHlwIHJlZmxlY3QuVHlwZSkgZnVuYyhkc3QsIHNyYyByZWZsZWN0LlZhbHVlKSBlcnJvciB7CglpZiB0eXAgPT0gcmVmbGVjdC5UeXBlT2YodGltZS5UaW1le30pIHsKCQlyZXR1cm4gZnVuYyhkc3QsIHNyYyByZWZsZWN0LlZhbHVlKSBlcnJvciB7CgkJCWlmIGRzdC5DYW5TZXQoKSB7CgkJCQlpc1plcm8gOj0gZHN0Lk1ldGhvZEJ5TmFtZSgmIzM0O0lzWmVybyYjMzQ7KQoJCQkJcmVzdWx0IDo9IGlzWmVyby5DYWxsKFtdcmVmbGVjdC5WYWx1ZXt9KQoJCQkJaWYgcmVzdWx0WzBdLkJvb2woKSB7CgkJCQkJZHN0LlNldChzcmMpCgkJCQl9CgkJCX0KCQkJcmV0dXJuIG5pbAoJCX0KCX0KCXJldHVybiBuaWwKfQoKdHlwZSBTbmFwc2hvdCBzdHJ1Y3QgewoJVGltZSB0aW1lLlRpbWUKCS8vIC4uLgp9CgpmdW5jIG1haW4oKSB7CglzcmMgOj0gU25hcHNob3R7dGltZS5Ob3coKX0KCWRlc3QgOj0gU25hcHNob3R7fQoJbWVyZ28uTWVyZ2UoJmFtcDtkZXN0LCBzcmMsIG1lcmdvLldpdGhUcmFuc2Zvcm1lcnModGltZVRyYW5zZm9ybWVye30pKQoJZm10LlByaW50bG4oZGVzdCkKCS8vIFdpbGwgcHJpbnQKCS8vIHsgMjAxOC0wMS0xMiAwMToxNTowMCArMDAwMCBVVEMgbT0rMC4wMDAwMDAwMDEgfQp9CjwvcHJlPjxoNCBpZD0iaGRyLUNvbnRhY3RfbWUiPkNvbnRhY3QgbWUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUNvbnRhY3RfbWUiIGFyaWEtbGFiZWw9IkdvIHRvIENvbnRhY3QgbWUiPsK2PC9hPjwvaDQ+PHA+SWYgSSBjYW4gaGVscCB5b3UsIHlvdSBoYXZlIGFuIGlkZWEgb3IgeW91IGFyZSB1c2luZyBNZXJnbyBpbiB5b3VyIHByb2plY3RzLCBkb24mIzM5O3QgaGVzaXRhdGUgdG8gZHJvcCBtZSBhIGxpbmUgKG9yIGEgcHVsbCByZXF1ZXN0KTogPGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9pbV9kYXJpbyI+aHR0cHM6Ly90d2l0dGVyLmNvbS9pbV9kYXJpbzwvYT4KPC9wPjxoNCBpZD0iaGRyLUFib3V0Ij5BYm91dCA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItQWJvdXQiIGFyaWEtbGFiZWw9IkdvIHRvIEFib3V0Ij7CtjwvYT48L2g0PjxwPldyaXR0ZW4gYnkgRGFyaW8gQ2FzdGHDscOpOiA8YSBocmVmPSJodHRwczovL2RhLnJpby5obiI+aHR0cHM6Ly9kYS5yaW8uaG48L2E+CjwvcD48aDQgaWQ9Imhkci1MaWNlbnNlIj5MaWNlbnNlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1MaWNlbnNlIiBhcmlhLWxhYmVsPSJHbyB0byBMaWNlbnNlIj7CtjwvYT48L2g0PjxwPkJTRCAzLUNsYXVzZSBsaWNlbnNlLCBhcyBHbyBsYW5ndWFnZS4KPC9wPgo8L3NlY3Rpb24+PHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXgiPgogICAgPGgzIGlkPSJwa2ctaW5kZXgiIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4SGVhZGVyIj5JbmRleCA8YSBocmVmPSIjcGtnLWluZGV4IiBhcmlhLWxhYmVsPSJHbyB0byBJbmRleCI+wrY8L2E+PC9oMz4KCjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleExpc3QiPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhWYXJpYWJsZXMiPjxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj5WYXJpYWJsZXM8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNYXAiPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWFwV2l0aE92ZXJ3cml0ZSI+ZnVuYyBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWVyZ2UiPmZ1bmMgTWVyZ2UoZHN0LCBzcmMgaW50ZXJmYWNle30sIG9wdHMgLi4uZnVuYygqQ29uZmlnKSkgZXJyb3I8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiPmZ1bmMgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aEFwcGVuZFNsaWNlIj5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVycmlkZUVtcHR5U2xpY2UiPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiPmZ1bmMgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhUcmFuc2Zvcm1lcnMiPmZ1bmMgV2l0aFRyYW5zZm9ybWVycyh0cmFuc2Zvcm1lcnMgVHJhbnNmb3JtZXJzKSBmdW5jKCpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aFR5cGVDaGVjayI+ZnVuYyBXaXRoVHlwZUNoZWNrKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhvdXREZXJlZmVyZW5jZSI+ZnVuYyBXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnICpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGUiPgogICAgICAgICAgPGEgaHJlZj0iI0NvbmZpZyI+dHlwZSBDb25maWc8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjVHJhbnNmb3JtZXJzIj50eXBlIFRyYW5zZm9ybWVyczwvYT48L2xpPgo8L3VsPgo8L3NlY3Rpb24+PGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy1jb25zdGFudHMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50c0hlYWRlciI+Q29uc3RhbnRzIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIiBhcmlhLWxhYmVsPSJHbyB0byBDb25zdGFudHMiPsK2PC9hPjwvaDM+CgogIDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50cyI+PHAgY2xhc3M9IkRvY3VtZW50YXRpb24tZW1wdHkiPlRoaXMgc2VjdGlvbiBpcyBlbXB0eS48L3A+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLXZhcmlhYmxlcyIgY2xhc3M9IkRvY3VtZW50YXRpb24tdmFyaWFibGVzSGVhZGVyIj5WYXJpYWJsZXMgPGEgaHJlZj0iI3BrZy12YXJpYWJsZXMiIGFyaWEtbGFiZWw9IkdvIHRvIFZhcmlhYmxlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdmFyaWFibGVzIj4KICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbkxpbmsiPjxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdvLmdvI0wxNyI+VmlldyBTb3VyY2U8L2E+PC9zcGFuPgogICAgICA8cHJlPnZhciAoCjxzcGFuIGlkPSJFcnJOaWxBcmd1bWVudHMiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJOaWxBcmd1bWVudHMgICAgICAgICAgICAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7c3JjIGFuZCBkc3QgbXVzdCBub3QgYmUgbmlsJiMzNDspCjwvc3Bhbj48c3BhbiBpZD0iRXJyRGlmZmVyZW50QXJndW1lbnRzVHlwZXMiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJEaWZmZXJlbnRBcmd1bWVudHNUeXBlcyAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7c3JjIGFuZCBkc3QgbXVzdCBiZSBvZiBzYW1lIHR5cGUmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJOb3RTdXBwb3J0ZWQiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJOb3RTdXBwb3J0ZWQgICAgICAgICAgICAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7b25seSBzdHJ1Y3RzLCBtYXBzLCBhbmQgc2xpY2VzIGFyZSBzdXBwb3J0ZWQmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJFeHBlY3RlZE1hcEFzRGVzdGluYXRpb24iIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJFeHBlY3RlZE1hcEFzRGVzdGluYXRpb24gICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7ZHN0IHdhcyBleHBlY3RlZCB0byBiZSBhIG1hcCYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyckV4cGVjdGVkU3RydWN0QXNEZXN0aW5hdGlvbiIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckV4cGVjdGVkU3RydWN0QXNEZXN0aW5hdGlvbiA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtkc3Qgd2FzIGV4cGVjdGVkIHRvIGJlIGEgc3RydWN0JiMzNDspCjwvc3Bhbj48c3BhbiBpZD0iRXJyTm9uUG9pbnRlckFyZ3VtZW50IiBkYXRhLWtpbmQ9InZhcmlhYmxlIj4JRXJyTm9uUG9pbnRlckFyZ3VtZW50ICAgICAgICAgID0gPGEgaHJlZj0iL2Vycm9ycyI+ZXJyb3JzPC9hPi48YSBocmVmPSIvZXJyb3JzI05ldyI+TmV3PC9hPigmIzM0O2RzdCBtdXN0IGJlIGEgcG9pbnRlciYjMzQ7KQo8L3NwYW4+KTwvcHJlPgogICAgPC9kaXY+CiAgPHA+RXJyb3JzIHJlcG9ydGVkIGJ5IE1lcmdvIHdoZW4gaXQgZmluZHMgaW52YWxpZCBhcmd1bWVudHMuCjwvcD4KPC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLWZ1bmN0aW9ucyIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zSGVhZGVyIj5GdW5jdGlvbnMgPGEgaHJlZj0iI3BrZy1mdW5jdGlvbnMiIGFyaWEtbGFiZWw9IkdvIHRvIEZ1bmN0aW9ucyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zIj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvI0wxMzIiPk1hcDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjTWFwIiBhcmlhLWxhYmVsPSJHbyB0byBNYXAiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyBNYXAoZHN0LCBzcmMgaW50ZXJmYWNle30sIG9wdHMgLi4uZnVuYygqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPikpIDxhIGhyZWY9Ii9idWlsdGluI2Vycm9yIj5lcnJvcjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPk1hcCBzZXRzIGZpZWxkcyYjMzk7IHZhbHVlcyBpbiBkc3QgZnJvbSBzcmMuCnNyYyBjYW4gYmUgYSBtYXAgd2l0aCBzdHJpbmcga2V5cyBvciBhIHN0cnVjdC4gZHN0IG11c3QgYmUgdGhlIG9wcG9zaXRlOgppZiBzcmMgaXMgYSBtYXAsIGRzdCBtdXN0IGJlIGEgdmFsaWQgcG9pbnRlciB0byBzdHJ1Y3QuIElmIHNyYyBpcyBhIHN0cnVjdCwKZHN0IG11c3QgYmUgbWFwW3N0cmluZ11pbnRlcmZhY2V7fS4KSXQgd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcyBhbmQgd2lsbCBkbyByZWN1cnNpdmVseQphbnkgZXhwb3J0ZWQgZmllbGQuCklmIGRzdCBpcyBhIG1hcCwga2V5cyB3aWxsIGJlIHNyYyBmaWVsZHMmIzM5OyBuYW1lcyBpbiBsb3dlciBjYW1lbCBjYXNlLgpNaXNzaW5nIGtleSBpbiBzcmMgdGhhdCBkb2VzbiYjMzk7dCBtYXRjaCBhIGZpZWxkIGluIGRzdCB3aWxsIGJlIHNraXBwZWQuIFRoaXMKZG9lc24mIzM5O3QgYXBwbHkgaWYgZHN0IGlzIGEgbWFwLgpUaGlzIGlzIHNlcGFyYXRlZCBtZXRob2QgZnJvbSBNZXJnZSBiZWNhdXNlIGl0IGlzIGNsZWFuZXIgYW5kIGl0IGtlZXBzIHNhbmUKc2VtYW50aWNzOiBtZXJnaW5nIGVxdWFsIHR5cGVzLCBtYXBwaW5nIGRpZmZlcmVudCAocmVzdHJpY3RlZCkgdHlwZXMuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNYXBXaXRoT3ZlcndyaXRlIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvI0wxMzkiPk1hcFdpdGhPdmVyd3JpdGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01hcFdpdGhPdmVyd3JpdGUiIGFyaWEtbGFiZWw9IkdvIHRvIE1hcFdpdGhPdmVyd3JpdGUiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NYXBXaXRoT3ZlcndyaXRlIHdpbGwgZG8gdGhlIHNhbWUgYXMgTWFwIGV4Y2VwdCB0aGF0IG5vbi1lbXB0eSBkc3QgYXR0cmlidXRlcyB3aWxsIGJlIG92ZXJyaWRkZW4gYnkKbm9uLWVtcHR5IHNyYyBhdHRyaWJ1dGUgdmFsdWVzLgpEZXByZWNhdGVkOiBVc2UgTWFwKOKApikgd2l0aCBXaXRoT3ZlcnJpZGUKPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9Ik1lcmdlIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDMxOCI+TWVyZ2U8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01lcmdlIiBhcmlhLWxhYmVsPSJHbyB0byBNZXJnZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NZXJnZSB3aWxsIGZpbGwgYW55IGVtcHR5IGZvciB2YWx1ZSB0eXBlIGF0dHJpYnV0ZXMgb24gdGhlIGRzdCBzdHJ1Y3QgdXNpbmcgY29ycmVzcG9uZGluZwpzcmMgYXR0cmlidXRlcyBpZiB0aGV5IHRoZW1zZWx2ZXMgYXJlIG5vdCBlbXB0eS4gZHN0IGFuZCBzcmMgbXVzdCBiZSB2YWxpZCBzYW1lLXR5cGUgc3RydWN0cwphbmQgZHN0IG11c3QgYmUgYSBwb2ludGVyIHRvIHN0cnVjdC4KSXQgd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcyBhbmQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgZmllbGQuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZVdpdGhPdmVyd3JpdGUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzI1Ij5NZXJnZVdpdGhPdmVyd3JpdGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01lcmdlV2l0aE92ZXJ3cml0ZSIgYXJpYS1sYWJlbD0iR28gdG8gTWVyZ2VXaXRoT3ZlcndyaXRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NZXJnZVdpdGhPdmVyd3JpdGUgd2lsbCBkbyB0aGUgc2FtZSBhcyBNZXJnZSBleGNlcHQgdGhhdCBub24tZW1wdHkgZHN0IGF0dHJpYnV0ZXMgd2lsbCBiZSBvdmVycmlkZGVuIGJ5Cm5vbi1lbXB0eSBzcmMgYXR0cmlidXRlIHZhbHVlcy4KRGVwcmVjYXRlZDogdXNlIE1lcmdlKOKApikgd2l0aCBXaXRoT3ZlcnJpZGUKPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhBcHBlbmRTbGljZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzNTkiPldpdGhBcHBlbmRTbGljZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aEFwcGVuZFNsaWNlIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRoQXBwZW5kU2xpY2UiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbkxhYmVsIj5hZGRlZCBpbjwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uVmVyc2lvbiI+djAuMy40PC9zcGFuPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyBXaXRoQXBwZW5kU2xpY2UoY29uZmlnICo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KTwvcHJlPgogICAgPC9kaXY+CiAgPHA+V2l0aEFwcGVuZFNsaWNlIHdpbGwgbWFrZSBtZXJnZSBhcHBlbmQgc2xpY2VzIGluc3RlYWQgb2Ygb3ZlcndyaXRpbmcgaXQuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoT3ZlcnJpZGUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzM3Ij5XaXRoT3ZlcnJpZGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhPdmVycmlkZSIgYXJpYS1sYWJlbD0iR28gdG8gV2l0aE92ZXJyaWRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhPdmVycmlkZSB3aWxsIG1ha2UgbWVyZ2Ugb3ZlcnJpZGUgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpdGggbm9uLWVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQ4Ij5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIHdpbGwgbWFrZSBtZXJnZSBvdmVycmlkZSBlbXB0eSBkc3Qgc2xpY2Ugd2l0aCBlbXB0eSBzcmMgc2xpY2UuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQyIj5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSIgYXJpYS1sYWJlbD0iR28gdG8gV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuOTwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSB3aWxsIG1ha2UgbWVyZ2Ugb3ZlcnJpZGUgbm9uIGVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpdGggZW1wdHkgc3JjIGF0dHJpYnV0ZXMgdmFsdWVzLgo8L3A+CgogIAoKICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iV2l0aFNsaWNlRGVlcENvcHkiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzY5Ij5XaXRoU2xpY2VEZWVwQ29weTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aFNsaWNlRGVlcENvcHkiIGFyaWEtbGFiZWw9IkdvIHRvIFdpdGhTbGljZURlZXBDb3B5Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTA8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhTbGljZURlZXBDb3B5IHdpbGwgbWVyZ2Ugc2xpY2UgZWxlbWVudCBvbmUgYnkgb25lIHdpdGggT3ZlcndyaXRlIGZsYWcuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDMzMCI+V2l0aFRyYW5zZm9ybWVyczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyIgYXJpYS1sYWJlbD0iR28gdG8gV2l0aFRyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzIDxhIGhyZWY9IiNUcmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvYT4pIGZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHJhbnNmb3JtZXJzIGFkZHMgdHJhbnNmb3JtZXJzIHRvIG1lcmdlLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIG1lcmdpbmcgb2Ygc29tZSB0eXBlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhUeXBlQ2hlY2siIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzY0Ij5XaXRoVHlwZUNoZWNrPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoVHlwZUNoZWNrIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRoVHlwZUNoZWNrIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aFR5cGVDaGVjayhjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHlwZUNoZWNrIHdpbGwgbWFrZSBtZXJnZSBjaGVjayB0eXBlcyB3aGlsZSBvdmVyd3JpdGluZyBpdCAobXVzdCBiZSB1c2VkIHdpdGggV2l0aE92ZXJyaWRlKS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhvdXREZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzNTQiPldpdGhvdXREZXJlZmVyZW5jZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aG91dERlcmVmZXJlbmNlIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRob3V0RGVyZWZlcmVuY2UiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbkxhYmVsIj5hZGRlZCBpbjwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uVmVyc2lvbiI+djAuMy4xNTwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aG91dERlcmVmZXJlbmNlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhvdXREZXJlZmVyZW5jZSBwcmV2ZW50cyBkZXJlZmVyZW5jaW5nIHBvaW50ZXJzIHdoZW4gZXZhbHVhdGluZyB3aGV0aGVyIHRoZXkgYXJlIGVtcHR5CihpLmUuIGEgbm9uLW5pbCBwb2ludGVyIGlzIG5ldmVyIGNvbnNpZGVyZWQgZW1wdHkpLgo8L3A+CgogIAoKICAgICAgICA8L2Rpdj48L3NlY3Rpb24+CgogIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctdHlwZXMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVzSGVhZGVyIj5UeXBlcyA8YSBocmVmPSIjcGtnLXR5cGVzIiBhcmlhLWxhYmVsPSJHbyB0byBUeXBlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZXMiPjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNvbmZpZyIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMNDAiPkNvbmZpZzwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ29uZmlnIiBhcmlhLWxhYmVsPSJHbyB0byBDb25maWciPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+dHlwZSBDb25maWcgc3RydWN0IHsKPHNwYW4gaWQ9IkNvbmZpZy5UcmFuc2Zvcm1lcnMiIGRhdGEta2luZD0iZmllbGQiPglUcmFuc2Zvcm1lcnMgICAgICAgICA8YSBocmVmPSIjVHJhbnNmb3JtZXJzIj5UcmFuc2Zvcm1lcnM8L2E+Cjwvc3Bhbj48c3BhbiBpZD0iQ29uZmlnLk92ZXJ3cml0ZSIgZGF0YS1raW5kPSJmaWVsZCI+CU92ZXJ3cml0ZSAgICAgICAgICAgIDxhIGhyZWY9Ii9idWlsdGluI2Jvb2wiPmJvb2w8L2E+Cjwvc3Bhbj48c3BhbiBpZD0iQ29uZmlnLlNob3VsZE5vdERlcmVmZXJlbmNlIiBkYXRhLWtpbmQ9ImZpZWxkIj4JU2hvdWxkTm90RGVyZWZlcmVuY2UgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPjxzcGFuIGlkPSJDb25maWcuQXBwZW5kU2xpY2UiIGRhdGEta2luZD0iZmllbGQiPglBcHBlbmRTbGljZSAgICAgICAgICA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5UeXBlQ2hlY2siIGRhdGEta2luZD0iZmllbGQiPglUeXBlQ2hlY2sgICAgICAgICAgICA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPgo8L3NwYW4+CTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBjb250YWlucyBmaWx0ZXJlZCBvciB1bmV4cG9ydGVkIGZpZWxkczwvc3Bhbj4KfTwvcHJlPgogICAgPC9kaXY+CiAgCgogIAoKICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IlRyYW5zZm9ybWVycyIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMNTIiPlRyYW5zZm9ybWVyczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjVHJhbnNmb3JtZXJzIiBhcmlhLWxhYmVsPSJHbyB0byBUcmFuc2Zvcm1lcnMiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+dHlwZSBUcmFuc2Zvcm1lcnMgaW50ZXJmYWNlIHsKPHNwYW4gaWQ9IlRyYW5zZm9ybWVycy5UcmFuc2Zvcm1lciIgZGF0YS1raW5kPSJtZXRob2QiPglUcmFuc2Zvcm1lcig8YSBocmVmPSIvcmVmbGVjdCI+cmVmbGVjdDwvYT4uPGEgaHJlZj0iL3JlZmxlY3QjVHlwZSI+VHlwZTwvYT4pIGZ1bmMoZHN0LCBzcmMgPGEgaHJlZj0iL3JlZmxlY3QiPnJlZmxlY3Q8L2E+LjxhIGhyZWY9Ii9yZWZsZWN0I1ZhbHVlIj5WYWx1ZTwvYT4pIDxhIGhyZWY9Ii9idWlsdGluI2Vycm9yIj5lcnJvcjwvYT4KPC9zcGFuPn08L3ByZT4KICAgIDwvZGl2PgogIAoKICAKCiAgICA8L2Rpdj48L3NlY3Rpb24+PC9kaXY+IAoKCgoKCgogICAgICAKICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgICAKICAgICAgCiAgICAgIAogICAgICAgIAogIDxkaXYgY2xhc3M9IlVuaXRGaWxlcyBqcy11bml0RmlsZXMiPgogICAgPGgyIGNsYXNzPSJVbml0RmlsZXMtdGl0bGUiIGlkPSJzZWN0aW9uLXNvdXJjZWZpbGVzIj4KICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaW5zZXJ0X2RyaXZlX2ZpbGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICBTb3VyY2UgRmlsZXMKICAgICAgPGEgY2xhc3M9IlVuaXRGaWxlcy1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLXNvdXJjZWZpbGVzIiBhcmlhLWxhYmVsPSJHbyB0byBTb3VyY2UgRmlsZXMiPsK2PC9hPgogICAgPC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRGaWxlcy10aXRsZUxpbmsiPgogICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby90cmVlL3YwLjMuMTYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5WaWV3IGFsbCBTb3VyY2UgZmlsZXM8L2E+CiAgICA8L2Rpdj4KICAgIDxkaXY+CiAgICAgIDx1bCBjbGFzcz0iVW5pdEZpbGVzLWZpbGVMaXN0Ij48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9kb2MuZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iZG9jLmdvIj5kb2MuZ288L2E+CiAgICAgICAgICA8L2xpPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21hcC5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJtYXAuZ28iPm1hcC5nbzwvYT4KICAgICAgICAgIDwvbGk+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0ibWVyZ2UuZ28iPm1lcmdlLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnby5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJtZXJnby5nbyI+bWVyZ28uZ288L2E+CiAgICAgICAgICA8L2xpPjwvdWw+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgICAgIAogICAgICAKICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgaWQ9InNob3dJbnRlcm5hbC1kZXNjcmlwdGlvbiIgaGlkZGVuPiBDbGljayB0byBzaG93IGludGVybmFsIGRpcmVjdG9yaWVzLiA8L2Rpdj4KICA8ZGl2IGlkPSJoaWRlSW50ZXJuYWwtZGVzY3JpcHRpb24iIGhpZGRlbj4gQ2xpY2sgdG8gaGlkZSBpbnRlcm5hbCBkaXJlY3Rvcmllcy4gPC9kaXY+CjwvYXJ0aWNsZT4KICAgIDxmb290ZXIgY2xhc3M9ImdvLU1haW4tZm9vdGVyIj48L2Zvb3Rlcj4KICA8L21haW4+CgogICAgCiAgPGZvb3RlciBjbGFzcz0iZ28tRm9vdGVyIj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtzIj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFdoeSBHbwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVXNlIENhc2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyNjYXNlLXN0dWRpZXMiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDYXNlIFN0dWRpZXMKICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Gb290ZXItbGlua0NvbHVtbiI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9sZWFybi5nby5kZXYvIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsgZ28tRm9vdGVyLWxpbmstLXByaW1hcnkiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR2V0IFN0YXJ0ZWQKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wbGF5LmdvbGFuZy5vcmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBQbGF5Z3JvdW5kCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdG91ci5nb2xhbmcub3JnIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVG91cgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvZ28/dGFiPU5ld2VzdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFN0YWNrIE92ZXJmbG93CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBIZWxwCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldiIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9zdGQiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdGFuZGFyZCBMaWJyYXJ5CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9nb2xhbmcub3JnL3giIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdWItcmVwb3NpdG9yaWVzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldi9hYm91dCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEFib3V0IEdvIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3Byb2plY3QiIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBBYm91dAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kbC8iIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+RG93bmxvYWQ8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5CbG9nPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vaXNzdWVzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgSXNzdWUgVHJhY2tlcgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZGV2ZWwvcmVsZWFzZS5odG1sIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2Jsb2cuZ29sYW5nLm9yZy9nby1icmFuZCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEJyYW5kIEd1aWRlbGluZXMKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29uZHVjdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIENvZGUgb2YgQ29uZHVjdAogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50d2l0dGVyLmNvbS9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDb25uZWN0CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFR3aXR0ZXIKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5HaXRIdWI8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTbGFjawogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3JlZGRpdC5jb20vci9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICByL2dvbGFuZwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIE1lZXR1cAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvbGFuZ3dlZWtseS5jb20vIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR29sYW5nIFdlZWtseQogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1ib3R0b20iPgogICAgICA8aW1nIGNsYXNzPSJnby1Gb290ZXItZ29waGVyIiAgd2lkdGg9IjE0MzEiIGhlaWdodD0iOTAxIgogICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9nb3BoZXIvcGlsb3QtYnVzdC0xNDMxeDkwMS5zdmciIGFsdD0iR29waGVyIGluIGZsaWdodCBnb2dnbGVzIj4KICAgICAgPHVsIGNsYXNzPSJnby1Gb290ZXItbGlzdFJvdyI+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29weXJpZ2h0IiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5Db3B5cmlnaHQ8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90b3MiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPlRlcm1zIG9mIFNlcnZpY2U8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20vaW50bC9lbi9wb2xpY2llcy9wcml2YWN5LyIgZGF0YS1ndG1jPSJmb290ZXIgbGluayIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICAgIFByaXZhY3kgUG9saWN5CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zL3BrZ3NpdGUtZmVlZGJhY2siIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIgogICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgICBSZXBvcnQgYW4gSXNzdWUKICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iZ28tRm9vdGVyLWxpc3RJdGVtIj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLXRvZ2dsZVRoZW1lIGpzLXRvZ2dsZVRoZW1lIiBhcmlhLWxhYmVsPSJUaGVtZSBUb2dnbGUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImF1dG8iIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzZfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJTeXN0ZW0gdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImRhcmsiIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzJfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJEYXJrIHRoZW1lIj4KICAgICAgICAgICAgPGltZyBkYXRhLXZhbHVlPSJsaWdodCIgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xpZ2h0X21vZGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJMaWdodCB0aGVtZSI+CiAgICAgICAgICAgIDxwPiBUaGVtZSBUb2dnbGUgPC9wPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS10ZXh0IGdvLUZvb3Rlci1rZXlib2FyZCBqcy1vcGVuU2hvcnRjdXRzIiBhcmlhLWxhYmVsPSJTaG9yY3V0cyBNb2RhbCI+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2tleWJvYXJkX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgPHA+IFNob3J0Y3V0cyBNb2RhbCA8L3A+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgICA8YSBjbGFzcz0iZ28tRm9vdGVyLWdvb2dsZUxvZ28iIGhyZWY9Imh0dHBzOi8vZ29vZ2xlLmNvbSIgdGFyZ2V0PSJfYmxhbmsicmVsPSJub29wZW5lciIKICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgIDxpbWcgY2xhc3M9ImdvLUZvb3Rlci1nb29nbGVMb2dvSW1nIiBoZWlnaHQ9IjI0IiB3aWR0aD0iNzIiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nb29nbGUtd2hpdGUuc3ZnIiBhbHQ9Ikdvb2dsZSBsb2dvIj4KICAgICAgPC9hPgogICAgPC9kaXY+CiAgPC9mb290ZXI+CgogICAgCiAgPGRpYWxvZyBpZD0ianVtcC10by1tb2RhbCIgY2xhc3M9Ikp1bXBEaWFsb2cgZ28tTW9kYWwgZ28tTW9kYWwtLW1kIGpzLW1vZGFsIj4KICAgIDxmb3JtIG1ldGhvZD0iZGlhbG9nIiBkYXRhLWdtdGM9Imp1bXAgdG8gZm9ybSIgYXJpYS1sYWJlbD0iSnVtcCB0byBJZGVudGlmaWVyIj4KICAgICAgPGRpdiBjbGFzcz0iRGlhbG9nLXRpdGxlIGdvLU1vZGFsLWhlYWRlciI+CiAgICAgICAgPGgyPkp1bXAgdG88L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctZmlsdGVyIj4KICAgICAgICA8aW5wdXQgY2xhc3M9Ikp1bXBEaWFsb2ctaW5wdXQgZ28tSW5wdXQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB0eXBlPSJ0ZXh0Ij4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctYm9keSBnby1Nb2RhbC1ib2R5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJKdW1wRGlhbG9nLWxpc3QiPjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tTW9kYWwtYWN0aW9ucyI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ28tQnV0dG9uIiBkYXRhLXRlc3QtaWQ9ImNsb3NlLWRpYWxvZyI+Q2xvc2U8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CiAgPC9kaWFsb2c+CgogIDxkaWFsb2cgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZyBnby1Nb2RhbCBnby1Nb2RhbC0tc20ganMtbW9kYWwiPgogICAgPGZvcm0gbWV0aG9kPSJkaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJnby1Nb2RhbC1oZWFkZXIiPgogICAgICAgIDxoMj5LZXlib2FyZCBzaG9ydGN1dHM8L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWJvZHkiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4/PC9zdHJvbmc+PC90ZD48dGQ+IDogVGhpcyBtZW51PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4vPC9zdHJvbmc+PC90ZD48dGQ+IDogU2VhcmNoIHNpdGU8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJTaG9ydGN1dHNEaWFsb2cta2V5Ij4KICAgICAgICAgICAgICA8c3Ryb25nPmY8L3N0cm9uZz4gb3IgPHN0cm9uZz5GPC9zdHJvbmc+PC90ZD48dGQ+IDogSnVtcCB0bzwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZy1rZXkiPjxzdHJvbmc+eTwvc3Ryb25nPiBvciA8c3Ryb25nPlk8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgIDx0ZD4gOiBDYW5vbmljYWwgVVJMPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWFjdGlvbnMiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiIgZGF0YS10ZXN0LWlkPSJjbG9zZS1kaWFsb2ciPkNsb3NlPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogIDwvZGlhbG9nPgoKICAgIAogICAgICA8c2VjdGlvbiBjbGFzcz0iQ29va2llLW5vdGljZSBqcy1jb29raWVOb3RpY2UiPgogICAgICAgIDxkaXY+Z28uZGV2IHVzZXMgY29va2llcyBmcm9tIEdvb2dsZSB0byBkZWxpdmVyIGFuZCBlbmhhbmNlIHRoZSBxdWFsaXR5IG9mIGl0cyBzZXJ2aWNlcyBhbmQgdG8KICAgICAgICBhbmFseXplIHRyYWZmaWMuIDxhIHRhcmdldD1fYmxhbmsgaHJlZj0iaHR0cHM6Ly9wb2xpY2llcy5nb29nbGUuY29tL3RlY2hub2xvZ2llcy9jb29raWVzIj5MZWFybiBtb3JlLjwvYT48L2Rpdj4KICAgICAgICA8ZGl2PjxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiI+T2theTwvYnV0dG9uPjwvZGl2PgogICAgICA8L3NlY3Rpb24+CiAgICAKICAgIAogICAgICA8c2NyaXB0PgogICAgICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBpZiB0aGUgcXVlcnlTZWxlY3RvciBjYW7igJl0IGZpbmQgdGhlIGVsZW1lbnQKICAgICAgICBjb25zdCBndG1JZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1ndG1JRCcpLmRhdGFzZXQuZ3RtaWQ7CiAgICAgICAgaWYgKCFndG1JZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb29nbGUgVGFnIE1hbmFnZXIgSUQgbm90IGZvdW5kJyk7CiAgICAgICAgfQogICAgICAgIGxvYWRTY3JpcHQoYGh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0ke2d0bUlkfWApOwogICAgICA8L3NjcmlwdD4KICAgICAgPG5vc2NyaXB0PgogICAgICAgIDxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1XOE1WUVhHIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+CiAgICAgICAgPC9pZnJhbWU+CiAgICAgIDwvbm9zY3JpcHQ+CiAgICAKICAgIAogIAogIDxkaXYgY2xhc3M9ImpzLWNhbm9uaWNhbFVSTFBhdGgiIGRhdGEtY2Fub25pY2FsLXVybC1wYXRoPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvQHYwLjMuMTYiIGhpZGRlbj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJqcy1wbGF5Z3JvdW5kVmFycyIgZGF0YS1tb2R1bGVwYXRoPSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIGRhdGEtdmVyc2lvbj0idjAuMy4xNiIgaGlkZGVuPjwvZGl2PgogIDxzY3JpcHQ+CiAgICBsb2FkU2NyaXB0KCcvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLmpzJykKICA8L3NjcmlwdD4KCiAgPHNjcmlwdD4KICAgIGxvYWRTY3JpcHQoJy9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0LmpzJykKICA8L3NjcmlwdD4KCiAgPC9ib2R5Pgo8L2h0bWw+Cg==
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.8.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1477785463796278230'
      X-Datadog-Parent-Id:
      - '2092556404821533834'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 19:53:09 GMT
      Expires:
      - Wed, 17 Jan 2024 22:53:09 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '2634'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.8","Time":"2019-10-03T07:39:17Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:02 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2425752813475863974'
      X-Datadog-Parent-Id:
      - '1453045556398701106'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:03 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.6.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1551955167855718782'
      X-Datadog-Parent-Id:
      - '2833052622351154070'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:09:02 GMT
      Expires:
      - Wed, 17 Jan 2024 21:09:02 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '8881'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.6","Time":"2018-07-30T21:26:40Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '935815237018528210'
      X-Datadog-Parent-Id:
      - '4539919723798233686'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:03 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.4.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '765929079925645828'
      X-Datadog-Parent-Id:
      - '396060370442481427'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 17:40:44 GMT
      Expires:
      - Wed, 17 Jan 2024 20:40:44 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '10579'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.4","Time":"2018-04-04T21:29:33Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1637639856957207991'
      X-Datadog-Parent-Id:
      - '2374318174978232051'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:03 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2836474056811702959'
      X-Datadog-Parent-Id:
      - '2970037000252085907'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:52:49 GMT
      Expires:
      - Wed, 17 Jan 2024 21:52:49 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '6254'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2022728881597418486'
      X-Datadog-Parent-Id:
      - '105077214158300403'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:03 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.7.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1632023767920388558'
      X-Datadog-Parent-Id:
      - '1662087801967969349'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:55:33 GMT
      Expires:
      - Wed, 17 Jan 2024 21:55:33 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '6090'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.7","Time":"2019-01-23T23:28:27Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1051528181104185539'
      X-Datadog-Parent-Id:
      - '3159978575026977657'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:03 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.5.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1969703868451621041'
      X-Datadog-Parent-Id:
      - '2483060976499899808'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 17:45:00 GMT
      Expires:
      - Wed, 17 Jan 2024 20:45:00 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '10323'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.5","Time":"2018-06-08T14:01:56Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2012674672361067069'
      X-Datadog-Parent-Id:
      - '1366972302138038247'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:03 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.13.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4386611060292094917'
      X-Datadog-Parent-Id:
      - '2269677445648226319'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '51'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 19:33:46 GMT
      Expires:
      - Wed, 17 Jan 2024 22:33:46 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '3798'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.13","Time":"2022-05-25T20:08:08Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:03 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3863353823314233569'
      X-Datadog-Parent-Id:
      - '3165080395200924103'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:04 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGRhdGEtbGF5b3V0PSJyZXNwb25zaXZlIiBkYXRhLWxvY2FsPSIiPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB3aW5kb3cuX19lcnI9ZnVuY3Rpb24gZihlKXtmLnA9Zi5wfHxbXTtmLnAucHVzaChlKX0pOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0PgogICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5jb29raWUubWF0Y2goL3ByZWZlcnMtY29sb3Itc2NoZW1lPShsaWdodHxkYXJrfGF1dG8pLyk/LlsxXQogICAgICAgIGlmICh0aGVtZSkgewogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLnNldEF0dHJpYnV0ZSgnZGF0YS10aGVtZScsIHRoZW1lKTsKICAgICAgICB9CiAgICAgIH0oKSkKICAgIDwvc2NyaXB0PgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDxtZXRhIG5hbWU9IkRlc2NyaXB0aW9uIiBjb250ZW50PSJBIGhlbHBlciB0byBtZXJnZSBzdHJ1Y3RzIGFuZCBtYXBzIGluIEdvbGFuZy4iPgogICAgCiAgICA8bWV0YSBjbGFzcz0ianMtZ3RtSUQiIGRhdGEtZ3RtaWQ9IkdUTS1XOE1WUVhHIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9zaGFyZWQvaWNvbi9mYXZpY29uLmljbyI+CiAgICAKICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3BrZy5nby5kZXYvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIj4KICAKCiAgICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL2Zyb250ZW5kLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LThqZiIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIAogICAgPGxpbmsgcmVsPSJzZWFyY2giIHR5cGU9ImFwcGxpY2F0aW9uL29wZW5zZWFyY2hkZXNjcmlwdGlvbit4bWwiIGhyZWY9Ii9vcGVuc2VhcmNoLnhtbCIgdGl0bGU9IkdvIFBhY2thZ2VzIj4KICAgIAogICAgCiAgPHRpdGxlPm1lcmdvIHBhY2thZ2UgLSBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28gLSBHbyBQYWNrYWdlczwvdGl0bGU+CgogICAgCiAgPGxpbmsgaHJlZj0iL3N0YXRpYy9mcm9udGVuZC91bml0L3VuaXQubWluLmNzcz92ZXJzaW9uPXByb2QtZnJvbnRlbmQtMDAwNzktOGpmIiByZWw9InN0eWxlc2hlZXQiPgogIAogIDxsaW5rIGhyZWY9Ii9zdGF0aWMvZnJvbnRlbmQvdW5pdC9tYWluL21haW4ubWluLmNzcz92ZXJzaW9uPXByb2QtZnJvbnRlbmQtMDAwNzktOGpmIiByZWw9InN0eWxlc2hlZXQiPgoKCiAgPC9oZWFkPgogIDxib2R5PgogICAgCiAgICA8c2NyaXB0PgogICAgICBmdW5jdGlvbiBsb2FkU2NyaXB0KHNyYywgbW9kID0gdHJ1ZSkgewogICAgICAgIGxldCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICAgICAgcy5zcmMgPSBzcmM7CiAgICAgICAgaWYgKG1vZCkgewogICAgICAgICAgcy50eXBlID0gJ21vZHVsZSc7CiAgICAgICAgICBzLmFzeW5jID0gdHJ1ZTsKICAgICAgICAgIHMuZGVmZXIgPSB0cnVlCiAgICAgICAgfQogICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocyk7CiAgICAgIH0KICAgICAgbG9hZFNjcmlwdCgiL3RoaXJkX3BhcnR5L2RpYWxvZy1wb2x5ZmlsbC9kaWFsb2ctcG9seWZpbGwuanMiLCBmYWxzZSkKICAgICAgbG9hZFNjcmlwdCgiL3N0YXRpYy9mcm9udGVuZC9mcm9udGVuZC5qcyIpOwogICAgPC9zY3JpcHQ+CiAgICAKICA8aGVhZGVyIGNsYXNzPSJnby1IZWFkZXIgZ28tSGVhZGVyLS1mdWxsIGpzLXNpdGVIZWFkZXIiPgogICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLWlubmVyIGdvLUhlYWRlci1pbm5lci0tZGFyayI+CiAgICAgIDxuYXYgY2xhc3M9ImdvLUhlYWRlci1uYXYiPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2LyIgY2xhc3M9ImpzLWhlYWRlckxvZ28iIGRhdGEtZ3RtYz0ibmF2IGxpbmsiCiAgICAgICAgICAgIGRhdGEtdGVzdC1pZD0iZ28taGVhZGVyLWxvZ28tbGluayIgcm9sZT0iaGVhZGluZyIgYXJpYS1sZXZlbD0iMSI+CiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1IZWFkZXItbG9nbyIgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL2dvLXdoaXRlLnN2ZyIgYWx0PSJHbyI+CiAgICAgICAgPC9hPgogICAgICAgICA8ZGl2IGNsYXNzPSJza2lwLW5hdmlnYXRpb24td3JhcHBlciI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJza2lwLXRvLWNvbnRlbnQtbGluayIgYXJpYS1sYWJlbD0iU2tpcCB0byBtYWluIGNvbnRlbnQiIGhyZWY9IiNtYWluLWNvbnRlbnQiPiBTa2lwIHRvIE1haW4gQ29udGVudCA8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItcmlnaHRDb250ZW50Ij4KICAgICAgICAgIAo8ZGl2IGNsYXNzPSJnby1TZWFyY2hGb3JtIGpzLXNlYXJjaEZvcm0iPgogIDxmb3JtCiAgICBjbGFzcz0iZ28tSW5wdXRHcm91cCBnby1TaG9ydGN1dEtleSBnby1TZWFyY2hGb3JtLWZvcm0iCiAgICBhY3Rpb249Ii9zZWFyY2giCiAgICBkYXRhLXNob3J0Y3V0PSIvIgogICAgZGF0YS1zaG9ydGN1dC1hbHQ9InNlYXJjaCIKICAgIGRhdGEtZ3RtYz0ic2VhcmNoIGZvcm0iCiAgICBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIKICAgIHJvbGU9InNlYXJjaCIKICA+CiAgICA8aW5wdXQgbmFtZT0icSIgY2xhc3M9ImdvLUlucHV0IGpzLXNlYXJjaEZvY3VzIiBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIgdHlwZT0ic2VhcmNoIgogICAgICAgIGF1dG9jYXBpdGFsaXplPSJvZmYiIGF1dG9jb21wbGV0ZT0ib2ZmIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIKICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIHBhY2thZ2VzIG9yIHN5bWJvbHMiCiAgICAgICAgdmFsdWU9IiIgLz4KICAgIDxpbnB1dCBuYW1lPSJtIiB2YWx1ZT0iIiBoaWRkZW4+CiAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbnZlcnRlZCIgYXJpYS1sYWJlbD0iU3VibWl0IHNlYXJjaCI+CiAgICAgIDxpbWcKICAgICAgICBjbGFzcz0iZ28tSWNvbiIKICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgIHdpZHRoPSIyNCIKICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vc2VhcmNoX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgYWx0PSIiCiAgICAgIC8+CiAgICA8L2J1dHRvbj4KICA8L2Zvcm0+CiAgPGJ1dHRvbiBjbGFzcz0iZ28tU2VhcmNoRm9ybS1leHBhbmRTZWFyY2gganMtZXhwYW5kU2VhcmNoIiBkYXRhLWd0bWM9Im5hdiBidXR0b24iCiAgICAgIGFyaWEtbGFiZWw9Ik9wZW4gc2VhcmNoIiBkYXRhLXRlc3QtaWQ9ImV4cGFuZC1zZWFyY2giPgogICAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9zZWFyY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgoKICA8L2J1dHRvbj4KPC9kaXY+CgogICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItbWVudSI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYXJyb3dfZHJvcF9kb3duX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0ic3VibWVudSBkcm9wZG93biBpY29uIj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItc3VibWVudSBnby1IZWFkZXItc3VibWVudS0td2h5IGpzLWRlc2t0b3Atc3VibWVudS1ob3ZlciIgYXJpYS1sYWJlbD0ic3VibWVudSI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI2Nhc2Utc3R1ZGllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5DYXNlIFN0dWRpZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHA+Q29tbW9uIHByb2JsZW1zIGNvbXBhbmllcyBzb2x2ZSB3aXRoIEdvPC9wPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyN1c2UtY2FzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+VXNlIENhc2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxwPlN0b3JpZXMgYWJvdXQgaG93IGFuZCB3aHkgY29tcGFuaWVzIHVzZSBHbzwvcD4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlNlY3VyaXR5IFBvbGljeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8cD5Ib3cgR28gY2FuIGhlbHAga2VlcCB5b3Ugc2VjdXJlIGJ5IGRlZmF1bHQ8L3A+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyIgZGF0YS1ndG1jPSJuYXYgbGluayI+TGVhcm48L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Fycm93X2Ryb3BfZG93bl9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9InN1Ym1lbnUgZHJvcGRvd24gaWNvbiI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnUgZ28tSGVhZGVyLXN1Ym1lbnUtLWRvY3MganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZWZmZWN0aXZlX2dvIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVmZmVjdGl2ZSBHbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5UaXBzIGZvciB3cml0aW5nIGNsZWFyLCBwZXJmb3JtYW50LCBhbmQgaWRpb21hdGljIEdvIGNvZGU8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R28gVXNlciBNYW51YWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+QSBjb21wbGV0ZSBpbnRyb2R1Y3Rpb24gdG8gYnVpbGRpbmcgc29mdHdhcmUgd2l0aCBHbzwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L3N0ZCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdGFuZGFyZCBsaWJyYXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPlJlZmVyZW5jZSBkb2N1bWVudGF0aW9uIGZvciBHbydzIHN0YW5kYXJkIGxpYnJhcnk8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9kZXZlbC9yZWxlYXNlIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlbGVhc2UgTm90ZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TGVhcm4gd2hhdCdzIG5ldyBpbiBlYWNoIEdvIHJlbGVhc2U8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIGdvLUhlYWRlci1tZW51SXRlbS0tYWN0aXZlIj4KICAgICAgICAgICAgICA8YSBocmVmPSIvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj5QYWNrYWdlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJqcy1kZXNrdG9wLW1lbnUtaG92ZXIiIGhyZWY9IiMiIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPgogICAgICAgICAgICAgICAgQ29tbXVuaXR5CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hcnJvd19kcm9wX2Rvd25fZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJzdWJtZW51IGRyb3Bkb3duIGljb24iPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51IGdvLUhlYWRlci1zdWJtZW51LS1jb21tdW5pdHkganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90YWxrcy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjb3JkZWQgVGFsa3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VmlkZW9zIGZyb20gcHJpb3IgZXZlbnRzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NZWV0dXBzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TWVldCBvdGhlciBsb2NhbCBHbyBkZXZlbG9wZXJzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL3dpa2kvQ29uZmVyZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29uZmVyZW5jZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5MZWFybiBhbmQgbmV0d29yayB3aXRoIEdvIGRldmVsb3BlcnMgZnJvbSBhcm91bmQgdGhlIHdvcmxkPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9ibG9nIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvIGJsb2c8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VGhlIEdvIHByb2plY3QncyBvZmZpY2lhbCBibG9nLjwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HbyBwcm9qZWN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPkdldCBoZWxwIGFuZCBzdGF5IGluZm9ybWVkIGZyb20gR288L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIEdldCBjb25uZWN0ZWQKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgYXJpYS1sYWJlbD0iR2V0IGNvbm5lY3RlZCB3aXRoIGdvb2dsZS1ncm91cHMgKE9wZW5zIGluIG5ldyB3aW5kb3cpIiBocmVmPSJodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvZ29sYW5nLW51dHMiID48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ29vZ2xlLWdyb3Vwcy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggZ2l0aHViIChPcGVucyBpbiBuZXcgd2luZG93KSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL2dpdGh1Yi5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggdHdpdHRlciAoT3BlbnMgaW4gbmV3IHdpbmRvdykiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvdHdpdHRlci5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggcmVkZGl0IChPcGVucyBpbiBuZXcgd2luZG93KSIgaHJlZj0iaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2dvbGFuZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9yZWRkaXQuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgYXJpYS1sYWJlbD0iR2V0IGNvbm5lY3RlZCB3aXRoIHNsYWNrIChPcGVucyBpbiBuZXcgd2luZG93KSIgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zbGFjay5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBhcmlhLWxhYmVsPSJHZXQgY29ubmVjdGVkIHdpdGggc3RhY2stb3ZlcmZsb3cgKE9wZW5zIGluIG5ldyB3aW5kb3cpIiBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2NvbGxlY3RpdmVzL2dvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvc3RhY2stb3ZlcmZsb3cuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ28tSGVhZGVyLW5hdk9wZW4ganMtaGVhZGVyTWVudUJ1dHRvbiBnby1IZWFkZXItbmF2T3Blbi0td2hpdGUiIGRhdGEtZ3RtYz0ibmF2IGJ1dHRvbiIgYXJpYS1sYWJlbD0iT3BlbiBuYXZpZ2F0aW9uIj4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICA8L25hdj4KICAgIDwvZGl2PgogIDwvaGVhZGVyPgogIDxhc2lkZSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBqcy1oZWFkZXIiPgogICAgPG5hdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvIj4KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbG9nbyIgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL2dvLWJsdWUuc3ZnIiBhbHQ9IkdvLiI+CiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPHVsIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3QiPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGpzLW1vYmlsZS1zdWJuYXYtdHJpZ2dlciBnby1OYXZpZ2F0aW9uRHJhd2VyLWhhc1N1Ym5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxzcGFuPldoeSBHbzwvc3Bhbj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfbmV4dF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbmF2Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX2JlZm9yZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgICBXaHkgR28KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI2Nhc2Utc3R1ZGllcyI+CiAgICAgICAgICAgICAgICAgICAgICBDYXNlIFN0dWRpZXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI3VzZS1jYXNlcyI+CiAgICAgICAgICAgICAgICAgICAgICBVc2UgQ2FzZXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc2VjdXJpdHkvcG9saWN5LyI+CiAgICAgICAgICAgICAgICAgICAgICBTZWN1cml0eSBQb2xpY3kKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9sZWFybi8iPkxlYXJuPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSBqcy1tb2JpbGUtc3VibmF2LXRyaWdnZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1oYXNTdWJuYXYiPgogICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICA8c3Bhbj5Eb2NzPC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9iZWZvcmVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICBEb2NzCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3QiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9lZmZlY3RpdmVfZ28iPgogICAgICAgICAgICAgICAgICAgICAgRWZmZWN0aXZlIEdvCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy8iPgogICAgICAgICAgICAgICAgICAgICAgR28gVXNlciBNYW51YWwKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L3N0ZCI+CiAgICAgICAgICAgICAgICAgICAgICBTdGFuZGFyZCBsaWJyYXJ5CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9kZXZlbC9yZWxlYXNlIj4KICAgICAgICAgICAgICAgICAgICAgIFJlbGVhc2UgTm90ZXMKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0gZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbS0tYWN0aXZlIj4KICAgICAgICAgICAgPGEgaHJlZj0iLyI+UGFja2FnZXM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGpzLW1vYmlsZS1zdWJuYXYtdHJpZ2dlciBnby1OYXZpZ2F0aW9uRHJhd2VyLWhhc1N1Ym5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxzcGFuPkNvbW11bml0eTwvc3Bhbj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfbmV4dF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfYmVmb3JlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgQ29tbXVuaXR5CiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3QiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3RhbGtzLyI+CiAgICAgICAgICAgICAgICAgICAgICBSZWNvcmRlZCBUYWxrcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyI+CiAgICAgICAgICAgICAgICAgICAgICBNZWV0dXBzCiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9sYXVuY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL3dpa2kvQ29uZmVyZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgQ29uZmVyZW5jZXMKICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2Jsb2ciPgogICAgICAgICAgICAgICAgICAgICAgR28gYmxvZwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9oZWxwIj4KICAgICAgICAgICAgICAgICAgICAgIEdvIHByb2plY3QKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj5HZXQgY29ubmVjdGVkPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvZ29sYW5nLW51dHMiPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9nb29nbGUtZ3JvdXBzLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL2dpdGh1Yi5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvdHdpdHRlci5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vd3d3LnJlZGRpdC5jb20vci9nb2xhbmcvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvcmVkZGl0LnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zbGFjay5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vY29sbGVjdGl2ZXMvZ28iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zdGFjay1vdmVyZmxvdy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgPC9uYXY+CiAgPC9hc2lkZT4KICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLXNjcmltIGpzLXNjcmltIiByb2xlPSJwcmVzZW50YXRpb24iPjwvZGl2PgoKICAgIAogIDxtYWluIGNsYXNzPSJnby1NYWluIiBpZD0ibWFpbi1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9ImdvLU1haW4tYmFubmVyIiByb2xlPSJhbGVydCI+PC9kaXY+CiAgICA8aGVhZGVyIGNsYXNzPSJnby1NYWluLWhlYWRlciBqcy1tYWluSGVhZGVyIj4KICAKICAKICA8bmF2IGNsYXNzPSJnby1NYWluLWhlYWRlckJyZWFkY3J1bWIgZ28tQnJlYWRjcnVtYiIgYXJpYS1sYWJlbD0iQnJlYWRjcnVtYiIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWJyZWFkY3J1bWIiPgogICAgPG9sPgogICAgICAKICAgICAgICAKICAgICAgICAgIDxsaSBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYkl0ZW0iPgogICAgICAgICAgICA8YSBocmVmPSIvIiBkYXRhLWd0bWM9ImJyZWFkY3J1bWIgbGluayI+RGlzY292ZXIgUGFja2FnZXM8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ29AdjAuMy4xNiIgZGF0YS1ndG1jPSJicmVhZGNydW1iIGxpbmsiIGFyaWEtY3VycmVudD0ibG9jYXRpb24iCiAgICAgICAgICAgICAgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWJyZWFkY3J1bWJDdXJyZW50Ij4KICAgICAgICAgICAgZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvCiAgICAgICAgICA8L2E+CiAgICAgICAgICAKICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUgZ28tQ2xpcGJvYXJkIGpzLWNsaXBib2FyZCIKICAgICAgICAgICAgICB0aXRsZT0iQ29weSBwYXRoIHRvIGNsaXBib2FyZC4mIzEwOyYjMTA7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIgogICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNvcHkgUGF0aCB0byBDbGlwYm9hcmQiCiAgICAgICAgICAgICAgZGF0YS10by1jb3B5PSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICAgICAgZGF0YS1ndG1jPSJicmVhZGNydW1icyBidXR0b24iCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCIKICAgICAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY29udGVudF9jb3B5X2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgCiAgICAgICAgCiAgICAgIDwvbGk+CiAgICA8L29sPgogIDwvbmF2PgoKICA8ZGl2IGNsYXNzPSJnby1NYWluLWhlYWRlckNvbnRlbnQiPgogICAgCiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJUaXRsZSBqcy1zdGlja3lIZWFkZXIiPgogICAgPGEgY2xhc3M9ImdvLU1haW4taGVhZGVyTG9nbyIgaHJlZj0iaHR0cHM6Ly9nby5kZXYvIiBhcmlhLWhpZGRlbj0idHJ1ZSIgdGFiaW5kZXg9Ii0xIiBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIiBhcmlhLWxhYmVsPSJMaW5rIHRvIEdvIEhvbWVwYWdlIj4KICAgICAgPGltZyBoZWlnaHQ9Ijc4IiB3aWR0aD0iMjA3IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vZ28tYmx1ZS5zdmciIGFsdD0iR28iPgogICAgPC9hPgogICAgPGgxIGNsYXNzPSJVbml0SGVhZGVyLXRpdGxlSGVhZGluZyIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLXRpdGxlIj5tZXJnbzwvaDE+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0taW52ZXJ0ZWQiPnBhY2thZ2U8L3NwYW4+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0taW52ZXJ0ZWQiPm1vZHVsZTwvc3Bhbj4KICAgIAogICAgCiAgICAgIAogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUgZ28tQ2xpcGJvYXJkIGpzLWNsaXBib2FyZCIKICAgICAgICAgIHRpdGxlPSJDb3B5IHBhdGggdG8gY2xpcGJvYXJkLiYjMTA7JiMxMDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICBhcmlhLWxhYmVsPSJDb3B5IFBhdGggdG8gQ2xpcGJvYXJkIgogICAgICAgICAgZGF0YS10by1jb3B5PSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICBkYXRhLWd0bWM9InRpdGxlIGJ1dHRvbiIKICAgICAgICAgIHRhYmluZGV4PSItMSIKICAgICAgICA+CiAgICAgICAgICA8aW1nCiAgICAgICAgICAgIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkIgogICAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb250ZW50X2NvcHlfZ21fZ3JleV8yNGRwLnN2ZyIKICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAvPgogICAgICAgIDwvYnV0dG9uPgogICAgICAKICAgIAogIDwvZGl2PgoKICAgIAogIDxkaXYgY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlscyI+CiAgICAKICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLXZlcnNpb24iPgogICAgPGEgaHJlZj0iP3RhYj12ZXJzaW9ucyIgYXJpYS1sYWJlbD0iVmVyc2lvbjogdjAuMy4xNiIgCiAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIiBhcmlhLWRlc2NyaWJlZGJ5PSJ2ZXJzaW9uLWRlc2NyaXB0aW9uIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiIGFyaWEtaGlkZGVuPSJ0cnVlIj5WZXJzaW9uOiA8L3NwYW4+CiAgICAgICAgdjAuMy4xNgogICAgPC9hPgogICAgPGRpdiBjbGFzcz0ic2NyZWVuLXJlYWRlci1vbmx5IiBpZD0idmVyc2lvbi1kZXNjcmlwdGlvbiIgaGlkZGVuPgogICAgICBPcGVucyBhIG5ldyB3aW5kb3cgd2l0aCBsaXN0IG9mIHZlcnNpb25zIGluIHRoaXMgbW9kdWxlLgogICAgPC9kaXY+CiAgICAKICAgIDxzcGFuIGNsYXNzPSJEZXRhaWxzSGVhZGVyLWJhZGdlLS1sYXRlc3QiIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1taW5vclZlcnNpb25CYW5uZXIiPgogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBEZXRhaWxzSGVhZGVyLXNwYW4tLWxhdGVzdCI+TGF0ZXN0PC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBEZXRhaWxzSGVhZGVyLXNwYW4tLW5vdEF0TGF0ZXN0Ij4KICAgICAgICBMYXRlc3QKICAgICAgICAKICA8ZGV0YWlscyBjbGFzcz0iZ28tVG9vbHRpcCBqcy10b29sdGlwIiBkYXRhLWd0bWM9InRvb2x0aXAiPgogICAgPHN1bW1hcnk+CiAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2FsZXJ0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iV2FybmluZyI+CiAgICA8L3N1bW1hcnk+CiAgICA8cD5UaGlzIHBhY2thZ2UgaXMgbm90IGluIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBpdHMgbW9kdWxlLjwvcD4KICA8L2RldGFpbHM+CgogICAgICA8L3NwYW4+CiAgICAgIDxhIGhyZWY9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIGFyaWEtbGFiZWw9IkdvIHRvIExhdGVzdCBWZXJzaW9uIiBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1hbGVydCBEZXRhaWxzSGVhZGVyLXNwYW4tLWdvVG9MYXRlc3QiPkdvIHRvIGxhdGVzdDwvc3Bhbj4KICAgICAgPC9hPgogICAgPC9zcGFuPgogIDwvc3Bhbj4KCiAgICAgIAogIDxzcGFuIGNsYXNzPSJnby1NYWluLWhlYWRlckRldGFpbEl0ZW0iIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1jb21taXRUaW1lIj4KICAgIFB1Ymxpc2hlZDogQXByICAyLCAyMDIzCiAgPC9zcGFuPgoKICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWxpY2Vuc2VzIj4KICAgIExpY2Vuc2U6IDxhIGhyZWY9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28/dGFiPWxpY2Vuc2VzIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItbGljZW5zZSIgCiAgICAgICAgZGF0YS1ndG1jPSJoZWFkZXIgbGluayIgYXJpYS1kZXNjcmliZWRieT0ibGljZW5zZS1kZXNjcmlwdGlvbiI+QlNELTMtQ2xhdXNlPC9hPgogICAgICAKICAgIAogIDwvc3Bhbj4KICA8ZGl2IGNsYXNzPSJzY3JlZW4tcmVhZGVyLW9ubHkiIGlkPSJsaWNlbnNlLWRlc2NyaXB0aW9uIiBoaWRkZW4+CiAgICBPcGVucyBhIG5ldyB3aW5kb3cgd2l0aCBsaWNlbnNlIGluZm9ybWF0aW9uLgogIDwvZGl2PgoKICAgICAgCiAgICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWltcG9ydHMiPgogICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0cyIgYXJpYS1sYWJlbD0iSW1wb3J0czogNSIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIiBhcmlhLWRlc2NyaWJlZGJ5PSJpbXBvcnRzLWRlc2NyaXB0aW9uIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPkltcG9ydHM6IDwvc3Bhbj41CiAgICA8L2E+CiAgPC9zcGFuPgogIDxkaXYgY2xhc3M9InNjcmVlbi1yZWFkZXItb25seSIgaWQ9ImltcG9ydHMtZGVzY3JpcHRpb24iIGhpZGRlbj4KICAgIE9wZW5zIGEgbmV3IHdpbmRvdyB3aXRoIGxpc3Qgb2YgaW1wb3J0cy4KICA8L2Rpdj4KCiAgICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWltcG9ydGVkYnkiPgogICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0ZWRieSIgYXJpYS1sYWJlbD0iSW1wb3J0ZWQgQnk6IDAiCiAgICAgICAgZGF0YS1ndG1jPSJoZWFkZXIgbGluayIgYXJpYS1kZXNjcmliZWRieT0iaW1wb3J0ZWRieS1kZXNjcmlwdGlvbiI+CiAgICAgICA8c3BhbiBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+SW1wb3J0ZWQgYnk6IDwvc3Bhbj4wCiAgICA8L2E+CiAgPC9zcGFuPgogIDxkaXYgY2xhc3M9InNjcmVlbi1yZWFkZXItb25seSIgaWQ9ImltcG9ydGVkYnktZGVzY3JpcHRpb24iIGhpZGRlbj4KICAgIE9wZW5zIGEgbmV3IHdpbmRvdyB3aXRoIGxpc3Qgb2Yga25vd24gaW1wb3J0ZXJzLgogIDwvZGl2PgoKICAgICAgCiAgICAKICA8L2Rpdj4KICAKICA8ZGl2IGNsYXNzPSJVbml0SGVhZGVyLW92ZXJmbG93Q29udGFpbmVyIj4KICAgIDxzdmcgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dJbWFnZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBoZWlnaHQ9IjI0IiB2aWV3Qm94PSIwIDAgMjQgMjQiIHdpZHRoPSIyNCI+CiAgICAgIDxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz4KICAgICAgPHBhdGggZD0iTTEyIDhjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem0wIDJjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yem0wIDZjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yeiIvPgogICAgPC9zdmc+CiAgICA8c2VsZWN0IGNsYXNzPSJVbml0SGVhZGVyLW92ZXJmbG93U2VsZWN0IGpzLXNlbGVjdE5hdiIgdGFiaW5kZXg9Ii0xIj4KICAgICAgPG9wdGlvbiB2YWx1ZT0iLyI+TWFpbjwvb3B0aW9uPgogICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj12ZXJzaW9ucyI+CiAgICAgICAgVmVyc2lvbnMKICAgICAgPC9vcHRpb24+CiAgICAgIDxvcHRpb24gdmFsdWU9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28/dGFiPWxpY2Vuc2VzIj4KICAgICAgICBMaWNlbnNlcwogICAgICA8L29wdGlvbj4KICAgICAgCiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0cyI+CiAgICAgICAgICBJbXBvcnRzCiAgICAgICAgPC9vcHRpb24+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0ZWRieSI+CiAgICAgICAgICBJbXBvcnRlZCBCeQogICAgICAgIDwvb3B0aW9uPgogICAgICAKICAgIDwvc2VsZWN0PgogIDwvZGl2PgoKCiAgPC9kaXY+Cgo8L2hlYWRlcj4KICAgIDxhc2lkZSBjbGFzcz0iZ28tTWFpbi1hc2lkZSAganMtbWFpbkFzaWRlIj4KICAKICA8ZGl2IGNsYXNzPSJVbml0TWV0YSI+CiAgICA8aDIgY2xhc3M9ImdvLXRleHRMYWJlbCI+RGV0YWlsczwvaDI+CiAgICAKICA8dWwgY2xhc3M9IlVuaXRNZXRhLWRldGFpbHMiPgogICAgPGxpPgogICAgICA8ZGV0YWlscyBjbGFzcz0iZ28tVG9vbHRpcCBqcy10b29sdGlwIiBkYXRhLWd0bWM9InRvb2x0aXAiPgogICAgICAgIDxzdW1tYXJ5IGNsYXNzPSJnby10ZXh0U3VidGxlIj4KICAgICAgICAgIAogIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQic3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NoZWNrX2NpcmNsZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9ImNoZWNrZWQiaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KCiAgICAgICAgICBWYWxpZCA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby90cmVlL3YwLjMuMTYvZ28ubW9kIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+Z28ubW9kPC9hPiBmaWxlCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+CiAgICAgICAgICBUaGUgR28gbW9kdWxlIHN5c3RlbSB3YXMgaW50cm9kdWNlZCBpbiBHbyAxLjExIGFuZCBpcyB0aGUgb2ZmaWNpYWwgZGVwZW5kZW5jeSBtYW5hZ2VtZW50CiAgICAgICAgICBzb2x1dGlvbiBmb3IgR28uCiAgICAgICAgPC9wPgogICAgICA8L2RldGFpbHM+CiAgICA8L2xpPgogICAgPGxpPgogICAgICA8ZGV0YWlscyBjbGFzcz0iZ28tVG9vbHRpcCBqcy10b29sdGlwIiBkYXRhLWd0bWM9InRvb2x0aXAiPgogICAgICAgIDxzdW1tYXJ5IGNsYXNzPSJnby10ZXh0U3VidGxlIj4KICAgICAgICAgIAogIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQic3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NoZWNrX2NpcmNsZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9ImNoZWNrZWQiaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KCiAgICAgICAgICBSZWRpc3RyaWJ1dGFibGUgbGljZW5zZQogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2hlbHBfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CiAgICAgICAgPC9zdW1tYXJ5PgogICAgICAgIDxwPgogICAgICAgICAgUmVkaXN0cmlidXRhYmxlIGxpY2Vuc2VzIHBsYWNlIG1pbmltYWwgcmVzdHJpY3Rpb25zIG9uIGhvdyBzb2Z0d2FyZSBjYW4gYmUgdXNlZCwKICAgICAgICAgIG1vZGlmaWVkLCBhbmQgcmVkaXN0cmlidXRlZC4KICAgICAgICA8L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFRhZ2dlZCB2ZXJzaW9uCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+TW9kdWxlcyB3aXRoIHRhZ2dlZCB2ZXJzaW9ucyBnaXZlIGltcG9ydGVycyBtb3JlIHByZWRpY3RhYmxlIGJ1aWxkcy48L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2FuY2VsX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0idW5jaGVja2VkImhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CgogICAgICAgICAgU3RhYmxlIHZlcnNpb24KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD5XaGVuIGEgcHJvamVjdCByZWFjaGVzIG1ham9yIHZlcnNpb24gdjEgaXQgaXMgY29uc2lkZXJlZCBzdGFibGUuPC9wPgogICAgICA8L2RldGFpbHM+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJVbml0TWV0YS1kZXRhaWxzTGVhcm4iPgogICAgICA8YSBocmVmPSIvYWJvdXQjYmVzdC1wcmFjdGljZXMiIGRhdGEtZ3RtYz0ibWV0YSBsaW5rIj5MZWFybiBtb3JlIGFib3V0IGJlc3QgcHJhY3RpY2VzPC9hPgogICAgPC9saT4KICA8L3VsPgoKICAgIDxoMiBjbGFzcz0iZ28tdGV4dExhYmVsIj5SZXBvc2l0b3J5PC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRNZXRhLXJlcG8iPgogICAgICAKICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIgdGl0bGU9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28KICAgICAgICA8L2E+CiAgICAgIAogICAgPC9kaXY+CiAgICAKICAgICAgPGgyIGNsYXNzPSJnby10ZXh0TGFiZWwiPkxpbmtzPC9oMj4KICAgICAgPHVsIGNsYXNzPSJVbml0TWV0YS1saW5rcyI+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGVwcy5kZXYvZ28vZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnby92MC4zLjE2IiB0aXRsZT0iVmlldyB0aGlzIG1vZHVsZSBvbiBPcGVuIFNvdXJjZSBJbnNpZ2h0cyIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgZGF0YS10ZXN0LWlkPSJtZXRhLWxpbmstZGVwc2RldiI+CiAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZGVwc2Rldi1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vZGVwc2Rldi1sb2dvLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iT3BlbiBTb3VyY2UgSW5zaWdodHMgTG9nbyIgLz4KICAgICAgICAgICAgICBPcGVuIFNvdXJjZSBJbnNpZ2h0cwogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIAogIAoKICAgICAgICAKICAKCiAgICAgICAgCiAgCgogICAgICA8L3VsPgogICAgCiAgPC9kaXY+Cgo8L2FzaWRlPgogICAgPG5hdiBjbGFzcz0iZ28tTWFpbi1uYXYgZ28tTWFpbi1uYXYtLXN0aWNreSBqcy1tYWluTmF2IiBhcmlhLWxhYmVsPSJPdXRsaW5lIj4KICA8ZGl2IGNsYXNzPSJnby1NYWluLW5hdkRlc2t0b3AiPgogICAgCiAgPGRpdiBjbGFzcz0iVW5pdE91dGxpbmUtanVtcFRvIj4KICAgIDxidXR0b24gY2xhc3M9IlVuaXRPdXRsaW5lLWp1bXBUb0lucHV0IGdvLVNob3J0Y3V0S2V5IGpzLWp1bXBUb0lucHV0IgogICAgICAgIGFyaWEtY29udHJvbHM9Imp1bXAtdG8tbW9kYWwiCiAgICAgICAgYXJpYS1sYWJlbD0iT3BlbiBKdW1wIHRvIElkZW50aWZpZXIiCiAgICAgICAgZGF0YS1zaG9ydGN1dD0iZiIKICAgICAgICBkYXRhLXNob3J0Y3V0LWFsdD0iZmluZCIKICAgICAgICBkYXRhLXRlc3QtaWQ9Imp1bXAtdG8tYnV0dG9uIiBkYXRhLWd0bWM9Im91dGxpbmUgYnV0dG9uIj4KICAgICAgSnVtcCB0byAuLi4KICAgIDwvYnV0dG9uPgogIDwvZGl2PgogIDx1bCBjbGFzcz0iZ28tVHJlZSBqcy10cmVlIiByb2xlPSJ0cmVlIiBhcmlhLWxhYmVsPSJPdXRsaW5lIj4KICAgIAogICAgICA8bGkgY2xhc3M9ImpzLXJlYWRtZU91dGxpbmUiPgogICAgICAgIDxhIGhyZWY9IiNzZWN0aW9uLXJlYWRtZSIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgUkVBRE1FCiAgICAgICAgPC9hPgogICAgICAgIAogIDx1bCBpZD0icmVhZG1lLW91dGxpbmUiPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLXN0YXR1cyIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIFN0YXR1cwogICAgICAgIDwvYT4KICAgICAgICAKICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1pbXBvcnRhbnQtbm90ZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgSW1wb3J0YW50IG5vdGUKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWRvbmF0aW9ucyIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgRG9uYXRpb25zCiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1tZXJnby1pbi10aGUtd2lsZCIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgTWVyZ28gaW4gdGhlIHdpbGQKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgCiAgICAgICAgICA8L3VsPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1pbnN0YWxsIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgSW5zdGFsbAogICAgICAgIDwvYT4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtdXNhZ2UiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBVc2FnZQogICAgICAgIDwvYT4KICAgICAgICAKICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS10cmFuc2Zvcm1lcnMiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgIFRyYW5zZm9ybWVycwogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvdWw+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWNvbnRhY3QtbWUiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBDb250YWN0IG1lCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1hYm91dCIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIEFib3V0CiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1saWNlbnNlIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgTGljZW5zZQogICAgICAgIDwvYT4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAgCiAgPC91bD4KCiAgICAgIDwvbGk+CiAgICAKICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tZG9jdW1lbnRhdGlvbiIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgRG9jdW1lbnRhdGlvbgogICAgICAgIDwvYT4KICAgICAgICAKPHVsPgogIAogICAgPGxpPgogICAgICA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3IiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPk92ZXJ2aWV3PC9hPgogICAgPC9saT4KICA8bGkgY2xhc3M9IkRvY05hdi1vdmVydmlldyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctaW5kZXgiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgSW5kZXgKICAgICAgPC9hPgogICAgICAKICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY05hdi1jb25zdGFudHMiPgogICAgICA8YSBocmVmPSIjcGtnLWNvbnN0YW50cyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBDb25zdGFudHMKICAgICAgPC9hPgogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LXZhcmlhYmxlcyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIFZhcmlhYmxlcwogICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtZnVuY3Rpb25zIj4KICAgICAgPGEgaHJlZj0iI3BrZy1mdW5jdGlvbnMiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgRnVuY3Rpb25zCiAgICAgIDwvYT4KICAgICAgCiAgICAgICAgPHVsPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjTWFwIiB0aXRsZT0iTWFwKGRzdCwgc3JjLCBvcHRzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIE1hcChkc3QsIHNyYywgb3B0cykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNYXBXaXRoT3ZlcndyaXRlIiB0aXRsZT0iTWFwV2l0aE92ZXJ3cml0ZShkc3QsIHNyYywgb3B0cykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI01lcmdlIiB0aXRsZT0iTWVyZ2UoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWVyZ2UoZHN0LCBzcmMsIG9wdHMpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjTWVyZ2VXaXRoT3ZlcndyaXRlIiB0aXRsZT0iTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIE1lcmdlV2l0aE92ZXJ3cml0ZShkc3QsIHNyYywgb3B0cykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoQXBwZW5kU2xpY2UiIHRpdGxlPSJXaXRoQXBwZW5kU2xpY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhBcHBlbmRTbGljZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aE92ZXJyaWRlIiB0aXRsZT0iV2l0aE92ZXJyaWRlKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoT3ZlcnJpZGUoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVycmlkZUVtcHR5U2xpY2UiIHRpdGxlPSJXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiIHRpdGxlPSJXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aFNsaWNlRGVlcENvcHkiIHRpdGxlPSJXaXRoU2xpY2VEZWVwQ29weShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aFNsaWNlRGVlcENvcHkoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhUcmFuc2Zvcm1lcnMiIHRpdGxlPSJXaXRoVHJhbnNmb3JtZXJzKHRyYW5zZm9ybWVycykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoVHJhbnNmb3JtZXJzKHRyYW5zZm9ybWVycykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoVHlwZUNoZWNrIiB0aXRsZT0iV2l0aFR5cGVDaGVjayhjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aFR5cGVDaGVjayhjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aG91dERlcmVmZXJlbmNlIiB0aXRsZT0iV2l0aG91dERlcmVmZXJlbmNlKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgIDwvdWw+CiAgICAgIAogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LXR5cGVzIj4KICAgICAgPGEgaHJlZj0iI3BrZy10eXBlcyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBUeXBlcwogICAgICA8L2E+CiAgICAgIDx1bD4KICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjQ29uZmlnIiB0aXRsZT0idHlwZSBDb25maWciIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBDb25maWcKICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNUcmFuc2Zvcm1lcnMiIHRpdGxlPSJ0eXBlIFRyYW5zZm9ybWVycyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIFRyYW5zZm9ybWVycwogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgIAogICAgICA8L3VsPgogICAgPC9saT4KICAKICAKPC91bD4KCiAgICAgIDwvbGk+CiAgICAKICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tc291cmNlZmlsZXMiIGRhdGEtZ3RtYz0ib3V0bGluZSBsaW5rIj4KICAgICAgICAgIFNvdXJjZSBGaWxlcwogICAgICAgIDwvYT4KICAgICAgPC9saT4KICAgIAogICAgCiAgPC91bD4KCiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1uYXZNb2JpbGUganMtbWFpbk5hdk1vYmlsZSI+CiAgICA8bGFiZWwgY2xhc3M9ImdvLUxhYmVsIj4KICAgICAgPHNlbGVjdCBjbGFzcz0iZ28tU2VsZWN0Ij4KICAgICAgICAKICAgICAgICAgIDxvcHRpb24gc2VsZWN0ZWQgZGlzYWJsZWQ+UkVBRE1FPC9vcHRpb24+CiAgICAgICAgCiAgICAgIDwvc2VsZWN0PgogICAgPC9sYWJlbD4KICA8L2Rpdj4KPC9uYXY+CiAgICA8YXJ0aWNsZSBjbGFzcz0iZ28tTWFpbi1hcnRpY2xlIGpzLW1haW5Db250ZW50Ij4KICA8ZGl2IGNsYXNzPSJVbml0RGV0YWlscyIgZGF0YS10ZXN0LWlkPSJVbml0RGV0YWlscyIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyI+CiAgICA8ZGl2IGNsYXNzPSJVbml0RGV0YWlscy1jb250ZW50IGpzLXVuaXREZXRhaWxzQ29udGVudCIgZGF0YS10ZXN0LWlkPSJVbml0RGV0YWlscy1jb250ZW50Ij4KICAgICAgCiAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdFJlYWRtZSBVbml0UmVhZG1lLS1leHBhbmRlZCBqcy1yZWFkbWUiPgogICAgPGgyIGNsYXNzPSJVbml0UmVhZG1lLXRpdGxlIiBpZD0ic2VjdGlvbi1yZWFkbWUiPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jaHJvbWVfcmVhZGVyX21vZGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICBSRUFETUUKICAgICAgPGEgY2xhc3M9IlVuaXRSZWFkbWUtaWRMaW5rIiBocmVmPSIjc2VjdGlvbi1yZWFkbWUiIGFyaWEtbGFiZWw9IkdvIHRvIFJlYWRtZSI+wrY8L2E+CiAgICA8L2gyPgogICAgCiAgICAgIDxkaXYgY2xhc3M9IlVuaXRSZWFkbWUtY29udGVudCIgZGF0YS10ZXN0LWlkPSJVbml0LXJlYWRtZUNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Ik92ZXJ2aWV3LXJlYWRtZUNvbnRlbnQganMtcmVhZG1lQ29udGVudCI+PGgzIGNsYXNzPSJoMSIgaWQ9InJlYWRtZS1tZXJnbyI+TWVyZ288L2gzPgo8cD48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9yZWxlYXNlcyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UvaW1kYXJpby9tZXJnby5zdmciIGFsdD0iR2l0SHViIHJlbGVhc2UiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ29yZXBvcnRjYXJkLmNvbS9yZXBvcnQvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9nb3JlcG9ydGNhcmQuY29tL2JhZGdlL2ltZGFyaW8vbWVyZ28iIGFsdD0iR29DYXJkIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9hY3Rpb25zL3dvcmtmbG93cy90ZXN0cy55bWwiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby93b3JrZmxvd3MvdGVzdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIiIGFsdD0iVGVzdCBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYXBpLnNlY3VyaXR5c2NvcmVjYXJkcy5kZXYvcHJvamVjdHMvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcGkuc2VjdXJpdHlzY29yZWNhcmRzLmRldi9wcm9qZWN0cy9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmFkZ2UiIGFsdD0iT3BlblNTRiBTY29yZWNhcmQiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYmVzdHByYWN0aWNlcy5jb3JlaW5mcmFzdHJ1Y3R1cmUub3JnL3Byb2plY3RzLzcxNzciIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2Jlc3RwcmFjdGljZXMuY29yZWluZnJhc3RydWN0dXJlLm9yZy9wcm9qZWN0cy83MTc3L2JhZGdlIiBhbHQ9Ik9wZW5TU0YgQmVzdCBQcmFjdGljZXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vY292ZXJhbGxzLmlvL2dpdGh1Yi9pbWRhcmlvL21lcmdvP2JyYW5jaD1tYXN0ZXIiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9naXRodWIvaW1kYXJpby9tZXJnby9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlciIgYWx0PSJDb3ZlcmFnZSBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9iYWRnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby8tL2JhZGdlLnN2ZyIgYWx0PSJTb3VyY2VncmFwaCIvPjwvYT4KPGEgaHJlZj0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vcHJvamVjdHMvZ2l0JTJCZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbz9yZWY9YmFkZ2Vfc2hpZWxkIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vYXBpL3Byb2plY3RzL2dpdCUyQmdpdGh1Yi5jb20lMkZpbWRhcmlvJTJGbWVyZ28uc3ZnP3R5cGU9c2hpZWxkIiBhbHQ9IkZPU1NBIHN0YXR1cyIvPjwvYT48L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9zdGF0dXMuc3ZnIiBhbHQ9IkdvRG9jIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc3BvbnNvcnMvaW1kYXJpbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3Nwb25zb3JzL2ltZGFyaW8iIGFsdD0iQmVjb21lIG15IHNwb25zb3IiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vdGlkZWxpZnQuY29tL3N1YnNjcmlwdGlvbi9wa2cvZ28tZ2l0aHViLmNvbS1pbWRhcmlvLW1lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly90aWRlbGlmdC5jb20vYmFkZ2VzL3BhY2thZ2UvZ28vZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbyIgYWx0PSJUaWRlbGlmdCIvPjwvYT48L3A+CjxwPkEgaGVscGVyIHRvIG1lcmdlIHN0cnVjdHMgYW5kIG1hcHMgaW4gR29sYW5nLiBVc2VmdWwgZm9yIGNvbmZpZ3VyYXRpb24gZGVmYXVsdCB2YWx1ZXMsIGF2b2lkaW5nIG1lc3N5IGlmLXN0YXRlbWVudHMuPC9wPgo8cD5NZXJnbyBtZXJnZXMgc2FtZS10eXBlIHN0cnVjdHMgYW5kIG1hcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBpbiB6ZXJvLXZhbHVlIGZpZWxkcy4gTWVyZ28gd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcy4gSXQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgb25lLiBJdCBhbHNvIHdvbiYjMzk7dCBtZXJnZSBzdHJ1Y3RzIGluc2lkZSBtYXBzIChiZWNhdXNlIHRoZXkgYXJlIG5vdCBhZGRyZXNzYWJsZSB1c2luZyBHbyByZWZsZWN0aW9uKS48L3A+CjxwPkFsc28gYSBsb3ZlbHkgPGEgaHJlZj0iaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZXJnbyIgcmVsPSJub2ZvbGxvdyI+Y29tdW5lPC9hPiAobXVuaWNpcGFsaXR5KSBpbiB0aGUgUHJvdmluY2Ugb2YgQW5jb25hIGluIHRoZSBJdGFsaWFuIHJlZ2lvbiBvZiBNYXJjaGUuPC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLXN0YXR1cyI+U3RhdHVzPC9oND4KPHA+SXQgaXMgcmVhZHkgZm9yIHByb2R1Y3Rpb24gdXNlLiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyNtZXJnby1pbi10aGUtd2lsZCIgcmVsPSJub2ZvbGxvdyI+SXQgaXMgdXNlZCBpbiBzZXZlcmFsIHByb2plY3RzIGJ5IERvY2tlciwgR29vZ2xlLCBUaGUgTGludXggRm91bmRhdGlvbiwgVk1XYXJlLCBTaG9waWZ5LCBNaWNyb3NvZnQsIGV0YzwvYT4uPC9wPgo8aDUgY2xhc3M9ImgzIiBpZD0icmVhZG1lLWltcG9ydGFudC1ub3RlIj5JbXBvcnRhbnQgbm90ZTwvaDU+CjxwPlBsZWFzZSBrZWVwIGluIG1pbmQgdGhhdCBhIHByb2JsZW1hdGljIFBSIGJyb2tlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuOSIgcmVsPSJub2ZvbGxvdyI+MC4zLjk8L2E+LiBJIHJldmVydGVkIGl0IGluIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuMTAiIHJlbD0ibm9mb2xsb3ciPjAuMy4xMDwvYT4sIGFuZCBJIGNvbnNpZGVyIGl0IHN0YWJsZSBidXQgbm90IGJ1Zy1mcmVlLiBBbHNvLCB0aGlzIHZlcnNpb24gYWRkcyBzdXBwb3J0IGZvciBnbyBtb2R1bGVzLjwvcD4KPHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2ltZGFyaW8vbWVyZ28vcmVsZWFzZXMvdGFnLzAuMy4yIiByZWw9Im5vZm9sbG93Ij4wLjMuMjwvYT4sIE1lcmdvIGNoYW5nZWQgPGNvZGU+TWVyZ2UoKTwvY29kZT5hbmQgPGNvZGU+TWFwKCk8L2NvZGU+IHNpZ25hdHVyZXMgdG8gc3VwcG9ydCA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgcmVsPSJub2ZvbGxvdyI+dHJhbnNmb3JtZXJzPC9hPi4gSSBhZGRlZCBhbiBvcHRpb25hbC92YXJpYWRpYyBhcmd1bWVudCBzbyB0aGF0IGl0IHdvbiYjMzk7dCBicmVhayB0aGUgZXhpc3RpbmcgY29kZS48L3A+CjxwPklmIHlvdSB3ZXJlIHVzaW5nIE1lcmdvIGJlZm9yZSBBcHJpbCA2dGgsIDIwMTUsIHBsZWFzZSBjaGVjayB5b3VyIHByb2plY3Qgd29ya3MgYXMgaW50ZW5kZWQgYWZ0ZXIgdXBkYXRpbmcgeW91ciBsb2NhbCBjb3B5IHdpdGggPGNvZGU+Z28gZ2V0IC11IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbzwvY29kZT4uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS48L3A+CjxoNSBjbGFzcz0iaDMiIGlkPSJyZWFkbWUtZG9uYXRpb25zIj5Eb25hdGlvbnM8L2g1Pgo8cD5JZiBNZXJnbyBpcyB1c2VmdWwgdG8geW91LCBjb25zaWRlciBidXlpbmcgbWUgYSBjb2ZmZWUsIGEgYmVlciwgb3IgbWFraW5nIGEgbW9udGhseSBkb25hdGlvbiB0byBhbGxvdyBtZSB0byBrZWVwIGJ1aWxkaW5nIGdyZWF0IGZyZWUgc29mdHdhcmUuIPCfmI08L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8va28tZmkuY29tL0IwQjU4ODM5IiByZWw9Im5vZm9sbG93Ij48aW1nIGhlaWdodD0iMzYiIHNyYz0iaHR0cHM6Ly9hejc0MzcwMi52by5tc2VjbmQubmV0L2Nkbi9rb2ZpMS5wbmc/dj0wIiBhbHQ9IkJ1eSBNZSBhIENvZmZlZSBhdCBrby1maS5jb20iLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9kYXJpby9kb25hdGUiIHJlbD0ibm9mb2xsb3ciPjxpbWcgYWx0PSJEb25hdGUgdXNpbmcgTGliZXJhcGF5IiBzcmM9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9hc3NldHMvd2lkZ2V0cy9kb25hdGUuc3ZnIj48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zcG9uc29ycy9pbWRhcmlvIiByZWw9Im5vZm9sbG93Ij48aW1nIGFsdD0iQmVjb21lIG15IHNwb25zb3IiIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvc3BvbnNvcnMvaW1kYXJpbz9zdHlsZT1mb3ItdGhlLWJhZGdlIi8+PC9hPjwvcD4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS1tZXJnby1pbi10aGUtd2lsZCI+TWVyZ28gaW4gdGhlIHdpbGQ8L2g1Pgo8dWw+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbW9ieS9tb2J5IiByZWw9Im5vZm9sbG93Ij5tb2J5L21vYnk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2t1YmVybmV0ZXMiIHJlbD0ibm9mb2xsb3ciPmt1YmVybmV0ZXMva3ViZXJuZXRlczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Ztd2FyZS9kaXNwYXRjaCIgcmVsPSJub2ZvbGxvdyI+dm13YXJlL2Rpc3BhdGNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vU2hvcGlmeS90aGVtZWtpdCIgcmVsPSJub2ZvbGxvdyI+U2hvcGlmeS90aGVtZWtpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vemFzIiByZWw9Im5vZm9sbG93Ij5pbWRhcmlvL3phczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hdGNvcm5pYy9oZXJtZXMiIHJlbD0ibm9mb2xsb3ciPm1hdGNvcm5pYy9oZXJtZXM8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuQmF6YWFyL29wZW5iYXphYXItZ28iIHJlbD0ibm9mb2xsb3ciPk9wZW5CYXphYXIvb3BlbmJhemFhci1nbzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2thdGFyYXMvaXJpcyIgcmVsPSJub2ZvbGxvdyI+a2F0YXJhcy9pcmlzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbHNhdXRlci9jcmFuZSIgcmVsPSJub2ZvbGxvdyI+bWljaGFlbHNhdXRlci9jcmFuZTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvLXRhc2svdGFzayIgcmVsPSJub2ZvbGxvdyI+Z28tdGFzay90YXNrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc2Vuc3UvdWNoaXdhIiByZWw9Im5vZm9sbG93Ij5zZW5zdS91Y2hpd2E8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vcnkvaHlkcmEiIHJlbD0ibm9mb2xsb3ciPm9yeS9oeWRyYTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Npc2F0ZWNoL3ZjbGkiIHJlbD0ibm9mb2xsb3ciPnNpc2F0ZWNoL3ZjbGk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kYWlyeWNhcnQvZGFpcnljYXJ0IiByZWw9Im5vZm9sbG93Ij5kYWlyeWNhcnQvZGFpcnljYXJ0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcHJvamVjdGNhbGljby9mZWxpeCIgcmVsPSJub2ZvbGxvdyI+cHJvamVjdGNhbGljby9mZWxpeDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Jlc2luLW9zL2JhbGVuYSIgcmVsPSJub2ZvbGxvdyI+cmVzaW4tb3MvYmFsZW5hPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ28ta2l2aWsva2l2aWsiIHJlbD0ibm9mb2xsb3ciPmdvLWtpdmlrL2tpdmlrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vVGVsZWZvbmljYS9nb3ZpY2UiIHJlbD0ibm9mb2xsb3ciPlRlbGVmb25pY2EvZ292aWNlPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvc3VwZXJnaWFudC9zdXBlcmdpYW50IiByZWw9Im5vZm9sbG93Ij5zdXBlcmdpYW50L3N1cGVyZ2lhbnQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9TZXJnZXlUc2Fsa292L2Jyb29jZSIgcmVsPSJub2ZvbGxvdyI+U2VyZ2V5VHNhbGtvdi9icm9vY2U8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zb25pYWgvZG5zbWFkZWVhc3kiIHJlbD0ibm9mb2xsb3ciPnNvbmlhaC9kbnNtYWRlZWFzeTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL29oc3UtY29tcC1iaW8vZnVubmVsIiByZWw9Im5vZm9sbG93Ij5vaHN1LWNvbXAtYmlvL2Z1bm5lbDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0VhZ2VySU8vU3RvdXQiIHJlbD0ibm9mb2xsb3ciPkVhZ2VySU8vU3RvdXQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpIiByZWw9Im5vZm9sbG93Ij5seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcnVzc3Jvc3MvY2FudmFzYXNzaWdubWVudHMiIHJlbD0ibm9mb2xsb3ciPnJ1c3Nyb3NzL2NhbnZhc2Fzc2lnbm1lbnRzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcmRlZ2dlcy9jcnlwdGx5LWFwaSIgcmVsPSJub2ZvbGxvdyI+cmRlZ2dlcy9jcnlwdGx5LWFwaTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Nhc3VhbGppbS9leGVnZ3V0b3IiIHJlbD0ibm9mb2xsb3ciPmNhc3VhbGppbS9leGVnZ3V0b3I8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kaXZzaG90L2dpdGxpbmciIHJlbD0ibm9mb2xsb3ciPmRpdnNob3QvZ2l0bGluZzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL1JXSk11cnBoeS9nb3JsIiByZWw9Im5vZm9sbG93Ij5SV0pNdXJwaHkvZ29ybDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2FuZHJlcm9ja2VyL2RlcGxveTQyIiByZWw9Im5vZm9sbG93Ij5hbmRyZXJvY2tlci9kZXBsb3k0MjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Vsd2luYXIvcmFtYmxlciIgcmVsPSJub2ZvbGxvdyI+ZWx3aW5hci9yYW1ibGVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vdG1haWFyb3RvL2dvcGFydG1hbiIgcmVsPSJub2ZvbGxvdyI+dG1haWFyb3RvL2dvcGFydG1hbjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2pmYnVzL2ltcHJlc3Npb25pc3QiIHJlbD0ibm9mb2xsb3ciPmpmYnVzL2ltcHJlc3Npb25pc3Q8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9KbWV5ZXJpbmcvemVhbG90IiByZWw9Im5vZm9sbG93Ij5KbWV5ZXJpbmcvemVhbG90PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29kZXAtbWlncmF0b3IvcmlnZ2VyLWhvc3QiIHJlbD0ibm9mb2xsb3ciPmdvZGVwLW1pZ3JhdG9yL3JpZ2dlci1ob3N0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vRHJvbmV2ZXJ5L011bHRpd2F5U3dpdGNoLUdvIiByZWw9Im5vZm9sbG93Ij5Ecm9uZXZlcnkvTXVsdGl3YXlTd2l0Y2gtR288L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90aG9hcy9waWNmaXQiIHJlbD0ibm9mb2xsb3ciPnRob2FzL3BpY2ZpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hbnRhc21hdGVsaXMvd2hvb3BsaXN0LXNlcnZlciIgcmVsPSJub2ZvbGxvdyI+bWFudGFzbWF0ZWxpcy93aG9vcGxpc3Qtc2VydmVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vam51dGhvbmcvaXRlbV9zZWFyY2giIHJlbD0ibm9mb2xsb3ciPmpudXRob25nL2l0ZW1fc2VhcmNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYnVrYWxhcGFrL3Nub3dib2FyZCIgcmVsPSJub2ZvbGxvdyI+YnVrYWxhcGFrL3Nub3dib2FyZDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcnNzaC9jb250YWluZXJzc2giIHJlbD0ibm9mb2xsb3ciPmNvbnRhaW5lcnNzaC9jb250YWluZXJzc2g8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb3JlbGVhc2VyL2dvcmVsZWFzZXIiIHJlbD0ibm9mb2xsb3ciPmdvcmVsZWFzZXIvZ29yZWxlYXNlcjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3RqcG56L3N0cnVjdGJvdCIgcmVsPSJub2ZvbGxvdyI+dGpwbnovc3RydWN0Ym90PC9hPjwvbGk+CjwvdWw+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtaW5zdGFsbCI+SW5zdGFsbDwvaDQ+CjxwcmU+PGNvZGU+Z28gZ2V0IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwoKLy8gdXNlIGluIHlvdXIgLmdvIGNvZGUKaW1wb3J0ICgKICAgICYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQo8L2NvZGU+PC9wcmU+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtdXNhZ2UiPlVzYWdlPC9oND4KPHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIDxhIGhyZWY9Imh0dHBzOi8vZ29sYW5nLm9yZy9yZWYvc3BlYyNUaGVfemVyb192YWx1ZSIgcmVsPSJub2ZvbGxvdyI+dGhleSBhcmUgemVybyB2YWx1ZXM8L2E+IHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BbHNvLCB5b3UgY2FuIG1lcmdlIG92ZXJ3cml0aW5nIHZhbHVlcyB1c2luZyB0aGUgdHJhbnNmb3JtZXIgPGNvZGU+V2l0aE92ZXJyaWRlPC9jb2RlPi48L3A+CjxwcmU+PGNvZGU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BZGRpdGlvbmFsbHksIHlvdSBjYW4gbWFwIGEgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gPGNvZGU+TWVyZ2UoKTwvY29kZT4uIEtleXMgYXJlIGNhcGl0YWxpemVkIHRvIGZpbmQgZWFjaCBjb3JyZXNwb25kaW5nIGV4cG9ydGVkIGZpZWxkLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWFwKCZhbXA7ZHN0LCBzcmNNYXApOyBlcnIgIT0gbmlsIHsKICAgIC8vIC4uLgp9CjwvY29kZT48L3ByZT4KPHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4uIFRoZXkgd2lsbCBiZSBqdXN0IGFzc2lnbmVkIGFzIHZhbHVlcy48L3A+CjxwPkhlcmUgaXMgYSBuaWNlIGV4YW1wbGU6PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQoKdHlwZSBGb28gc3RydWN0IHsKCUEgc3RyaW5nCglCIGludDY0Cn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBGb297CgkJQTogJiMzNDtvbmUmIzM0OywKCQlCOiAyLAoJfQoJZGVzdCA6PSBGb297CgkJQTogJiMzNDt0d28mIzM0OywKCX0KCW1lcmdvLk1lcmdlKCZhbXA7ZGVzdCwgc3JjKQoJZm10LlByaW50bG4oZGVzdCkKCS8vIFdpbGwgcHJpbnQKCS8vIHt0d28gMn0KfQo8L2NvZGU+PC9wcmU+CjxwPk5vdGU6IGlmIHRlc3QgYXJlIGZhaWxpbmcgZHVlIG1pc3NpbmcgcGFja2FnZSwgcGxlYXNlIGV4ZWN1dGU6PC9wPgo8cHJlPjxjb2RlPmdvIGdldCBnb3BrZy5pbi95YW1sLnYzCjwvY29kZT48L3ByZT4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS10cmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvaDU+CjxwPlRyYW5zZm9ybWVycyBhbGxvdyB0byBtZXJnZSBzcGVjaWZpYyB0eXBlcyBkaWZmZXJlbnRseSB0aGFuIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJbiBvdGhlciB3b3Jkcywgbm93IHlvdSBjYW4gY3VzdG9taXplIGhvdyBzb21lIHR5cGVzIGFyZSBtZXJnZWQuIEZvciBleGFtcGxlLCA8Y29kZT50aW1lLlRpbWU8L2NvZGU+IGlzIGEgc3RydWN0OyBpdCBkb2VzbiYjMzk7dCBoYXZlIHplcm8gdmFsdWUgYnV0IElzWmVybyBjYW4gcmV0dXJuIHRydWUgYmVjYXVzZSBpdCBoYXMgZmllbGRzIHdpdGggemVybyB2YWx1ZS4gSG93IGNhbiB3ZSBtZXJnZSBhIG5vbi16ZXJvIDxjb2RlPnRpbWUuVGltZTwvY29kZT4/PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKICAgICAgICAmIzM0O3JlZmxlY3QmIzM0OwogICAgICAgICYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9jb2RlPjwvcHJlPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWNvbnRhY3QtbWUiPkNvbnRhY3QgbWU8L2g0Pgo8cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIiByZWw9Im5vZm9sbG93Ij5AaW1fZGFyaW88L2E+PC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWFib3V0Ij5BYm91dDwvaDQ+CjxwPldyaXR0ZW4gYnkgPGEgaHJlZj0iaHR0cDovL2RhcmlvLmltIiByZWw9Im5vZm9sbG93Ij5EYXJpbyBDYXN0YcOxw6k8L2E+LjwvcD4KPGg0IGNsYXNzPSJoMiIgaWQ9InJlYWRtZS1saWNlbnNlIj5MaWNlbnNlPC9oND4KPHA+PGEgaHJlZj0iaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZSIgcmVsPSJub2ZvbGxvdyI+QlNEIDMtQ2xhdXNlPC9hPiBsaWNlbnNlLCBhcyA8YSBocmVmPSJodHRwOi8vZ29sYW5nLm9yZy9MSUNFTlNFIiByZWw9Im5vZm9sbG93Ij5HbyBsYW5ndWFnZTwvYT4uPC9wPgo8cD48YSBocmVmPSJodHRwczovL2FwcC5mb3NzYS5pby9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvP3JlZj1iYWRnZV9sYXJnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vYXBwLmZvc3NhLmlvL2FwaS9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvLnN2Zz90eXBlPWxhcmdlIiBhbHQ9IkZPU1NBIFN0YXR1cyIvPjwvYT48L3A+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iVW5pdFJlYWRtZS1leHBhbmRMaW5rIGpzLXJlYWRtZUV4cGFuZCIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWV4cGFuZCIgZGF0YS1ndG1jPSJyZWFkbWUgYnV0dG9uIgogICAgICAgICAgYXJpYS1sYWJlbD0iRXhwYW5kIFJlYWRtZSI+RXhwYW5kIOKWvjwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJVbml0UmVhZG1lLWNvbGxhcHNlTGluayBqcy1yZWFkbWVDb2xsYXBzZSIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWNvbGxhcHNlIiBkYXRhLWd0bWM9InJlYWRtZSBidXR0b24iCiAgICAgICAgICBhcmlhLWxhYmVsPSJFeHBhbmQgUmVhZG1lIj5Db2xsYXBzZSDilrQ8L2J1dHRvbj4KICAgIAogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdERvYyI+CiAgICA8aDIgY2xhc3M9IlVuaXREb2MtdGl0bGUiIGlkPSJzZWN0aW9uLWRvY3VtZW50YXRpb24iPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb2RlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgRG9jdW1lbnRhdGlvbgogICAgICA8YSBjbGFzcz0iVW5pdERvYy1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLWRvY3VtZW50YXRpb24iIGFyaWEtbGFiZWw9IkdvIHRvIERvY3VtZW50YXRpb24iPsK2PC9hPgogICAgPC9oMj4KICAgIAogIAogICAgCiAgCgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbiBqcy1kb2N1bWVudGF0aW9uIj4KICAgICAgCiAgICAgICAgCgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnRlbnQganMtZG9jQ29udGVudCI+IDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3Ij4KICAgIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctb3ZlcnZpZXciIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3SGVhZGVyIj5PdmVydmlldyA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3IiBhcmlhLWxhYmVsPSJHbyB0byBPdmVydmlldyI+wrY8L2E+PC9oMz4KCjxkaXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iVGFibGUgb2YgQ29udGVudHMiPgogIDx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2MgRG9jdW1lbnRhdGlvbi10b2MtY29sdW1ucyI+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1TdGF0dXMiPlN0YXR1czwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUltcG9ydGFudF9ub3RlIj5JbXBvcnRhbnQgbm90ZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUluc3RhbGwiPkluc3RhbGw8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1Vc2FnZSI+VXNhZ2U8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1UcmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUNvbnRhY3RfbWUiPkNvbnRhY3QgbWU8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1BYm91dCI+QWJvdXQ8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1MaWNlbnNlIj5MaWNlbnNlPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KPC9kaXY+CjxwPkEgaGVscGVyIHRvIG1lcmdlIHN0cnVjdHMgYW5kIG1hcHMgaW4gR29sYW5nLiBVc2VmdWwgZm9yIGNvbmZpZ3VyYXRpb24gZGVmYXVsdCB2YWx1ZXMsIGF2b2lkaW5nIG1lc3N5IGlmLXN0YXRlbWVudHMuCjwvcD48cD5NZXJnbyBtZXJnZXMgc2FtZS10eXBlIHN0cnVjdHMgYW5kIG1hcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBpbiB6ZXJvLXZhbHVlIGZpZWxkcy4gTWVyZ28gd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcy4gSXQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgb25lLiBJdCBhbHNvIHdvbiYjMzk7dCBtZXJnZSBzdHJ1Y3RzIGluc2lkZSBtYXBzIChiZWNhdXNlIHRoZXkgYXJlIG5vdCBhZGRyZXNzYWJsZSB1c2luZyBHbyByZWZsZWN0aW9uKS4KPC9wPjxoNCBpZD0iaGRyLVN0YXR1cyI+U3RhdHVzIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1TdGF0dXMiIGFyaWEtbGFiZWw9IkdvIHRvIFN0YXR1cyI+wrY8L2E+PC9oND48cD5JdCBpcyByZWFkeSBmb3IgcHJvZHVjdGlvbiB1c2UuIEl0IGlzIHVzZWQgaW4gc2V2ZXJhbCBwcm9qZWN0cyBieSBEb2NrZXIsIEdvb2dsZSwgVGhlIExpbnV4IEZvdW5kYXRpb24sIFZNV2FyZSwgU2hvcGlmeSwgZXRjLgo8L3A+PGg0IGlkPSJoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbXBvcnRhbnRfbm90ZSIgYXJpYS1sYWJlbD0iR28gdG8gSW1wb3J0YW50IG5vdGUiPsK2PC9hPjwvaDQ+PHA+UGxlYXNlIGtlZXAgaW4gbWluZCB0aGF0IGEgcHJvYmxlbWF0aWMgUFIgYnJva2UgMC4zLjkuIFdlIHJldmVydGVkIGl0IGluIDAuMy4xMC4gV2UgY29uc2lkZXIgMC4zLjEwIGFzIHN0YWJsZSBidXQgbm90IGJ1Zy1mcmVlLiAuIEFsc28sIHRoaXMgdmVyc2lvbiBhZGRzIHN1cHBvdCBmb3IgZ28gbW9kdWxlcy4KPC9wPjxwPktlZXAgaW4gbWluZCB0aGF0IGluIDAuMy4yLCBNZXJnbyBjaGFuZ2VkIE1lcmdlKCkgYW5kIE1hcCgpIHNpZ25hdHVyZXMgdG8gc3VwcG9ydCB0cmFuc2Zvcm1lcnMuIFdlIGFkZGVkIGFuIG9wdGlvbmFsL3ZhcmlhZGljIGFyZ3VtZW50IHNvIHRoYXQgaXQgd29uJiMzOTt0IGJyZWFrIHRoZSBleGlzdGluZyBjb2RlLgo8L3A+PHA+SWYgeW91IHdlcmUgdXNpbmcgTWVyZ28gYmVmb3JlIEFwcmlsIDZ0aCwgMjAxNSwgcGxlYXNlIGNoZWNrIHlvdXIgcHJvamVjdCB3b3JrcyBhcyBpbnRlbmRlZCBhZnRlciB1cGRhdGluZyB5b3VyIGxvY2FsIGNvcHkgd2l0aCBnbyBnZXQgLXUgZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvLiBJIGFwb2xvZ2l6ZSBmb3IgYW55IGlzc3VlIGNhdXNlZCBieSBpdHMgcHJldmlvdXMgYmVoYXZpb3IgYW5kIGFueSBmdXR1cmUgYnVnIHRoYXQgTWVyZ28gY291bGQgY2F1c2UgaW4gZXhpc3RpbmcgcHJvamVjdHMgYWZ0ZXIgdGhlIGNoYW5nZSAocmVsZWFzZSAwLjIuMCkuCjwvcD48aDQgaWQ9Imhkci1JbnN0YWxsIj5JbnN0YWxsIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbnN0YWxsIiBhcmlhLWxhYmVsPSJHbyB0byBJbnN0YWxsIj7CtjwvYT48L2g0PjxwPkRvIHlvdXIgdXN1YWwgaW5zdGFsbGF0aW9uIHByb2NlZHVyZToKPC9wPjxwcmU+Z28gZ2V0IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwoKLy8gdXNlIGluIHlvdXIgLmdvIGNvZGUKaW1wb3J0ICgKICAgICYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQo8L3ByZT48aDQgaWQ9Imhkci1Vc2FnZSI+VXNhZ2UgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLVVzYWdlIiBhcmlhLWxhYmVsPSJHbyB0byBVc2FnZSI+wrY8L2E+PC9oND48cD5Zb3UgY2FuIG9ubHkgbWVyZ2Ugc2FtZS10eXBlIHN0cnVjdHMgd2l0aCBleHBvcnRlZCBmaWVsZHMgaW5pdGlhbGl6ZWQgYXMgemVybyB2YWx1ZSBvZiB0aGVpciB0eXBlIGFuZCBzYW1lLXR5cGVzIG1hcHMuIE1lcmdvIHdvbiYjMzk7dCBtZXJnZSB1bmV4cG9ydGVkIChwcml2YXRlKSBmaWVsZHMgYnV0IHdpbGwgZG8gcmVjdXJzaXZlbHkgYW55IGV4cG9ydGVkIG9uZS4gSXQgd29uJiMzOTt0IG1lcmdlIGVtcHR5IHN0cnVjdHMgdmFsdWUgYXMgdGhleSBhcmUgemVybyB2YWx1ZXMgdG9vLiBBbHNvLCBtYXBzIHdpbGwgYmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5IGV4Y2VwdCBmb3Igc3RydWN0cyBpbnNpZGUgbWFwcyAoYmVjYXVzZSB0aGV5IGFyZSBub3QgYWRkcmVzc2FibGUgdXNpbmcgR28gcmVmbGVjdGlvbikuCjwvcD48cHJlPmlmIGVyciA6PSBtZXJnby5NZXJnZSgmYW1wO2RzdCwgc3JjKTsgZXJyICE9IG5pbCB7CgkvLyAuLi4KfQo8L3ByZT48cD5BbHNvLCB5b3UgY2FuIG1lcmdlIG92ZXJ3cml0aW5nIHZhbHVlcyB1c2luZyB0aGUgdHJhbnNmb3JtZXIgV2l0aE92ZXJyaWRlLgo8L3A+PHByZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYywgbWVyZ28uV2l0aE92ZXJyaWRlKTsgZXJyICE9IG5pbCB7CgkvLyAuLi4KfQo8L3ByZT48cD5BZGRpdGlvbmFsbHksIHlvdSBjYW4gbWFwIGEgbWFwW3N0cmluZ11pbnRlcmZhY2V7fSB0byBhIHN0cnVjdCAoYW5kIG90aGVyd2lzZSwgZnJvbSBzdHJ1Y3QgdG8gbWFwKSwgZm9sbG93aW5nIHRoZSBzYW1lIHJlc3RyaWN0aW9ucyBhcyBpbiBNZXJnZSgpLiBLZXlzIGFyZSBjYXBpdGFsaXplZCB0byBmaW5kIGVhY2ggY29ycmVzcG9uZGluZyBleHBvcnRlZCBmaWVsZC4KPC9wPjxwcmU+aWYgZXJyIDo9IG1lcmdvLk1hcCgmYW1wO2RzdCwgc3JjTWFwKTsgZXJyICE9IG5pbCB7CgkvLyAuLi4KfQo8L3ByZT48cD5XYXJuaW5nOiBpZiB5b3UgbWFwIGEgc3RydWN0IHRvIG1hcCwgaXQgd29uJiMzOTt0IGRvIGl0IHJlY3Vyc2l2ZWx5LiBEb24mIzM5O3QgZXhwZWN0IE1lcmdvIHRvIG1hcCBzdHJ1Y3QgbWVtYmVycyBvZiB5b3VyIHN0cnVjdCBhcyBtYXBbc3RyaW5nXWludGVyZmFjZXt9LiBUaGV5IHdpbGwgYmUganVzdCBhc3NpZ25lZCBhcyB2YWx1ZXMuCjwvcD48cD5IZXJlIGlzIGEgbmljZSBleGFtcGxlOgo8L3A+PHByZT5wYWNrYWdlIG1haW4KCmltcG9ydCAoCgkmIzM0O2ZtdCYjMzQ7CgkmIzM0O2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyYjMzQ7CikKCnR5cGUgRm9vIHN0cnVjdCB7CglBIHN0cmluZwoJQiBpbnQ2NAp9CgpmdW5jIG1haW4oKSB7CglzcmMgOj0gRm9vewoJCUE6ICYjMzQ7b25lJiMzNDssCgkJQjogMiwKCX0KCWRlc3QgOj0gRm9vewoJCUE6ICYjMzQ7dHdvJiMzNDssCgl9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYykKCWZtdC5QcmludGxuKGRlc3QpCgkvLyBXaWxsIHByaW50CgkvLyB7dHdvIDJ9Cn0KPC9wcmU+PGg0IGlkPSJoZHItVHJhbnNmb3JtZXJzIj5UcmFuc2Zvcm1lcnMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLVRyYW5zZm9ybWVycyIgYXJpYS1sYWJlbD0iR28gdG8gVHJhbnNmb3JtZXJzIj7CtjwvYT48L2g0PjxwPlRyYW5zZm9ybWVycyBhbGxvdyB0byBtZXJnZSBzcGVjaWZpYyB0eXBlcyBkaWZmZXJlbnRseSB0aGFuIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJbiBvdGhlciB3b3Jkcywgbm93IHlvdSBjYW4gY3VzdG9taXplIGhvdyBzb21lIHR5cGVzIGFyZSBtZXJnZWQuIEZvciBleGFtcGxlLCB0aW1lLlRpbWUgaXMgYSBzdHJ1Y3Q7IGl0IGRvZXNuJiMzOTt0IGhhdmUgemVybyB2YWx1ZSBidXQgSXNaZXJvIGNhbiByZXR1cm4gdHJ1ZSBiZWNhdXNlIGl0IGhhcyBmaWVsZHMgd2l0aCB6ZXJvIHZhbHVlLiBIb3cgY2FuIHdlIG1lcmdlIGEgbm9uLXplcm8gdGltZS5UaW1lPwo8L3A+PHByZT5wYWNrYWdlIG1haW4KCmltcG9ydCAoCgkmIzM0O2ZtdCYjMzQ7CgkmIzM0O2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyYjMzQ7CgkJJiMzNDtyZWZsZWN0JiMzNDsKCQkmIzM0O3RpbWUmIzM0OwopCgp0eXBlIHRpbWVUcmFuc2Zvcm1lciBzdHJ1Y3Qgewp9CgpmdW5jICh0IHRpbWVUcmFuc2Zvcm1lcikgVHJhbnNmb3JtZXIodHlwIHJlZmxlY3QuVHlwZSkgZnVuYyhkc3QsIHNyYyByZWZsZWN0LlZhbHVlKSBlcnJvciB7CglpZiB0eXAgPT0gcmVmbGVjdC5UeXBlT2YodGltZS5UaW1le30pIHsKCQlyZXR1cm4gZnVuYyhkc3QsIHNyYyByZWZsZWN0LlZhbHVlKSBlcnJvciB7CgkJCWlmIGRzdC5DYW5TZXQoKSB7CgkJCQlpc1plcm8gOj0gZHN0Lk1ldGhvZEJ5TmFtZSgmIzM0O0lzWmVybyYjMzQ7KQoJCQkJcmVzdWx0IDo9IGlzWmVyby5DYWxsKFtdcmVmbGVjdC5WYWx1ZXt9KQoJCQkJaWYgcmVzdWx0WzBdLkJvb2woKSB7CgkJCQkJZHN0LlNldChzcmMpCgkJCQl9CgkJCX0KCQkJcmV0dXJuIG5pbAoJCX0KCX0KCXJldHVybiBuaWwKfQoKdHlwZSBTbmFwc2hvdCBzdHJ1Y3QgewoJVGltZSB0aW1lLlRpbWUKCS8vIC4uLgp9CgpmdW5jIG1haW4oKSB7CglzcmMgOj0gU25hcHNob3R7dGltZS5Ob3coKX0KCWRlc3QgOj0gU25hcHNob3R7fQoJbWVyZ28uTWVyZ2UoJmFtcDtkZXN0LCBzcmMsIG1lcmdvLldpdGhUcmFuc2Zvcm1lcnModGltZVRyYW5zZm9ybWVye30pKQoJZm10LlByaW50bG4oZGVzdCkKCS8vIFdpbGwgcHJpbnQKCS8vIHsgMjAxOC0wMS0xMiAwMToxNTowMCArMDAwMCBVVEMgbT0rMC4wMDAwMDAwMDEgfQp9CjwvcHJlPjxoNCBpZD0iaGRyLUNvbnRhY3RfbWUiPkNvbnRhY3QgbWUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUNvbnRhY3RfbWUiIGFyaWEtbGFiZWw9IkdvIHRvIENvbnRhY3QgbWUiPsK2PC9hPjwvaDQ+PHA+SWYgSSBjYW4gaGVscCB5b3UsIHlvdSBoYXZlIGFuIGlkZWEgb3IgeW91IGFyZSB1c2luZyBNZXJnbyBpbiB5b3VyIHByb2plY3RzLCBkb24mIzM5O3QgaGVzaXRhdGUgdG8gZHJvcCBtZSBhIGxpbmUgKG9yIGEgcHVsbCByZXF1ZXN0KTogPGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9pbV9kYXJpbyI+aHR0cHM6Ly90d2l0dGVyLmNvbS9pbV9kYXJpbzwvYT4KPC9wPjxoNCBpZD0iaGRyLUFib3V0Ij5BYm91dCA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItQWJvdXQiIGFyaWEtbGFiZWw9IkdvIHRvIEFib3V0Ij7CtjwvYT48L2g0PjxwPldyaXR0ZW4gYnkgRGFyaW8gQ2FzdGHDscOpOiA8YSBocmVmPSJodHRwczovL2RhLnJpby5obiI+aHR0cHM6Ly9kYS5yaW8uaG48L2E+CjwvcD48aDQgaWQ9Imhkci1MaWNlbnNlIj5MaWNlbnNlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1MaWNlbnNlIiBhcmlhLWxhYmVsPSJHbyB0byBMaWNlbnNlIj7CtjwvYT48L2g0PjxwPkJTRCAzLUNsYXVzZSBsaWNlbnNlLCBhcyBHbyBsYW5ndWFnZS4KPC9wPgo8L3NlY3Rpb24+PHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXgiPgogICAgPGgzIGlkPSJwa2ctaW5kZXgiIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4SGVhZGVyIj5JbmRleCA8YSBocmVmPSIjcGtnLWluZGV4IiBhcmlhLWxhYmVsPSJHbyB0byBJbmRleCI+wrY8L2E+PC9oMz4KCjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleExpc3QiPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhWYXJpYWJsZXMiPjxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj5WYXJpYWJsZXM8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNYXAiPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWFwV2l0aE92ZXJ3cml0ZSI+ZnVuYyBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWVyZ2UiPmZ1bmMgTWVyZ2UoZHN0LCBzcmMgaW50ZXJmYWNle30sIG9wdHMgLi4uZnVuYygqQ29uZmlnKSkgZXJyb3I8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiPmZ1bmMgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aEFwcGVuZFNsaWNlIj5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVycmlkZUVtcHR5U2xpY2UiPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiPmZ1bmMgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhUcmFuc2Zvcm1lcnMiPmZ1bmMgV2l0aFRyYW5zZm9ybWVycyh0cmFuc2Zvcm1lcnMgVHJhbnNmb3JtZXJzKSBmdW5jKCpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aFR5cGVDaGVjayI+ZnVuYyBXaXRoVHlwZUNoZWNrKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhvdXREZXJlZmVyZW5jZSI+ZnVuYyBXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnICpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGUiPgogICAgICAgICAgPGEgaHJlZj0iI0NvbmZpZyI+dHlwZSBDb25maWc8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjVHJhbnNmb3JtZXJzIj50eXBlIFRyYW5zZm9ybWVyczwvYT48L2xpPgo8L3VsPgo8L3NlY3Rpb24+PGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy1jb25zdGFudHMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50c0hlYWRlciI+Q29uc3RhbnRzIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIiBhcmlhLWxhYmVsPSJHbyB0byBDb25zdGFudHMiPsK2PC9hPjwvaDM+CgogIDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50cyI+PHAgY2xhc3M9IkRvY3VtZW50YXRpb24tZW1wdHkiPlRoaXMgc2VjdGlvbiBpcyBlbXB0eS48L3A+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLXZhcmlhYmxlcyIgY2xhc3M9IkRvY3VtZW50YXRpb24tdmFyaWFibGVzSGVhZGVyIj5WYXJpYWJsZXMgPGEgaHJlZj0iI3BrZy12YXJpYWJsZXMiIGFyaWEtbGFiZWw9IkdvIHRvIFZhcmlhYmxlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdmFyaWFibGVzIj4KICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbkxpbmsiPjxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdvLmdvI0wxNyI+VmlldyBTb3VyY2U8L2E+PC9zcGFuPgogICAgICA8cHJlPnZhciAoCjxzcGFuIGlkPSJFcnJOaWxBcmd1bWVudHMiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJOaWxBcmd1bWVudHMgICAgICAgICAgICAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7c3JjIGFuZCBkc3QgbXVzdCBub3QgYmUgbmlsJiMzNDspCjwvc3Bhbj48c3BhbiBpZD0iRXJyRGlmZmVyZW50QXJndW1lbnRzVHlwZXMiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJEaWZmZXJlbnRBcmd1bWVudHNUeXBlcyAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7c3JjIGFuZCBkc3QgbXVzdCBiZSBvZiBzYW1lIHR5cGUmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJOb3RTdXBwb3J0ZWQiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJOb3RTdXBwb3J0ZWQgICAgICAgICAgICAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7b25seSBzdHJ1Y3RzLCBtYXBzLCBhbmQgc2xpY2VzIGFyZSBzdXBwb3J0ZWQmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJFeHBlY3RlZE1hcEFzRGVzdGluYXRpb24iIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJFeHBlY3RlZE1hcEFzRGVzdGluYXRpb24gICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7ZHN0IHdhcyBleHBlY3RlZCB0byBiZSBhIG1hcCYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyckV4cGVjdGVkU3RydWN0QXNEZXN0aW5hdGlvbiIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckV4cGVjdGVkU3RydWN0QXNEZXN0aW5hdGlvbiA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtkc3Qgd2FzIGV4cGVjdGVkIHRvIGJlIGEgc3RydWN0JiMzNDspCjwvc3Bhbj48c3BhbiBpZD0iRXJyTm9uUG9pbnRlckFyZ3VtZW50IiBkYXRhLWtpbmQ9InZhcmlhYmxlIj4JRXJyTm9uUG9pbnRlckFyZ3VtZW50ICAgICAgICAgID0gPGEgaHJlZj0iL2Vycm9ycyI+ZXJyb3JzPC9hPi48YSBocmVmPSIvZXJyb3JzI05ldyI+TmV3PC9hPigmIzM0O2RzdCBtdXN0IGJlIGEgcG9pbnRlciYjMzQ7KQo8L3NwYW4+KTwvcHJlPgogICAgPC9kaXY+CiAgPHA+RXJyb3JzIHJlcG9ydGVkIGJ5IE1lcmdvIHdoZW4gaXQgZmluZHMgaW52YWxpZCBhcmd1bWVudHMuCjwvcD4KPC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLWZ1bmN0aW9ucyIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zSGVhZGVyIj5GdW5jdGlvbnMgPGEgaHJlZj0iI3BrZy1mdW5jdGlvbnMiIGFyaWEtbGFiZWw9IkdvIHRvIEZ1bmN0aW9ucyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zIj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvI0wxMzIiPk1hcDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjTWFwIiBhcmlhLWxhYmVsPSJHbyB0byBNYXAiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyBNYXAoZHN0LCBzcmMgaW50ZXJmYWNle30sIG9wdHMgLi4uZnVuYygqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPikpIDxhIGhyZWY9Ii9idWlsdGluI2Vycm9yIj5lcnJvcjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPk1hcCBzZXRzIGZpZWxkcyYjMzk7IHZhbHVlcyBpbiBkc3QgZnJvbSBzcmMuCnNyYyBjYW4gYmUgYSBtYXAgd2l0aCBzdHJpbmcga2V5cyBvciBhIHN0cnVjdC4gZHN0IG11c3QgYmUgdGhlIG9wcG9zaXRlOgppZiBzcmMgaXMgYSBtYXAsIGRzdCBtdXN0IGJlIGEgdmFsaWQgcG9pbnRlciB0byBzdHJ1Y3QuIElmIHNyYyBpcyBhIHN0cnVjdCwKZHN0IG11c3QgYmUgbWFwW3N0cmluZ11pbnRlcmZhY2V7fS4KSXQgd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcyBhbmQgd2lsbCBkbyByZWN1cnNpdmVseQphbnkgZXhwb3J0ZWQgZmllbGQuCklmIGRzdCBpcyBhIG1hcCwga2V5cyB3aWxsIGJlIHNyYyBmaWVsZHMmIzM5OyBuYW1lcyBpbiBsb3dlciBjYW1lbCBjYXNlLgpNaXNzaW5nIGtleSBpbiBzcmMgdGhhdCBkb2VzbiYjMzk7dCBtYXRjaCBhIGZpZWxkIGluIGRzdCB3aWxsIGJlIHNraXBwZWQuIFRoaXMKZG9lc24mIzM5O3QgYXBwbHkgaWYgZHN0IGlzIGEgbWFwLgpUaGlzIGlzIHNlcGFyYXRlZCBtZXRob2QgZnJvbSBNZXJnZSBiZWNhdXNlIGl0IGlzIGNsZWFuZXIgYW5kIGl0IGtlZXBzIHNhbmUKc2VtYW50aWNzOiBtZXJnaW5nIGVxdWFsIHR5cGVzLCBtYXBwaW5nIGRpZmZlcmVudCAocmVzdHJpY3RlZCkgdHlwZXMuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNYXBXaXRoT3ZlcndyaXRlIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvI0wxMzkiPk1hcFdpdGhPdmVyd3JpdGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01hcFdpdGhPdmVyd3JpdGUiIGFyaWEtbGFiZWw9IkdvIHRvIE1hcFdpdGhPdmVyd3JpdGUiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NYXBXaXRoT3ZlcndyaXRlIHdpbGwgZG8gdGhlIHNhbWUgYXMgTWFwIGV4Y2VwdCB0aGF0IG5vbi1lbXB0eSBkc3QgYXR0cmlidXRlcyB3aWxsIGJlIG92ZXJyaWRkZW4gYnkKbm9uLWVtcHR5IHNyYyBhdHRyaWJ1dGUgdmFsdWVzLgpEZXByZWNhdGVkOiBVc2UgTWFwKOKApikgd2l0aCBXaXRoT3ZlcnJpZGUKPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9Ik1lcmdlIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDMxOCI+TWVyZ2U8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01lcmdlIiBhcmlhLWxhYmVsPSJHbyB0byBNZXJnZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NZXJnZSB3aWxsIGZpbGwgYW55IGVtcHR5IGZvciB2YWx1ZSB0eXBlIGF0dHJpYnV0ZXMgb24gdGhlIGRzdCBzdHJ1Y3QgdXNpbmcgY29ycmVzcG9uZGluZwpzcmMgYXR0cmlidXRlcyBpZiB0aGV5IHRoZW1zZWx2ZXMgYXJlIG5vdCBlbXB0eS4gZHN0IGFuZCBzcmMgbXVzdCBiZSB2YWxpZCBzYW1lLXR5cGUgc3RydWN0cwphbmQgZHN0IG11c3QgYmUgYSBwb2ludGVyIHRvIHN0cnVjdC4KSXQgd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcyBhbmQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgZmllbGQuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZVdpdGhPdmVyd3JpdGUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzI1Ij5NZXJnZVdpdGhPdmVyd3JpdGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01lcmdlV2l0aE92ZXJ3cml0ZSIgYXJpYS1sYWJlbD0iR28gdG8gTWVyZ2VXaXRoT3ZlcndyaXRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NZXJnZVdpdGhPdmVyd3JpdGUgd2lsbCBkbyB0aGUgc2FtZSBhcyBNZXJnZSBleGNlcHQgdGhhdCBub24tZW1wdHkgZHN0IGF0dHJpYnV0ZXMgd2lsbCBiZSBvdmVycmlkZGVuIGJ5Cm5vbi1lbXB0eSBzcmMgYXR0cmlidXRlIHZhbHVlcy4KRGVwcmVjYXRlZDogdXNlIE1lcmdlKOKApikgd2l0aCBXaXRoT3ZlcnJpZGUKPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhBcHBlbmRTbGljZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzNTkiPldpdGhBcHBlbmRTbGljZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aEFwcGVuZFNsaWNlIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRoQXBwZW5kU2xpY2UiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbkxhYmVsIj5hZGRlZCBpbjwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uVmVyc2lvbiI+djAuMy40PC9zcGFuPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyBXaXRoQXBwZW5kU2xpY2UoY29uZmlnICo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KTwvcHJlPgogICAgPC9kaXY+CiAgPHA+V2l0aEFwcGVuZFNsaWNlIHdpbGwgbWFrZSBtZXJnZSBhcHBlbmQgc2xpY2VzIGluc3RlYWQgb2Ygb3ZlcndyaXRpbmcgaXQuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoT3ZlcnJpZGUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzM3Ij5XaXRoT3ZlcnJpZGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhPdmVycmlkZSIgYXJpYS1sYWJlbD0iR28gdG8gV2l0aE92ZXJyaWRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhPdmVycmlkZSB3aWxsIG1ha2UgbWVyZ2Ugb3ZlcnJpZGUgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpdGggbm9uLWVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQ4Ij5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIHdpbGwgbWFrZSBtZXJnZSBvdmVycmlkZSBlbXB0eSBkc3Qgc2xpY2Ugd2l0aCBlbXB0eSBzcmMgc2xpY2UuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQyIj5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSIgYXJpYS1sYWJlbD0iR28gdG8gV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuOTwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSB3aWxsIG1ha2UgbWVyZ2Ugb3ZlcnJpZGUgbm9uIGVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpdGggZW1wdHkgc3JjIGF0dHJpYnV0ZXMgdmFsdWVzLgo8L3A+CgogIAoKICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iV2l0aFNsaWNlRGVlcENvcHkiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzY5Ij5XaXRoU2xpY2VEZWVwQ29weTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aFNsaWNlRGVlcENvcHkiIGFyaWEtbGFiZWw9IkdvIHRvIFdpdGhTbGljZURlZXBDb3B5Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTA8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhTbGljZURlZXBDb3B5IHdpbGwgbWVyZ2Ugc2xpY2UgZWxlbWVudCBvbmUgYnkgb25lIHdpdGggT3ZlcndyaXRlIGZsYWcuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDMzMCI+V2l0aFRyYW5zZm9ybWVyczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyIgYXJpYS1sYWJlbD0iR28gdG8gV2l0aFRyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzIDxhIGhyZWY9IiNUcmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvYT4pIGZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHJhbnNmb3JtZXJzIGFkZHMgdHJhbnNmb3JtZXJzIHRvIG1lcmdlLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIG1lcmdpbmcgb2Ygc29tZSB0eXBlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhUeXBlQ2hlY2siIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzY0Ij5XaXRoVHlwZUNoZWNrPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoVHlwZUNoZWNrIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRoVHlwZUNoZWNrIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aFR5cGVDaGVjayhjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHlwZUNoZWNrIHdpbGwgbWFrZSBtZXJnZSBjaGVjayB0eXBlcyB3aGlsZSBvdmVyd3JpdGluZyBpdCAobXVzdCBiZSB1c2VkIHdpdGggV2l0aE92ZXJyaWRlKS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhvdXREZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzNTQiPldpdGhvdXREZXJlZmVyZW5jZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aG91dERlcmVmZXJlbmNlIiBhcmlhLWxhYmVsPSJHbyB0byBXaXRob3V0RGVyZWZlcmVuY2UiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbkxhYmVsIj5hZGRlZCBpbjwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uVmVyc2lvbiI+djAuMy4xNTwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aG91dERlcmVmZXJlbmNlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhvdXREZXJlZmVyZW5jZSBwcmV2ZW50cyBkZXJlZmVyZW5jaW5nIHBvaW50ZXJzIHdoZW4gZXZhbHVhdGluZyB3aGV0aGVyIHRoZXkgYXJlIGVtcHR5CihpLmUuIGEgbm9uLW5pbCBwb2ludGVyIGlzIG5ldmVyIGNvbnNpZGVyZWQgZW1wdHkpLgo8L3A+CgogIAoKICAgICAgICA8L2Rpdj48L3NlY3Rpb24+CgogIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctdHlwZXMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVzSGVhZGVyIj5UeXBlcyA8YSBocmVmPSIjcGtnLXR5cGVzIiBhcmlhLWxhYmVsPSJHbyB0byBUeXBlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZXMiPjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNvbmZpZyIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMNDAiPkNvbmZpZzwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ29uZmlnIiBhcmlhLWxhYmVsPSJHbyB0byBDb25maWciPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+dHlwZSBDb25maWcgc3RydWN0IHsKPHNwYW4gaWQ9IkNvbmZpZy5UcmFuc2Zvcm1lcnMiIGRhdGEta2luZD0iZmllbGQiPglUcmFuc2Zvcm1lcnMgICAgICAgICA8YSBocmVmPSIjVHJhbnNmb3JtZXJzIj5UcmFuc2Zvcm1lcnM8L2E+Cjwvc3Bhbj48c3BhbiBpZD0iQ29uZmlnLk92ZXJ3cml0ZSIgZGF0YS1raW5kPSJmaWVsZCI+CU92ZXJ3cml0ZSAgICAgICAgICAgIDxhIGhyZWY9Ii9idWlsdGluI2Jvb2wiPmJvb2w8L2E+Cjwvc3Bhbj48c3BhbiBpZD0iQ29uZmlnLlNob3VsZE5vdERlcmVmZXJlbmNlIiBkYXRhLWtpbmQ9ImZpZWxkIj4JU2hvdWxkTm90RGVyZWZlcmVuY2UgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPjxzcGFuIGlkPSJDb25maWcuQXBwZW5kU2xpY2UiIGRhdGEta2luZD0iZmllbGQiPglBcHBlbmRTbGljZSAgICAgICAgICA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5UeXBlQ2hlY2siIGRhdGEta2luZD0iZmllbGQiPglUeXBlQ2hlY2sgICAgICAgICAgICA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPgo8L3NwYW4+CTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBjb250YWlucyBmaWx0ZXJlZCBvciB1bmV4cG9ydGVkIGZpZWxkczwvc3Bhbj4KfTwvcHJlPgogICAgPC9kaXY+CiAgCgogIAoKICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IlRyYW5zZm9ybWVycyIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMNTIiPlRyYW5zZm9ybWVyczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjVHJhbnNmb3JtZXJzIiBhcmlhLWxhYmVsPSJHbyB0byBUcmFuc2Zvcm1lcnMiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+dHlwZSBUcmFuc2Zvcm1lcnMgaW50ZXJmYWNlIHsKPHNwYW4gaWQ9IlRyYW5zZm9ybWVycy5UcmFuc2Zvcm1lciIgZGF0YS1raW5kPSJtZXRob2QiPglUcmFuc2Zvcm1lcig8YSBocmVmPSIvcmVmbGVjdCI+cmVmbGVjdDwvYT4uPGEgaHJlZj0iL3JlZmxlY3QjVHlwZSI+VHlwZTwvYT4pIGZ1bmMoZHN0LCBzcmMgPGEgaHJlZj0iL3JlZmxlY3QiPnJlZmxlY3Q8L2E+LjxhIGhyZWY9Ii9yZWZsZWN0I1ZhbHVlIj5WYWx1ZTwvYT4pIDxhIGhyZWY9Ii9idWlsdGluI2Vycm9yIj5lcnJvcjwvYT4KPC9zcGFuPn08L3ByZT4KICAgIDwvZGl2PgogIAoKICAKCiAgICA8L2Rpdj48L3NlY3Rpb24+PC9kaXY+IAoKCgoKCgogICAgICAKICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgICAKICAgICAgCiAgICAgIAogICAgICAgIAogIDxkaXYgY2xhc3M9IlVuaXRGaWxlcyBqcy11bml0RmlsZXMiPgogICAgPGgyIGNsYXNzPSJVbml0RmlsZXMtdGl0bGUiIGlkPSJzZWN0aW9uLXNvdXJjZWZpbGVzIj4KICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaW5zZXJ0X2RyaXZlX2ZpbGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICBTb3VyY2UgRmlsZXMKICAgICAgPGEgY2xhc3M9IlVuaXRGaWxlcy1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLXNvdXJjZWZpbGVzIiBhcmlhLWxhYmVsPSJHbyB0byBTb3VyY2UgRmlsZXMiPsK2PC9hPgogICAgPC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRGaWxlcy10aXRsZUxpbmsiPgogICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby90cmVlL3YwLjMuMTYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5WaWV3IGFsbCBTb3VyY2UgZmlsZXM8L2E+CiAgICA8L2Rpdj4KICAgIDxkaXY+CiAgICAgIDx1bCBjbGFzcz0iVW5pdEZpbGVzLWZpbGVMaXN0Ij48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9kb2MuZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iZG9jLmdvIj5kb2MuZ288L2E+CiAgICAgICAgICA8L2xpPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21hcC5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJtYXAuZ28iPm1hcC5nbzwvYT4KICAgICAgICAgIDwvbGk+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0ibWVyZ2UuZ28iPm1lcmdlLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnby5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJtZXJnby5nbyI+bWVyZ28uZ288L2E+CiAgICAgICAgICA8L2xpPjwvdWw+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgICAgIAogICAgICAKICAgIDwvZGl2PgogIDwvZGl2PgogIDxkaXYgaWQ9InNob3dJbnRlcm5hbC1kZXNjcmlwdGlvbiIgaGlkZGVuPiBDbGljayB0byBzaG93IGludGVybmFsIGRpcmVjdG9yaWVzLiA8L2Rpdj4KICA8ZGl2IGlkPSJoaWRlSW50ZXJuYWwtZGVzY3JpcHRpb24iIGhpZGRlbj4gQ2xpY2sgdG8gaGlkZSBpbnRlcm5hbCBkaXJlY3Rvcmllcy4gPC9kaXY+CjwvYXJ0aWNsZT4KICAgIDxmb290ZXIgY2xhc3M9ImdvLU1haW4tZm9vdGVyIj48L2Zvb3Rlcj4KICA8L21haW4+CgogICAgCiAgPGZvb3RlciBjbGFzcz0iZ28tRm9vdGVyIj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtzIj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFdoeSBHbwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVXNlIENhc2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyNjYXNlLXN0dWRpZXMiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDYXNlIFN0dWRpZXMKICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Gb290ZXItbGlua0NvbHVtbiI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9sZWFybi5nby5kZXYvIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsgZ28tRm9vdGVyLWxpbmstLXByaW1hcnkiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR2V0IFN0YXJ0ZWQKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wbGF5LmdvbGFuZy5vcmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBQbGF5Z3JvdW5kCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdG91ci5nb2xhbmcub3JnIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVG91cgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvZ28/dGFiPU5ld2VzdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFN0YWNrIE92ZXJmbG93CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBIZWxwCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldiIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9zdGQiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdGFuZGFyZCBMaWJyYXJ5CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9nb2xhbmcub3JnL3giIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdWItcmVwb3NpdG9yaWVzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldi9hYm91dCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEFib3V0IEdvIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3Byb2plY3QiIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBBYm91dAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kbC8iIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+RG93bmxvYWQ8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5CbG9nPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vaXNzdWVzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgSXNzdWUgVHJhY2tlcgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZGV2ZWwvcmVsZWFzZS5odG1sIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2Jsb2cuZ29sYW5nLm9yZy9nby1icmFuZCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEJyYW5kIEd1aWRlbGluZXMKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29uZHVjdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIENvZGUgb2YgQ29uZHVjdAogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50d2l0dGVyLmNvbS9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDb25uZWN0CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFR3aXR0ZXIKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5HaXRIdWI8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTbGFjawogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3JlZGRpdC5jb20vci9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICByL2dvbGFuZwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIE1lZXR1cAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvbGFuZ3dlZWtseS5jb20vIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR29sYW5nIFdlZWtseQogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1ib3R0b20iPgogICAgICA8aW1nIGNsYXNzPSJnby1Gb290ZXItZ29waGVyIiAgd2lkdGg9IjE0MzEiIGhlaWdodD0iOTAxIgogICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9nb3BoZXIvcGlsb3QtYnVzdC0xNDMxeDkwMS5zdmciIGFsdD0iR29waGVyIGluIGZsaWdodCBnb2dnbGVzIj4KICAgICAgPHVsIGNsYXNzPSJnby1Gb290ZXItbGlzdFJvdyI+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29weXJpZ2h0IiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5Db3B5cmlnaHQ8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90b3MiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPlRlcm1zIG9mIFNlcnZpY2U8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20vaW50bC9lbi9wb2xpY2llcy9wcml2YWN5LyIgZGF0YS1ndG1jPSJmb290ZXIgbGluayIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICAgIFByaXZhY3kgUG9saWN5CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zL3BrZ3NpdGUtZmVlZGJhY2siIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIgogICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgICBSZXBvcnQgYW4gSXNzdWUKICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iZ28tRm9vdGVyLWxpc3RJdGVtIj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLXRvZ2dsZVRoZW1lIGpzLXRvZ2dsZVRoZW1lIiBhcmlhLWxhYmVsPSJUaGVtZSBUb2dnbGUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImF1dG8iIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzZfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJTeXN0ZW0gdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImRhcmsiIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzJfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJEYXJrIHRoZW1lIj4KICAgICAgICAgICAgPGltZyBkYXRhLXZhbHVlPSJsaWdodCIgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xpZ2h0X21vZGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJMaWdodCB0aGVtZSI+CiAgICAgICAgICAgIDxwPiBUaGVtZSBUb2dnbGUgPC9wPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS10ZXh0IGdvLUZvb3Rlci1rZXlib2FyZCBqcy1vcGVuU2hvcnRjdXRzIiBhcmlhLWxhYmVsPSJTaG9yY3V0cyBNb2RhbCI+CiAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2tleWJvYXJkX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgPHA+IFNob3J0Y3V0cyBNb2RhbCA8L3A+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgICA8YSBjbGFzcz0iZ28tRm9vdGVyLWdvb2dsZUxvZ28iIGhyZWY9Imh0dHBzOi8vZ29vZ2xlLmNvbSIgdGFyZ2V0PSJfYmxhbmsicmVsPSJub29wZW5lciIKICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgIDxpbWcgY2xhc3M9ImdvLUZvb3Rlci1nb29nbGVMb2dvSW1nIiBoZWlnaHQ9IjI0IiB3aWR0aD0iNzIiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nb29nbGUtd2hpdGUuc3ZnIiBhbHQ9Ikdvb2dsZSBsb2dvIj4KICAgICAgPC9hPgogICAgPC9kaXY+CiAgPC9mb290ZXI+CgogICAgCiAgPGRpYWxvZyBpZD0ianVtcC10by1tb2RhbCIgY2xhc3M9Ikp1bXBEaWFsb2cgZ28tTW9kYWwgZ28tTW9kYWwtLW1kIGpzLW1vZGFsIj4KICAgIDxmb3JtIG1ldGhvZD0iZGlhbG9nIiBkYXRhLWdtdGM9Imp1bXAgdG8gZm9ybSIgYXJpYS1sYWJlbD0iSnVtcCB0byBJZGVudGlmaWVyIj4KICAgICAgPGRpdiBjbGFzcz0iRGlhbG9nLXRpdGxlIGdvLU1vZGFsLWhlYWRlciI+CiAgICAgICAgPGgyPkp1bXAgdG88L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctZmlsdGVyIj4KICAgICAgICA8aW5wdXQgY2xhc3M9Ikp1bXBEaWFsb2ctaW5wdXQgZ28tSW5wdXQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB0eXBlPSJ0ZXh0Ij4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctYm9keSBnby1Nb2RhbC1ib2R5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJKdW1wRGlhbG9nLWxpc3QiPjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tTW9kYWwtYWN0aW9ucyI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ28tQnV0dG9uIiBkYXRhLXRlc3QtaWQ9ImNsb3NlLWRpYWxvZyI+Q2xvc2U8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CiAgPC9kaWFsb2c+CgogIDxkaWFsb2cgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZyBnby1Nb2RhbCBnby1Nb2RhbC0tc20ganMtbW9kYWwiPgogICAgPGZvcm0gbWV0aG9kPSJkaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJnby1Nb2RhbC1oZWFkZXIiPgogICAgICAgIDxoMj5LZXlib2FyZCBzaG9ydGN1dHM8L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWJvZHkiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4/PC9zdHJvbmc+PC90ZD48dGQ+IDogVGhpcyBtZW51PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4vPC9zdHJvbmc+PC90ZD48dGQ+IDogU2VhcmNoIHNpdGU8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJTaG9ydGN1dHNEaWFsb2cta2V5Ij4KICAgICAgICAgICAgICA8c3Ryb25nPmY8L3N0cm9uZz4gb3IgPHN0cm9uZz5GPC9zdHJvbmc+PC90ZD48dGQ+IDogSnVtcCB0bzwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZy1rZXkiPjxzdHJvbmc+eTwvc3Ryb25nPiBvciA8c3Ryb25nPlk8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgIDx0ZD4gOiBDYW5vbmljYWwgVVJMPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWFjdGlvbnMiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiIgZGF0YS10ZXN0LWlkPSJjbG9zZS1kaWFsb2ciPkNsb3NlPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogIDwvZGlhbG9nPgoKICAgIAogICAgICA8c2VjdGlvbiBjbGFzcz0iQ29va2llLW5vdGljZSBqcy1jb29raWVOb3RpY2UiPgogICAgICAgIDxkaXY+Z28uZGV2IHVzZXMgY29va2llcyBmcm9tIEdvb2dsZSB0byBkZWxpdmVyIGFuZCBlbmhhbmNlIHRoZSBxdWFsaXR5IG9mIGl0cyBzZXJ2aWNlcyBhbmQgdG8KICAgICAgICBhbmFseXplIHRyYWZmaWMuIDxhIHRhcmdldD1fYmxhbmsgaHJlZj0iaHR0cHM6Ly9wb2xpY2llcy5nb29nbGUuY29tL3RlY2hub2xvZ2llcy9jb29raWVzIj5MZWFybiBtb3JlLjwvYT48L2Rpdj4KICAgICAgICA8ZGl2PjxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiI+T2theTwvYnV0dG9uPjwvZGl2PgogICAgICA8L3NlY3Rpb24+CiAgICAKICAgIAogICAgICA8c2NyaXB0PgogICAgICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBpZiB0aGUgcXVlcnlTZWxlY3RvciBjYW7igJl0IGZpbmQgdGhlIGVsZW1lbnQKICAgICAgICBjb25zdCBndG1JZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1ndG1JRCcpLmRhdGFzZXQuZ3RtaWQ7CiAgICAgICAgaWYgKCFndG1JZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb29nbGUgVGFnIE1hbmFnZXIgSUQgbm90IGZvdW5kJyk7CiAgICAgICAgfQogICAgICAgIGxvYWRTY3JpcHQoYGh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0ke2d0bUlkfWApOwogICAgICA8L3NjcmlwdD4KICAgICAgPG5vc2NyaXB0PgogICAgICAgIDxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1XOE1WUVhHIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+CiAgICAgICAgPC9pZnJhbWU+CiAgICAgIDwvbm9zY3JpcHQ+CiAgICAKICAgIAogIAogIDxkaXYgY2xhc3M9ImpzLWNhbm9uaWNhbFVSTFBhdGgiIGRhdGEtY2Fub25pY2FsLXVybC1wYXRoPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvQHYwLjMuMTYiIGhpZGRlbj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJqcy1wbGF5Z3JvdW5kVmFycyIgZGF0YS1tb2R1bGVwYXRoPSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIGRhdGEtdmVyc2lvbj0idjAuMy4xNiIgaGlkZGVuPjwvZGl2PgogIDxzY3JpcHQ+CiAgICBsb2FkU2NyaXB0KCcvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLmpzJykKICA8L3NjcmlwdD4KCiAgPHNjcmlwdD4KICAgIGxvYWRTY3JpcHQoJy9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0LmpzJykKICA8L3NjcmlwdD4KCiAgPC9ib2R5Pgo8L2h0bWw+Cg==
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.12.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4295422480232731104'
      X-Datadog-Parent-Id:
      - '765197450292267042'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '51'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 19:18:00 GMT
      Expires:
      - Wed, 17 Jan 2024 22:18:00 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '4744'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.12","Time":"2021-03-03T22:10:52Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '928887184189903684'
      X-Datadog-Parent-Id:
      - '3360972722389612703'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:04 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.16.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2476551004327762284'
      X-Datadog-Parent-Id:
      - '725627995776163355'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '191'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:36:44 GMT
      Expires:
      - Wed, 17 Jan 2024 21:36:44 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '7220'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.16","Time":"2023-04-02T14:27:58Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v0.3.16","Hash":"14fe2b165b83359196f820886a2b24f2771729e9"}}'
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1713816839468490784'
      X-Datadog-Parent-Id:
      - '1111681466832814038'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:04 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.3.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4104559799214280576'
      X-Datadog-Parent-Id:
      - '2296489782118943296'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:04 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:04 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.3","Time":"2018-04-02T13:55:43Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1099069077098412223'
      X-Datadog-Parent-Id:
      - '2257082631365424597'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:04 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.15.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4174243997152053773'
      X-Datadog-Parent-Id:
      - '2953451094729118761'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '191'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 17:40:24 GMT
      Expires:
      - Wed, 17 Jan 2024 20:40:24 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '10600'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.15","Time":"2023-03-24T09:53:52Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v0.3.15","Hash":"fb3c08209137e2760d63653c9098745d157e2986"}}'
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3205896391626606726'
      X-Datadog-Parent-Id:
      - '1888213132972885124'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:04 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.14.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1848010727459651258'
      X-Datadog-Parent-Id:
      - '4033672671869529018'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '191'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:04 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:04 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.14","Time":"2023-03-15T22:59:33Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v0.3.14","Hash":"d19834bb682056bd1eec5dfe6d9ec9bd9d6ba58f"}}'
  recorded_at: Wed, 17 Jan 2024 20:37:04 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4323592579449777245'
      X-Datadog-Parent-Id:
      - '1961208226108915146'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:05 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:05 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.10.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2895536650139126660'
      X-Datadog-Parent-Id:
      - '493781647711366893'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '51'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:05 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:05 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.10","Time":"2020-07-18T11:18:36Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:05 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4053100293963964247'
      X-Datadog-Parent-Id:
      - '616252464810307135'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:05 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:05 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.9.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '715580141107507170'
      X-Datadog-Parent-Id:
      - '2160351579505798440'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 20:04:35 GMT
      Expires:
      - Wed, 17 Jan 2024 23:04:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '1950'
      Last-Modified:
      - Tue, 24 Mar 2020 21:33:08 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
  recorded_at: Wed, 17 Jan 2024 20:37:05 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.11.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3205984511235032131'
      X-Datadog-Parent-Id:
      - '488596837320937947'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:14:02 GMT
      Expires:
      - Wed, 17 Jan 2024 21:14:02 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '8583'
      Last-Modified:
      - Tue, 11 Aug 2020 19:51:41 GMT
      Etag:
      - '"31bbd3c9d8b390093bf1f10994207cbf5c158797283911af5dad728a344e3af9"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v2 v2.3.0
  recorded_at: Wed, 17 Jan 2024 20:37:05 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v2?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1046571519192580143'
      X-Datadog-Parent-Id:
      - '4202637626046382101'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 17 Jan 2024 20:37:06 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v2 git https://gopkg.in/yaml.v2">
        <meta name="go-source" content="gopkg.in/yaml.v2 _ https://github.com/go-yaml/yaml/tree/v2.4.0{/dir} https://github.com/go-yaml/yaml/blob/v2.4.0{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v2
        </body>
        </html>
    adapter_metadata:
      vcr_decompressed: gzip
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.8.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3483433760991357047'
      X-Datadog-Parent-Id:
      - '683694547271542996'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:21:05 GMT
      Expires:
      - Wed, 17 Jan 2024 21:21:05 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '8161'
      Last-Modified:
      - Thu, 03 Oct 2019 11:24:54 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.6.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3086279531106539138'
      X-Datadog-Parent-Id:
      - '582760672176693477'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 19:26:08 GMT
      Expires:
      - Wed, 17 Jan 2024 22:26:08 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '4258'
      Last-Modified:
      - Thu, 11 Apr 2019 14:57:29 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.4.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '235540073207351814'
      X-Datadog-Parent-Id:
      - '267062170833670205'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 19:33:40 GMT
      Expires:
      - Wed, 17 Jan 2024 22:33:40 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '3806'
      Last-Modified:
      - Thu, 11 Apr 2019 15:08:21 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4168883643982180199'
      X-Datadog-Parent-Id:
      - '3843470594185926624'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 18:52:49 GMT
      Expires:
      - Wed, 17 Jan 2024 21:52:49 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '6257'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3846280933611276505'
      X-Datadog-Parent-Id:
      - '158106632756685566'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 17 Jan 2024 20:37:06 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    adapter_metadata:
      vcr_decompressed: gzip
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.7.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2846629854417530129'
      X-Datadog-Parent-Id:
      - '3620781002720331455'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 17:45:18 GMT
      Expires:
      - Wed, 17 Jan 2024 20:45:18 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '10308'
      Last-Modified:
      - Thu, 11 Apr 2019 18:51:53 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.5.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4311368222594938799'
      X-Datadog-Parent-Id:
      - '2256527960408351092'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 20:09:56 GMT
      Expires:
      - Wed, 17 Jan 2024 23:09:56 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '1630'
      Last-Modified:
      - Tue, 23 Apr 2019 21:16:57 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.13.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2672284420426772960'
      X-Datadog-Parent-Id:
      - '1170054673735088916'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 17:39:00 GMT
      Expires:
      - Wed, 17 Jan 2024 20:39:00 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '10686'
      Last-Modified:
      - Wed, 25 May 2022 20:16:41 GMT
      Etag:
      - '"ca5731139deb241ecd04a991864e74e16cc922493ee217b59ae6c5ae309a07ac"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.0
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.12.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '764665115373329484'
      X-Datadog-Parent-Id:
      - '2353036811869556799'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 20:10:34 GMT
      Expires:
      - Wed, 17 Jan 2024 23:10:34 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '1592'
      Last-Modified:
      - Tue, 09 Mar 2021 21:44:30 GMT
      Etag:
      - '"31bbd3c9d8b390093bf1f10994207cbf5c158797283911af5dad728a344e3af9"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v2 v2.3.0
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.16.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '214463007033320357'
      X-Datadog-Parent-Id:
      - '4141758389516144775'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 20:18:02 GMT
      Expires:
      - Wed, 17 Jan 2024 23:18:02 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '1144'
      Last-Modified:
      - Sat, 27 May 2023 08:01:31 GMT
      Etag:
      - '"a002f9d36d613da1f750a66a37de22ab8f6ffe8865f30423913930c67428a7dc"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.3.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4475375269755864702'
      X-Datadog-Parent-Id:
      - '188645114378895765'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '32'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:07 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Expires:
      - Wed, 17 Jan 2024 23:37:07 GMT
      Last-Modified:
      - Fri, 10 May 2019 10:34:51 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.15.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2108991653244325330'
      X-Datadog-Parent-Id:
      - '4385565623661230850'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 17:51:17 GMT
      Expires:
      - Wed, 17 Jan 2024 20:51:17 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '9950'
      Last-Modified:
      - Fri, 24 Mar 2023 09:58:12 GMT
      Etag:
      - '"a002f9d36d613da1f750a66a37de22ab8f6ffe8865f30423913930c67428a7dc"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
  recorded_at: Wed, 17 Jan 2024 20:37:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.14.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3401514803419903357'
      X-Datadog-Parent-Id:
      - '1824549122710088523'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 20:37:07 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:07 GMT
      Cache-Control:
      - public, max-age=10800
      Last-Modified:
      - Wed, 15 Mar 2023 23:01:31 GMT
      Etag:
      - '"a002f9d36d613da1f750a66a37de22ab8f6ffe8865f30423913930c67428a7dc"'
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
  recorded_at: Wed, 17 Jan 2024 20:37:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.10.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2483934539419478785'
      X-Datadog-Parent-Id:
      - '2191835968140550991'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 20:12:38 GMT
      Expires:
      - Wed, 17 Jan 2024 23:12:38 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '1469'
      Last-Modified:
      - Sat, 18 Jul 2020 14:59:43 GMT
      Etag:
      - '"31bbd3c9d8b390093bf1f10994207cbf5c158797283911af5dad728a344e3af9"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v2 v2.3.0
  recorded_at: Wed, 17 Jan 2024 20:37:07 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '303962792713315574'
      X-Datadog-Parent-Id:
      - '4551779589270729331'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:07 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/list
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '477382408880600212'
      X-Datadog-Parent-Id:
      - '1893328523195901222'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '49'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:07 GMT
      Expires:
      - Wed, 17 Jan 2024 20:38:07 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        v0.3.9
        v0.3.8
        v0.3.6
        v0.3.4
        v0.3.7
        v0.3.5
        v0.3.3
  recorded_at: Wed, 17 Jan 2024 20:37:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2554926763615405669'
      X-Datadog-Parent-Id:
      - '1016815352607966767'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:10 GMT
      Expires:
      - Wed, 17 Jan 2024 20:38:10 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
  recorded_at: Wed, 17 Jan 2024 20:37:10 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1780650143215216216'
      X-Datadog-Parent-Id:
      - '932760243728025036'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 17 Jan 2024 20:37:10 GMT
      Expires:
      - Wed, 17 Jan 2024 20:38:10 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
  recorded_at: Wed, 17 Jan 2024 20:37:10 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.9.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1633034390828731878'
      X-Datadog-Parent-Id:
      - '483248815511977637'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:11 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.9","Time":"2020-03-24T21:25:48Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3393998380063847419'
      X-Datadog-Parent-Id:
      - '3596361212223284639'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.8.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '199310497264510923'
      X-Datadog-Parent-Id:
      - '160812952628973821'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:11 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.8","Time":"2019-10-03T07:39:17Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '450790910938747104'
      X-Datadog-Parent-Id:
      - '2387706493628438455'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.6.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4501180976690711353'
      X-Datadog-Parent-Id:
      - '2629606554895702896'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:11 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.6","Time":"2018-07-30T21:26:40Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1471845462415138093'
      X-Datadog-Parent-Id:
      - '2278037354337373954'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.4.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2065951544700573709'
      X-Datadog-Parent-Id:
      - '1571177466827206139'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:11 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.4","Time":"2018-04-04T21:29:33Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1581532040970743705'
      X-Datadog-Parent-Id:
      - '916322936228935752'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.7.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '992002393535659666'
      X-Datadog-Parent-Id:
      - '2983248189778974863'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:11 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:11 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.7","Time":"2019-01-23T23:28:27Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '746646244136437646'
      X-Datadog-Parent-Id:
      - '58800721989025450'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:11 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.5.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '231677381374122278'
      X-Datadog-Parent-Id:
      - '2022208882896327924'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:12 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.5","Time":"2018-06-08T14:01:56Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1774358844779010794'
      X-Datadog-Parent-Id:
      - '3909656705286518083'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.3.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '843592762793256993'
      X-Datadog-Parent-Id:
      - '2039428624365888819'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Expires:
      - Wed, 17 Jan 2024 23:37:12 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.3","Time":"2018-04-02T13:55:43Z"}'
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4069943922569847402'
      X-Datadog-Parent-Id:
      - '275355746321058390'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.9.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '316105724683761821'
      X-Datadog-Parent-Id:
      - '1119215377858635369'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Wed, 17 Jan 2024 23:37:12 GMT
      Last-Modified:
      - Tue, 24 Mar 2020 22:10:52 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.8.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1210056899143932461'
      X-Datadog-Parent-Id:
      - '740411559350029130'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Wed, 17 Jan 2024 23:37:12 GMT
      Last-Modified:
      - Thu, 03 Oct 2019 16:43:24 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.6.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '917727772282696857'
      X-Datadog-Parent-Id:
      - '3912720328719992818'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:12 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Wed, 17 Jan 2024 23:37:12 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:55 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.4.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '394166127265348538'
      X-Datadog-Parent-Id:
      - '3983689183026773366'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:13 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Wed, 17 Jan 2024 23:37:13 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:44 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
  recorded_at: Wed, 17 Jan 2024 20:37:12 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.7.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2342855045951760297'
      X-Datadog-Parent-Id:
      - '1067717516946544800'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '33'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 17 Jan 2024 17:49:43 GMT
      Expires:
      - Wed, 17 Jan 2024 20:49:43 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '10050'
      Last-Modified:
      - Tue, 16 Jul 2019 13:43:42 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
  recorded_at: Wed, 17 Jan 2024 20:37:13 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.5.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2487762423571526278'
      X-Datadog-Parent-Id:
      - '1075388521693619177'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:13 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Wed, 17 Jan 2024 23:37:13 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:50 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
  recorded_at: Wed, 17 Jan 2024 20:37:13 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.3.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2443086793487683945'
      X-Datadog-Parent-Id:
      - '3800421161275720415'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 17 Jan 2024 20:37:13 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Wed, 17 Jan 2024 23:37:13 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:39 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
  recorded_at: Wed, 17 Jan 2024 20:37:13 GMT
recorded_with: VCR 6.2.0
