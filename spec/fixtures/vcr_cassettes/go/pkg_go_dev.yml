---
http_interactions:
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron/v3
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1253558958630041954'
      X-Datadog-Parent-Id:
      - '2870645639325275003'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:20 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:20 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/list
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '25'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 19 Jul 2023 22:32:20 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:20 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        v3.0.0-rc1
        v3.0.1
        v3.0.0
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:20 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1141403478999801574'
      X-Datadog-Parent-Id:
      - '4540783494065023602'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:32:20 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:20 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v3.0.1","Time":"2020-01-04T01:05:08Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:20 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.1.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '42'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 19:39:55 GMT
      Expires:
      - Wed, 19 Jul 2023 22:39:55 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '10345'
      Last-Modified:
      - Sat, 04 Jan 2020 01:34:27 GMT
      Etag:
      - '"f895601ed42554966d2979f56420f655966b079254d92205b53828422298244f"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/robfig/cron/v3

        go 1.12
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:20 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.0-rc1.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '54'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:49:16 GMT
      Expires:
      - Wed, 19 Jul 2023 23:49:16 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '6184'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v3.0.0-rc1","Time":"2019-05-03T02:07:42Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:20 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron/v3
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3220564884248882355'
      X-Datadog-Parent-Id:
      - '2834396662957430597'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:20 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGRhdGEtbGF5b3V0PSJyZXNwb25zaXZlIiBkYXRhLWxvY2FsPSIiPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB3aW5kb3cuX19lcnI9ZnVuY3Rpb24gZihlKXtmLnA9Zi5wfHxbXTtmLnAucHVzaChlKX0pOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0PgogICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5jb29raWUubWF0Y2goL3ByZWZlcnMtY29sb3Itc2NoZW1lPShsaWdodHxkYXJrfGF1dG8pLyk/LlsxXQogICAgICAgIGlmICh0aGVtZSkgewogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLnNldEF0dHJpYnV0ZSgnZGF0YS10aGVtZScsIHRoZW1lKTsKICAgICAgICB9CiAgICAgIH0oKSkKICAgIDwvc2NyaXB0PgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDxtZXRhIG5hbWU9IkRlc2NyaXB0aW9uIiBjb250ZW50PSJQYWNrYWdlIGNyb24gaW1wbGVtZW50cyBhIGNyb24gc3BlYyBwYXJzZXIgYW5kIGpvYiBydW5uZXIuIj4KICAgIAogICAgPG1ldGEgY2xhc3M9ImpzLWd0bUlEIiBkYXRhLWd0bWlkPSJHVE0tVzhNVlFYRyI+CiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9zdGF0aWMvc2hhcmVkL2ljb24vZmF2aWNvbi5pY28iPgogICAgCiAgCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjMiPgogIAoKICAgIDxsaW5rIGhyZWY9Ii9zdGF0aWMvZnJvbnRlbmQvZnJvbnRlbmQubWluLmNzcz92ZXJzaW9uPXByb2QtZnJvbnRlbmQtMDAwNzktcGV4IiByZWw9InN0eWxlc2hlZXQiPgogICAgCiAgPHRpdGxlPmNyb24gcGFja2FnZSAtIGdpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjMgLSBHbyBQYWNrYWdlczwvdGl0bGU+CgogICAgCiAgPGxpbmsgaHJlZj0iL3N0YXRpYy9mcm9udGVuZC91bml0L3VuaXQubWluLmNzcz92ZXJzaW9uPXByb2QtZnJvbnRlbmQtMDAwNzktcGV4IiByZWw9InN0eWxlc2hlZXQiPgogIAogIDxsaW5rIGhyZWY9Ii9zdGF0aWMvZnJvbnRlbmQvdW5pdC9tYWluL21haW4ubWluLmNzcz92ZXJzaW9uPXByb2QtZnJvbnRlbmQtMDAwNzktcGV4IiByZWw9InN0eWxlc2hlZXQiPgoKCiAgPC9oZWFkPgogIDxib2R5PgogICAgCiAgICA8c2NyaXB0PgogICAgICBmdW5jdGlvbiBsb2FkU2NyaXB0KHNyYywgbW9kID0gdHJ1ZSkgewogICAgICAgIGxldCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICAgICAgcy5zcmMgPSBzcmM7CiAgICAgICAgaWYgKG1vZCkgewogICAgICAgICAgcy50eXBlID0gJ21vZHVsZSc7CiAgICAgICAgICBzLmFzeW5jID0gdHJ1ZTsKICAgICAgICAgIHMuZGVmZXIgPSB0cnVlCiAgICAgICAgfQogICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocyk7CiAgICAgIH0KICAgICAgbG9hZFNjcmlwdCgiL3RoaXJkX3BhcnR5L2RpYWxvZy1wb2x5ZmlsbC9kaWFsb2ctcG9seWZpbGwuanMiLCBmYWxzZSkKICAgICAgbG9hZFNjcmlwdCgiL3N0YXRpYy9mcm9udGVuZC9mcm9udGVuZC5qcyIpOwogICAgPC9zY3JpcHQ+CiAgICAKICA8aGVhZGVyIGNsYXNzPSJnby1IZWFkZXIgZ28tSGVhZGVyLS1mdWxsIGpzLXNpdGVIZWFkZXIiPgogICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLWlubmVyIGdvLUhlYWRlci1pbm5lci0tZGFyayI+CiAgICAgIDxuYXYgY2xhc3M9ImdvLUhlYWRlci1uYXYiPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2LyIgY2xhc3M9ImpzLWhlYWRlckxvZ28iIGRhdGEtZ3RtYz0ibmF2IGxpbmsiCiAgICAgICAgICAgIGRhdGEtdGVzdC1pZD0iZ28taGVhZGVyLWxvZ28tbGluayI+CiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1IZWFkZXItbG9nbyIgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL2dvLXdoaXRlLnN2ZyIgYWx0PSJHbyI+CiAgICAgICAgPC9hPgogICAgICAgIDxkaXYgY2xhc3M9ImdvLUhlYWRlci1yaWdodENvbnRlbnQiPgogICAgICAgICAgCjxkaXYgY2xhc3M9ImdvLVNlYXJjaEZvcm0ganMtc2VhcmNoRm9ybSI+CiAgPGZvcm0KICAgIGNsYXNzPSJnby1JbnB1dEdyb3VwIGdvLVNob3J0Y3V0S2V5IGdvLVNlYXJjaEZvcm0tZm9ybSIKICAgIGFjdGlvbj0iL3NlYXJjaCIKICAgIGRhdGEtc2hvcnRjdXQ9Ii8iCiAgICBkYXRhLXNob3J0Y3V0LWFsdD0ic2VhcmNoIgogICAgZGF0YS1ndG1jPSJzZWFyY2ggZm9ybSIKICAgIGFyaWEtbGFiZWw9IlNlYXJjaCBmb3IgYSBwYWNrYWdlIgogICAgcm9sZT0ic2VhcmNoIgogID4KICAgIDxpbnB1dCBuYW1lPSJxIiBjbGFzcz0iZ28tSW5wdXQganMtc2VhcmNoRm9jdXMiIGFyaWEtbGFiZWw9IlNlYXJjaCBmb3IgYSBwYWNrYWdlIiB0eXBlPSJzZWFyY2giCiAgICAgICAgYXV0b2NhcGl0YWxpemU9Im9mZiIgYXV0b2NvbXBsZXRlPSJvZmYiIGF1dG9jb3JyZWN0PSJvZmYiIHNwZWxsY2hlY2s9ImZhbHNlIgogICAgICAgIHBsYWNlaG9sZGVyPSJTZWFyY2ggcGFja2FnZXMgb3Igc3ltYm9scyIKICAgICAgICB2YWx1ZT0iIiAvPgogICAgPGlucHV0IG5hbWU9Im0iIHZhbHVlPSIiIGhpZGRlbj4KICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWludmVydGVkIiBhcmlhLWxhYmVsPSJTdWJtaXQgc2VhcmNoIj4KICAgICAgPGltZwogICAgICAgIGNsYXNzPSJnby1JY29uIgogICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgd2lkdGg9IjI0IgogICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9zZWFyY2hfZ21fZ3JleV8yNGRwLnN2ZyIKICAgICAgICBhbHQ9IiIKICAgICAgLz4KICAgIDwvYnV0dG9uPgogIDwvZm9ybT4KICA8YnV0dG9uIGNsYXNzPSJnby1TZWFyY2hGb3JtLWV4cGFuZFNlYXJjaCBqcy1leHBhbmRTZWFyY2giIGRhdGEtZ3RtYz0ibmF2IGJ1dHRvbiIKICAgICAgYXJpYS1sYWJlbD0iT3BlbiBzZWFyY2giIGRhdGEtdGVzdC1pZD0iZXhwYW5kLXNlYXJjaCI+CiAgICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL3NlYXJjaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CgogIDwvYnV0dG9uPgo8L2Rpdj4KCiAgICAgICAgICA8dWwgY2xhc3M9ImdvLUhlYWRlci1tZW51Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJqcy1kZXNrdG9wLW1lbnUtaG92ZXIiIGhyZWY9IiMiIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPgogICAgICAgICAgICAgICAgV2h5IEdvCiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hcnJvd19kcm9wX2Rvd25fZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJzdWJtZW51IGRyb3Bkb3duIGljb24iPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51IGdvLUhlYWRlci1zdWJtZW51LS13aHkganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjY2FzZS1zdHVkaWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPkNhc2UgU3R1ZGllczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8cD5Db21tb24gcHJvYmxlbXMgY29tcGFuaWVzIHNvbHZlIHdpdGggR288L3A+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI3VzZS1jYXNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5Vc2UgQ2FzZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHA+U3RvcmllcyBhYm91dCBob3cgYW5kIHdoeSBjb21wYW5pZXMgdXNlIEdvPC9wPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NlY3VyaXR5L3BvbGljeS8iPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+U2VjdXJpdHkgUG9saWN5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxwPkhvdyBHbyBjYW4gaGVscCBrZWVwIHlvdSBzZWN1cmUgYnkgZGVmYXVsdDwvcD4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1tZW51SXRlbSI+CiAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvbGVhcm4vIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj5MZWFybjwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJqcy1kZXNrdG9wLW1lbnUtaG92ZXIiIGhyZWY9IiMiIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPgogICAgICAgICAgICAgICAgRG9jcwogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYXJyb3dfZHJvcF9kb3duX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0ic3VibWVudSBkcm9wZG93biBpY29uIj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItc3VibWVudSBnby1IZWFkZXItc3VibWVudS0tZG9jcyBqcy1kZXNrdG9wLXN1Ym1lbnUtaG92ZXIiIGFyaWEtbGFiZWw9InN1Ym1lbnUiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9lZmZlY3RpdmVfZ28iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RWZmZWN0aXZlIEdvPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPlRpcHMgZm9yIHdyaXRpbmcgY2xlYXIsIHBlcmZvcm1hbnQsIGFuZCBpZGlvbWF0aWMgR28gY29kZTwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jLyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HbyBVc2VyIE1hbnVhbDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5BIGNvbXBsZXRlIGludHJvZHVjdGlvbiB0byBidWlsZGluZyBzb2Z0d2FyZSB3aXRoIEdvPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3BrZy5nby5kZXYvc3RkIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlN0YW5kYXJkIGxpYnJhcnk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+UmVmZXJlbmNlIGRvY3VtZW50YXRpb24gZm9yIEdvJ3Mgc3RhbmRhcmQgbGlicmFyeTwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2RldmVsL3JlbGVhc2UiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVsZWFzZSBOb3Rlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5MZWFybiB3aGF0J3MgbmV3IGluIGVhY2ggR28gcmVsZWFzZTwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0gZ28tSGVhZGVyLW1lbnVJdGVtLS1hY3RpdmUiPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPlBhY2thZ2VzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1tZW51SXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImpzLWRlc2t0b3AtbWVudS1ob3ZlciIgaHJlZj0iIyIgZGF0YS1ndG1jPSJuYXYgbGluayI+CiAgICAgICAgICAgICAgICBDb21tdW5pdHkKICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Fycm93X2Ryb3BfZG93bl9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9InN1Ym1lbnUgZHJvcGRvd24gaWNvbiI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnUgZ28tSGVhZGVyLXN1Ym1lbnUtLWNvbW11bml0eSBqcy1kZXNrdG9wLXN1Ym1lbnUtaG92ZXIiIGFyaWEtbGFiZWw9InN1Ym1lbnUiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3RhbGtzLyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5SZWNvcmRlZCBUYWxrczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5WaWRlb3MgZnJvbSBwcmlvciBldmVudHM8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm1lZXR1cC5jb20vcHJvL2dvIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1lZXR1cHM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5NZWV0IG90aGVyIGxvY2FsIEdvIGRldmVsb3BlcnM8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vd2lraS9Db25mZXJlbmNlcyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db25mZXJlbmNlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9sYXVuY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPkxlYXJuIGFuZCBuZXR3b3JrIHdpdGggR28gZGV2ZWxvcGVycyBmcm9tIGFyb3VuZCB0aGUgd29ybGQ8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2Jsb2ciPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R28gYmxvZzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5UaGUgR28gcHJvamVjdCdzIG9mZmljaWFsIGJsb2cuPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9oZWxwIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvIHByb2plY3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+R2V0IGhlbHAgYW5kIHN0YXkgaW5mb3JtZWQgZnJvbSBHbzwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgR2V0IGNvbm5lY3RlZAogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+PC9wPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvZ29sYW5nLW51dHMiPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9nb29nbGUtZ3JvdXBzLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmciPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9naXRodWIuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9nb2xhbmciPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC90d2l0dGVyLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vd3d3LnJlZGRpdC5jb20vci9nb2xhbmcvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvcmVkZGl0LnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vaW52aXRlLnNsYWNrLmdvbGFuZ2JyaWRnZS5vcmcvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvc2xhY2suc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9jb2xsZWN0aXZlcy9nbyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3N0YWNrLW92ZXJmbG93LnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUhlYWRlci1uYXZPcGVuIGpzLWhlYWRlck1lbnVCdXR0b24gZ28tSGVhZGVyLW5hdk9wZW4tLXdoaXRlIiBkYXRhLWd0bWM9Im5hdiBidXR0b24iIGFyaWEtbGFiZWw9Ik9wZW4gbmF2aWdhdGlvbiI+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9uYXY+CiAgICA8L2Rpdj4KICA8L2hlYWRlcj4KICA8YXNpZGUgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIganMtaGVhZGVyIj4KICAgIDxuYXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbmF2Ij4KICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2LyI+CiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxvZ28iIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nby1ibHVlLnN2ZyIgYWx0PSJHby4iPgogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDx1bCBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0Ij4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSBqcy1tb2JpbGUtc3VibmF2LXRyaWdnZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1oYXNTdWJuYXYiPgogICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICA8c3Bhbj5XaHkgR288L3NwYW4+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX25leHRfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBnby1OYXZpZ2F0aW9uRHJhd2VyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9iZWZvcmVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgICAgV2h5IEdvCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3QiPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyNjYXNlLXN0dWRpZXMiPgogICAgICAgICAgICAgICAgICAgICAgQ2FzZSBTdHVkaWVzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyN1c2UtY2FzZXMiPgogICAgICAgICAgICAgICAgICAgICAgVXNlIENhc2VzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NlY3VyaXR5L3BvbGljeS8iPgogICAgICAgICAgICAgICAgICAgICAgU2VjdXJpdHkgUG9saWN5CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvbGVhcm4vIj5MZWFybjwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0ganMtbW9iaWxlLXN1Ym5hdi10cmlnZ2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItaGFzU3VibmF2Ij4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgPHNwYW4+RG9jczwvc3Bhbj4KICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfbmV4dF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICA8L2E+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbmF2Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfYmVmb3JlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgRG9jcwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0Ij4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZWZmZWN0aXZlX2dvIj4KICAgICAgICAgICAgICAgICAgICAgIEVmZmVjdGl2ZSBHbwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvIj4KICAgICAgICAgICAgICAgICAgICAgIEdvIFVzZXIgTWFudWFsCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldi9zdGQiPgogICAgICAgICAgICAgICAgICAgICAgU3RhbmRhcmQgbGlicmFyeQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZGV2ZWwvcmVsZWFzZSI+CiAgICAgICAgICAgICAgICAgICAgICBSZWxlYXNlIE5vdGVzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0tLWFjdGl2ZSI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iPlBhY2thZ2VzPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSBqcy1tb2JpbGUtc3VibmF2LXRyaWdnZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1oYXNTdWJuYXYiPgogICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICA8c3Bhbj5Db21tdW5pdHk8L3NwYW4+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX25leHRfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbmF2Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX2JlZm9yZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIENvbW11bml0eQogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0Ij4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90YWxrcy8iPgogICAgICAgICAgICAgICAgICAgICAgUmVjb3JkZWQgVGFsa3MKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubWVldHVwLmNvbS9wcm8vZ28iPgogICAgICAgICAgICAgICAgICAgICAgTWVldHVwcwogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby93aWtpL0NvbmZlcmVuY2VzIj4KICAgICAgICAgICAgICAgICAgICAgIENvbmZlcmVuY2VzCiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9sYXVuY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9ibG9nIj4KICAgICAgICAgICAgICAgICAgICAgIEdvIGJsb2cKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICBHbyBwcm9qZWN0CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXY+R2V0IGNvbm5lY3RlZDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9nL2dvbGFuZy1udXRzIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ29vZ2xlLWdyb3Vwcy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmciPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9naXRodWIuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2dvbGFuZyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3R3aXR0ZXIuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL3d3dy5yZWRkaXQuY29tL3IvZ29sYW5nLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3JlZGRpdC5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vaW52aXRlLnNsYWNrLmdvbGFuZ2JyaWRnZS5vcmcvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvc2xhY2suc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2NvbGxlY3RpdmVzL2dvIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvc3RhY2stb3ZlcmZsb3cuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgPC91bD4KICAgIDwvbmF2PgogIDwvYXNpZGU+CiAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1zY3JpbSBqcy1zY3JpbSIgcm9sZT0icHJlc2VudGF0aW9uIj48L2Rpdj4KCiAgICAKICA8bWFpbiBjbGFzcz0iZ28tTWFpbiI+CiAgICA8ZGl2IGNsYXNzPSJnby1NYWluLWJhbm5lciIgcm9sZT0iYWxlcnQiPjwvZGl2PgogICAgPGhlYWRlciBjbGFzcz0iZ28tTWFpbi1oZWFkZXIganMtbWFpbkhlYWRlciI+CiAgCiAgCiAgPG5hdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJCcmVhZGNydW1iIGdvLUJyZWFkY3J1bWIiIGFyaWEtbGFiZWw9IkJyZWFkY3J1bWIiIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1icmVhZGNydW1iIj4KICAgIDxvbD4KICAgICAgCiAgICAgICAgCiAgICAgICAgICA8bGkgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWJyZWFkY3J1bWJJdGVtIj4KICAgICAgICAgICAgPGEgaHJlZj0iLyIgZGF0YS1ndG1jPSJicmVhZGNydW1iIGxpbmsiPkRpc2NvdmVyIFBhY2thZ2VzPC9hPgogICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICA8bGk+CiAgICAgICAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi92M0B2My4wLjEiIGRhdGEtZ3RtYz0iYnJlYWRjcnVtYiBsaW5rIiBhcmlhLWN1cnJlbnQ9ImxvY2F0aW9uIgogICAgICAgICAgICAgIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1icmVhZGNydW1iQ3VycmVudCI+CiAgICAgICAgICAgIGdpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjMKICAgICAgICAgIDwvYT4KICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWlubGluZSBnby1DbGlwYm9hcmQganMtY2xpcGJvYXJkIgogICAgICAgICAgICAgIHRpdGxlPSJDb3B5IHBhdGggdG8gY2xpcGJvYXJkLiYjMTA7JiMxMDtnaXRodWIuY29tL3JvYmZpZy9jcm9uL3YzIgogICAgICAgICAgICAgIGFyaWEtbGFiZWw9IkNvcHkgUGF0aCB0byBDbGlwYm9hcmQiCiAgICAgICAgICAgICAgZGF0YS10by1jb3B5PSJnaXRodWIuY29tL3JvYmZpZy9jcm9uL3YzIgogICAgICAgICAgICAgIGRhdGEtZ3RtYz0iYnJlYWRjcnVtYnMgYnV0dG9uIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQiCiAgICAgICAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgICAgICAgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NvbnRlbnRfY29weV9nbV9ncmV5XzI0ZHAuc3ZnIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIAogICAgICAgIAogICAgICA8L2xpPgogICAgPC9vbD4KICA8L25hdj4KCiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJDb250ZW50Ij4KICAgIAogIDxkaXYgY2xhc3M9ImdvLU1haW4taGVhZGVyVGl0bGUganMtc3RpY2t5SGVhZGVyIj4KICAgIDxhIGNsYXNzPSJnby1NYWluLWhlYWRlckxvZ28iIGhyZWY9Imh0dHBzOi8vZ28uZGV2LyIgYXJpYS1oaWRkZW49InRydWUiIHRhYmluZGV4PSItMSIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayIgYXJpYS1sYWJlbD0iTGluayB0byBHbyBIb21lcGFnZSI+CiAgICAgIDxpbWcgaGVpZ2h0PSI3OCIgd2lkdGg9IjIwNyIgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL2dvLWJsdWUuc3ZnIiBhbHQ9IkdvIj4KICAgIDwvYT4KICAgIDxoMSBjbGFzcz0iVW5pdEhlYWRlci10aXRsZUhlYWRpbmciIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci10aXRsZSI+Y3JvbjwvaDE+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0taW52ZXJ0ZWQiPnBhY2thZ2U8L3NwYW4+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0taW52ZXJ0ZWQiPm1vZHVsZTwvc3Bhbj4KICAgIAogICAgCiAgICAgIAogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUgZ28tQ2xpcGJvYXJkIGpzLWNsaXBib2FyZCIKICAgICAgICAgIHRpdGxlPSJDb3B5IHBhdGggdG8gY2xpcGJvYXJkLiYjMTA7JiMxMDtnaXRodWIuY29tL3JvYmZpZy9jcm9uL3YzIgogICAgICAgICAgYXJpYS1sYWJlbD0iQ29weSBQYXRoIHRvIENsaXBib2FyZCIKICAgICAgICAgIGRhdGEtdG8tY29weT0iZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi92MyIKICAgICAgICAgIGRhdGEtZ3RtYz0idGl0bGUgYnV0dG9uIgogICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQiCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NvbnRlbnRfY29weV9nbV9ncmV5XzI0ZHAuc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgIC8+CiAgICAgICAgPC9idXR0b24+CiAgICAgIAogICAgCiAgPC9kaXY+CgogICAgCiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxzIj4KICAgIAogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItdmVyc2lvbiI+CiAgICA8YSBocmVmPSI/dGFiPXZlcnNpb25zIiBhcmlhLWxhYmVsPSJHbyB0byBWZXJzaW9ucyIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+PHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPlZlcnNpb246IDwvc3Bhbj52My4wLjE8L2E+CiAgICAKICAgIDxzcGFuIGNsYXNzPSJEZXRhaWxzSGVhZGVyLWJhZGdlLS1sYXRlc3QiIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1taW5vclZlcnNpb25CYW5uZXIiPgogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBEZXRhaWxzSGVhZGVyLXNwYW4tLWxhdGVzdCI+TGF0ZXN0PC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBEZXRhaWxzSGVhZGVyLXNwYW4tLW5vdEF0TGF0ZXN0Ij4KICAgICAgICBMYXRlc3QKICAgICAgICAKICA8ZGV0YWlscyBjbGFzcz0iZ28tVG9vbHRpcCBqcy10b29sdGlwIiBkYXRhLWd0bWM9InRvb2x0aXAiPgogICAgPHN1bW1hcnk+CiAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2FsZXJ0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iV2FybmluZyI+CiAgICA8L3N1bW1hcnk+CiAgICA8cD5UaGlzIHBhY2thZ2UgaXMgbm90IGluIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBpdHMgbW9kdWxlLjwvcD4KICA8L2RldGFpbHM+CgogICAgICA8L3NwYW4+CiAgICAgIDxhIGhyZWY9Ii9naXRodWIuY29tL3JvYmZpZy9jcm9uL3YzIiBhcmlhLWxhYmVsPSJHbyB0byBMYXRlc3QgVmVyc2lvbiIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0tYWxlcnQgRGV0YWlsc0hlYWRlci1zcGFuLS1nb1RvTGF0ZXN0Ij5HbyB0byBsYXRlc3Q8L3NwYW4+CiAgICAgIDwvYT4KICAgIDwvc3Bhbj4KICA8L3NwYW4+CgogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItY29tbWl0VGltZSI+CiAgICBQdWJsaXNoZWQ6IEphbiAgNCwgMjAyMAogIDwvc3Bhbj4KCiAgICAgIAogIDxzcGFuIGNsYXNzPSJnby1NYWluLWhlYWRlckRldGFpbEl0ZW0iIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1saWNlbnNlcyI+CiAgICBMaWNlbnNlOiA8YSBocmVmPSIvZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi92Mz90YWI9bGljZW5zZXMiIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1saWNlbnNlIgogICAgICAgICAgICBhcmlhLWxhYmVsPSJHbyB0byBMaWNlbnNlcyIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+TUlUPC9hPgogICAgICAKICAgIAogIDwvc3Bhbj4KCiAgICAgIAogICAgICAgIAogIDxzcGFuIGNsYXNzPSJnby1NYWluLWhlYWRlckRldGFpbEl0ZW0iIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1pbXBvcnRzIj4KICAgIDxhIGhyZWY9Ii9naXRodWIuY29tL3JvYmZpZy9jcm9uL3YzP3RhYj1pbXBvcnRzIiBhcmlhLWxhYmVsPSJHbyB0byBJbXBvcnRzIgogICAgICAgIGRhdGEtZ3RtYz0iaGVhZGVyIGxpbmsiPgogICAgICA8c3BhbiBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+SW1wb3J0czogPC9zcGFuPjEyCiAgICA8L2E+CiAgPC9zcGFuPgoKICAgICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItaW1wb3J0ZWRieSI+CiAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi92Mz90YWI9aW1wb3J0ZWRieSIgYXJpYS1sYWJlbD0iR28gdG8gSW1wb3J0ZWQgQnkiCiAgICAgICAgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+CiAgICAgICA8c3BhbiBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+SW1wb3J0ZWQgYnk6IDwvc3Bhbj4yLDA2NwogICAgPC9hPgogIDwvc3Bhbj4KCiAgICAgIAogICAgCiAgPC9kaXY+CiAgCiAgPGRpdiBjbGFzcz0iVW5pdEhlYWRlci1vdmVyZmxvd0NvbnRhaW5lciI+CiAgICA8c3ZnIGNsYXNzPSJVbml0SGVhZGVyLW92ZXJmbG93SW1hZ2UiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgaGVpZ2h0PSIyNCIgdmlld0JveD0iMCAwIDI0IDI0IiB3aWR0aD0iMjQiPgogICAgICA8cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+CiAgICAgIDxwYXRoIGQ9Ik0xMiA4YzEuMSAwIDItLjkgMi0ycy0uOS0yLTItMi0yIC45LTIgMiAuOSAyIDIgMnptMCAyYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptMCA2Yy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnoiLz4KICAgIDwvc3ZnPgogICAgPHNlbGVjdCBjbGFzcz0iVW5pdEhlYWRlci1vdmVyZmxvd1NlbGVjdCBqcy1zZWxlY3ROYXYiIHRhYmluZGV4PSItMSI+CiAgICAgIDxvcHRpb24gdmFsdWU9Ii8iPk1haW48L29wdGlvbj4KICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjM/dGFiPXZlcnNpb25zIj4KICAgICAgICBWZXJzaW9ucwogICAgICA8L29wdGlvbj4KICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjM/dGFiPWxpY2Vuc2VzIj4KICAgICAgICBMaWNlbnNlcwogICAgICA8L29wdGlvbj4KICAgICAgCiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjM/dGFiPWltcG9ydHMiPgogICAgICAgICAgSW1wb3J0cwogICAgICAgIDwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gdmFsdWU9Ii9naXRodWIuY29tL3JvYmZpZy9jcm9uL3YzP3RhYj1pbXBvcnRlZGJ5Ij4KICAgICAgICAgIEltcG9ydGVkIEJ5CiAgICAgICAgPC9vcHRpb24+CiAgICAgIAogICAgPC9zZWxlY3Q+CiAgPC9kaXY+CgoKICA8L2Rpdj4KCjwvaGVhZGVyPgogICAgPGFzaWRlIGNsYXNzPSJnby1NYWluLWFzaWRlICBqcy1tYWluQXNpZGUiPgogIAogIDxkaXYgY2xhc3M9IlVuaXRNZXRhIj4KICAgIDxoMiBjbGFzcz0iZ28tdGV4dExhYmVsIj5EZXRhaWxzPC9oMj4KICAgIAogIDx1bCBjbGFzcz0iVW5pdE1ldGEtZGV0YWlscyI+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFZhbGlkIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi90cmVlL3YzLjAuMS9nby5tb2QiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5nby5tb2Q8L2E+IGZpbGUKICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD4KICAgICAgICAgIFRoZSBHbyBtb2R1bGUgc3lzdGVtIHdhcyBpbnRyb2R1Y2VkIGluIEdvIDEuMTEgYW5kIGlzIHRoZSBvZmZpY2lhbCBkZXBlbmRlbmN5IG1hbmFnZW1lbnQKICAgICAgICAgIHNvbHV0aW9uIGZvciBHby4KICAgICAgICA8L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFJlZGlzdHJpYnV0YWJsZSBsaWNlbnNlCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+CiAgICAgICAgICBSZWRpc3RyaWJ1dGFibGUgbGljZW5zZXMgcGxhY2UgbWluaW1hbCByZXN0cmljdGlvbnMgb24gaG93IHNvZnR3YXJlIGNhbiBiZSB1c2VkLAogICAgICAgICAgbW9kaWZpZWQsIGFuZCByZWRpc3RyaWJ1dGVkLgogICAgICAgIDwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jaGVja19jaXJjbGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJjaGVja2VkImhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CgogICAgICAgICAgVGFnZ2VkIHZlcnNpb24KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD5Nb2R1bGVzIHdpdGggdGFnZ2VkIHZlcnNpb25zIGdpdmUgaW1wb3J0ZXJzIG1vcmUgcHJlZGljdGFibGUgYnVpbGRzLjwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jaGVja19jaXJjbGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJjaGVja2VkImhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CgogICAgICAgICAgU3RhYmxlIHZlcnNpb24KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD5XaGVuIGEgcHJvamVjdCByZWFjaGVzIG1ham9yIHZlcnNpb24gdjEgaXQgaXMgY29uc2lkZXJlZCBzdGFibGUuPC9wPgogICAgICA8L2RldGFpbHM+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJVbml0TWV0YS1kZXRhaWxzTGVhcm4iPgogICAgICA8YSBocmVmPSIvYWJvdXQjYmVzdC1wcmFjdGljZXMtaDIiIGRhdGEtZ3RtYz0ibWV0YSBsaW5rIj5MZWFybiBtb3JlPC9hPgogICAgPC9saT4KICA8L3VsPgoKICAgIDxoMiBjbGFzcz0iZ28tdGV4dExhYmVsIj5SZXBvc2l0b3J5PC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRNZXRhLXJlcG8iPgogICAgICAKICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24iIHRpdGxlPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj4KICAgICAgICAgIGdpdGh1Yi5jb20vcm9iZmlnL2Nyb24KICAgICAgICA8L2E+CiAgICAgIAogICAgPC9kaXY+CiAgICAKICAgICAgPGgyIGNsYXNzPSJnby10ZXh0TGFiZWwiPkxpbmtzPC9oMj4KICAgICAgPHVsIGNsYXNzPSJVbml0TWV0YS1saW5rcyI+CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGVwcy5kZXYvZ28vZ2l0aHViLmNvbSUyRnJvYmZpZyUyRmNyb24lMkZ2My92My4wLjEiIHRpdGxlPSJWaWV3IHRoaXMgbW9kdWxlIG9uIE9wZW4gU291cmNlIEluc2lnaHRzIgogICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBkYXRhLXRlc3QtaWQ9Im1ldGEtbGluay1kZXBzZGV2Ij4KICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJkZXBzZGV2LUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9kZXBzZGV2LWxvZ28uc3ZnIgogICAgICAgICAgICAgICAgYWx0PSJPcGVuIFNvdXJjZSBJbnNpZ2h0cyBMb2dvIiAvPgogICAgICAgICAgICAgIE9wZW4gU291cmNlIEluc2lnaHRzCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgCiAgCgogICAgICAgIAogIAoKICAgICAgICAKICAKCiAgICAgIDwvdWw+CiAgICAKICA8L2Rpdj4KCjwvYXNpZGU+CiAgICA8bmF2IGNsYXNzPSJnby1NYWluLW5hdiBnby1NYWluLW5hdi0tc3RpY2t5IGpzLW1haW5OYXYiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogIDxkaXYgY2xhc3M9ImdvLU1haW4tbmF2RGVza3RvcCI+CiAgICAKICA8ZGl2IGNsYXNzPSJVbml0T3V0bGluZS1qdW1wVG8iPgogICAgPGJ1dHRvbiBjbGFzcz0iVW5pdE91dGxpbmUtanVtcFRvSW5wdXQgZ28tU2hvcnRjdXRLZXkganMtanVtcFRvSW5wdXQiCiAgICAgICAgYXJpYS1jb250cm9scz0ianVtcC10by1tb2RhbCIKICAgICAgICBhcmlhLWxhYmVsPSJPcGVuIEp1bXAgdG8gSWRlbnRpZmllciIKICAgICAgICBkYXRhLXNob3J0Y3V0PSJmIgogICAgICAgIGRhdGEtc2hvcnRjdXQtYWx0PSJmaW5kIgogICAgICAgIGRhdGEtdGVzdC1pZD0ianVtcC10by1idXR0b24iIGRhdGEtZ3RtYz0ib3V0bGluZSBidXR0b24iPgogICAgICBKdW1wIHRvIC4uLgogICAgPC9idXR0b24+CiAgPC9kaXY+CiAgPHVsIGNsYXNzPSJnby1UcmVlIGpzLXRyZWUiIHJvbGU9InRyZWUiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogICAgCiAgICAgIDxsaSBjbGFzcz0ianMtcmVhZG1lT3V0bGluZSI+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tcmVhZG1lIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBSRUFETUUKICAgICAgICA8L2E+CiAgICAgICAgCiAgPHVsIGlkPSJyZWFkbWUtb3V0bGluZSI+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtdXBncmFkaW5nLXRvLXYzLWp1bmUtMjAxOSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIFVwZ3JhZGluZyB0byB2MyAoSnVuZSAyMDE5KQogICAgICAgIDwvYT4KICAgICAgICAKICAgICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS1iYWNrZ3JvdW5kLWNyb24tc3BlYy1mb3JtYXQiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgIEJhY2tncm91bmQgLSBDcm9uIHNwZWMgZm9ybWF0CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAgCiAgPC91bD4KCiAgICAgIDwvbGk+CiAgICAKICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tZG9jdW1lbnRhdGlvbiIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgRG9jdW1lbnRhdGlvbgogICAgICAgIDwvYT4KICAgICAgICAKPHVsPgogIAogICAgPGxpPgogICAgICA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3IiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPk92ZXJ2aWV3PC9hPgogICAgPC9saT4KICA8bGkgY2xhc3M9IkRvY05hdi1vdmVydmlldyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctaW5kZXgiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgSW5kZXgKICAgICAgPC9hPgogICAgICAKICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY05hdi1jb25zdGFudHMiPgogICAgICA8YSBocmVmPSIjcGtnLWNvbnN0YW50cyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBDb25zdGFudHMKICAgICAgPC9hPgogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LXZhcmlhYmxlcyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIFZhcmlhYmxlcwogICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtZnVuY3Rpb25zIj4KICAgICAgPGEgaHJlZj0iI3BrZy1mdW5jdGlvbnMiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgRnVuY3Rpb25zCiAgICAgIDwvYT4KICAgICAgCiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtdHlwZXMiPgogICAgICA8YSBocmVmPSIjcGtnLXR5cGVzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIFR5cGVzCiAgICAgIDwvYT4KICAgICAgPHVsPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDaGFpbiIgdGl0bGU9InR5cGUgQ2hhaW4iIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBDaGFpbgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI05ld0NoYWluIiB0aXRsZT0iTmV3Q2hhaW4oYykiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgICAgICBOZXdDaGFpbihjKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjQ2hhaW4uVGhlbiIgdGl0bGU9IihjKSBUaGVuKGopIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgKGMpIFRoZW4oaikKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDb25zdGFudERlbGF5U2NoZWR1bGUiIHRpdGxlPSJ0eXBlIENvbnN0YW50RGVsYXlTY2hlZHVsZSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIENvbnN0YW50RGVsYXlTY2hlZHVsZQogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI0V2ZXJ5IiB0aXRsZT0iRXZlcnkoZHVyYXRpb24pIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgRXZlcnkoZHVyYXRpb24pCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNDb25zdGFudERlbGF5U2NoZWR1bGUuTmV4dCIgdGl0bGU9IihzY2hlZHVsZSkgTmV4dCh0KSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIChzY2hlZHVsZSkgTmV4dCh0KQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI0Nyb24iIHRpdGxlPSJ0eXBlIENyb24iIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBDcm9uCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjTmV3IiB0aXRsZT0iTmV3KG9wdHMpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgTmV3KG9wdHMpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNDcm9uLkFkZEZ1bmMiIHRpdGxlPSIoYykgQWRkRnVuYyhzcGVjLCBjbWQpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgKGMpIEFkZEZ1bmMoc3BlYywgY21kKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI0Nyb24uQWRkSm9iIiB0aXRsZT0iKGMpIEFkZEpvYihzcGVjLCBjbWQpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgKGMpIEFkZEpvYihzcGVjLCBjbWQpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjQ3Jvbi5FbnRyaWVzIiB0aXRsZT0iKGMpIEVudHJpZXMoKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIChjKSBFbnRyaWVzKCkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNDcm9uLkVudHJ5IiB0aXRsZT0iKGMpIEVudHJ5KGlkKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIChjKSBFbnRyeShpZCkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNDcm9uLkxvY2F0aW9uIiB0aXRsZT0iKGMpIExvY2F0aW9uKCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgICAgICAoYykgTG9jYXRpb24oKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI0Nyb24uUmVtb3ZlIiB0aXRsZT0iKGMpIFJlbW92ZShpZCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgICAgICAoYykgUmVtb3ZlKGlkKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI0Nyb24uUnVuIiB0aXRsZT0iKGMpIFJ1bigpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgKGMpIFJ1bigpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjQ3Jvbi5TY2hlZHVsZSIgdGl0bGU9IihjKSBTY2hlZHVsZShzY2hlZHVsZSwgY21kKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIChjKSBTY2hlZHVsZShzY2hlZHVsZSwgY21kKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI0Nyb24uU3RhcnQiIHRpdGxlPSIoYykgU3RhcnQoKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIChjKSBTdGFydCgpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjQ3Jvbi5TdG9wIiB0aXRsZT0iKGMpIFN0b3AoKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIChjKSBTdG9wKCkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNFbnRyeSIgdGl0bGU9InR5cGUgRW50cnkiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBFbnRyeQogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjRW50cnkuVmFsaWQiIHRpdGxlPSIoZSkgVmFsaWQoKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIChlKSBWYWxpZCgpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgIAogICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjRW50cnlJRCIgdGl0bGU9InR5cGUgRW50cnlJRCIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIEVudHJ5SUQKICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNGdW5jSm9iIiB0aXRsZT0idHlwZSBGdW5jSm9iIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgIHR5cGUgRnVuY0pvYgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjRnVuY0pvYi5SdW4iIHRpdGxlPSIoZikgUnVuKCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgICAgICAoZikgUnVuKCkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNKb2IiIHRpdGxlPSJ0eXBlIEpvYiIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIEpvYgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI0pvYldyYXBwZXIiIHRpdGxlPSJ0eXBlIEpvYldyYXBwZXIiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBKb2JXcmFwcGVyCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjRGVsYXlJZlN0aWxsUnVubmluZyIgdGl0bGU9IkRlbGF5SWZTdGlsbFJ1bm5pbmcobG9nZ2VyKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIERlbGF5SWZTdGlsbFJ1bm5pbmcobG9nZ2VyKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI1JlY292ZXIiIHRpdGxlPSJSZWNvdmVyKGxvZ2dlcikiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgICAgICBSZWNvdmVyKGxvZ2dlcikKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNTa2lwSWZTdGlsbFJ1bm5pbmciIHRpdGxlPSJTa2lwSWZTdGlsbFJ1bm5pbmcobG9nZ2VyKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIFNraXBJZlN0aWxsUnVubmluZyhsb2dnZXIpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNMb2dnZXIiIHRpdGxlPSJ0eXBlIExvZ2dlciIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIExvZ2dlcgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI1ByaW50ZkxvZ2dlciIgdGl0bGU9IlByaW50ZkxvZ2dlcihsKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIFByaW50ZkxvZ2dlcihsKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI1ZlcmJvc2VQcmludGZMb2dnZXIiIHRpdGxlPSJWZXJib3NlUHJpbnRmTG9nZ2VyKGwpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgVmVyYm9zZVByaW50ZkxvZ2dlcihsKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgIAogICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjT3B0aW9uIiB0aXRsZT0idHlwZSBPcHRpb24iIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBPcHRpb24KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoQ2hhaW4iIHRpdGxlPSJXaXRoQ2hhaW4od3JhcHBlcnMpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgV2l0aENoYWluKHdyYXBwZXJzKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhMb2NhdGlvbiIgdGl0bGU9IldpdGhMb2NhdGlvbihsb2MpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgV2l0aExvY2F0aW9uKGxvYykKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoTG9nZ2VyIiB0aXRsZT0iV2l0aExvZ2dlcihsb2dnZXIpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgV2l0aExvZ2dlcihsb2dnZXIpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aFBhcnNlciIgdGl0bGU9IldpdGhQYXJzZXIocCkiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICAgICAgICBXaXRoUGFyc2VyKHApCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aFNlY29uZHMiIHRpdGxlPSJXaXRoU2Vjb25kcygpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgV2l0aFNlY29uZHMoKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgIAogICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjUGFyc2VPcHRpb24iIHRpdGxlPSJ0eXBlIFBhcnNlT3B0aW9uIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgIHR5cGUgUGFyc2VPcHRpb24KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNQYXJzZXIiIHRpdGxlPSJ0eXBlIFBhcnNlciIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIFBhcnNlcgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iI05ld1BhcnNlciIgdGl0bGU9Ik5ld1BhcnNlcihvcHRpb25zKSIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgICAgIE5ld1BhcnNlcihvcHRpb25zKQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjUGFyc2VyLlBhcnNlIiB0aXRsZT0iKHApIFBhcnNlKHNwZWMpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgKHApIFBhcnNlKHNwZWMpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgIAogICAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjU2NoZWR1bGUiIHRpdGxlPSJ0eXBlIFNjaGVkdWxlIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgIHR5cGUgU2NoZWR1bGUKICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNQYXJzZVN0YW5kYXJkIiB0aXRsZT0iUGFyc2VTdGFuZGFyZChzdGFuZGFyZFNwZWMpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgUGFyc2VTdGFuZGFyZChzdGFuZGFyZFNwZWMpCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNTY2hlZHVsZVBhcnNlciIgdGl0bGU9InR5cGUgU2NoZWR1bGVQYXJzZXIiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgdHlwZSBTY2hlZHVsZVBhcnNlcgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1NwZWNTY2hlZHVsZSIgdGl0bGU9InR5cGUgU3BlY1NjaGVkdWxlIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgIHR5cGUgU3BlY1NjaGVkdWxlCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNTcGVjU2NoZWR1bGUuTmV4dCIgdGl0bGU9IihzKSBOZXh0KHQpIgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICAgICAgKHMpIE5leHQodCkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgCiAgICAgICAgICA8L2xpPgogICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbGk+CiAgCiAgCjwvdWw+CgogICAgICA8L2xpPgogICAgCiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNzZWN0aW9uLXNvdXJjZWZpbGVzIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBTb3VyY2UgRmlsZXMKICAgICAgICA8L2E+CiAgICAgIDwvbGk+CiAgICAKICAgIAogIDwvdWw+CgogIDwvZGl2PgogIDxkaXYgY2xhc3M9ImdvLU1haW4tbmF2TW9iaWxlIGpzLW1haW5OYXZNb2JpbGUiPgogICAgPGxhYmVsIGNsYXNzPSJnby1MYWJlbCI+CiAgICAgIDxzZWxlY3QgY2xhc3M9ImdvLVNlbGVjdCI+CiAgICAgICAgCiAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkIGRpc2FibGVkPlJFQURNRTwvb3B0aW9uPgogICAgICAgIAogICAgICA8L3NlbGVjdD4KICAgIDwvbGFiZWw+CiAgPC9kaXY+CjwvbmF2PgogICAgPGFydGljbGUgY2xhc3M9ImdvLU1haW4tYXJ0aWNsZSBqcy1tYWluQ29udGVudCI+CiAgPGRpdiBjbGFzcz0iVW5pdERldGFpbHMiIGRhdGEtdGVzdC1pZD0iVW5pdERldGFpbHMiIHN0eWxlPSJkaXNwbGF5OiBibG9jazsiPgogICAgPGRpdiBjbGFzcz0iVW5pdERldGFpbHMtY29udGVudCBqcy11bml0RGV0YWlsc0NvbnRlbnQiIGRhdGEtdGVzdC1pZD0iVW5pdERldGFpbHMtY29udGVudCI+CiAgICAgIAogICAgICAgIAogIDxkaXYgY2xhc3M9IlVuaXRSZWFkbWUgVW5pdFJlYWRtZS0tZXhwYW5kZWQganMtcmVhZG1lIj4KICAgIDxoMiBjbGFzcz0iVW5pdFJlYWRtZS10aXRsZSIgaWQ9InNlY3Rpb24tcmVhZG1lIj4KICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hyb21lX3JlYWRlcl9tb2RlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgUkVBRE1FCiAgICAgIDxhIGNsYXNzPSJVbml0UmVhZG1lLWlkTGluayIgaHJlZj0iI3NlY3Rpb24tcmVhZG1lIj7CtjwvYT4KICAgIDwvaDI+CiAgICAKICAgICAgPGRpdiBjbGFzcz0iVW5pdFJlYWRtZS1jb250ZW50IiBkYXRhLXRlc3QtaWQ9IlVuaXQtcmVhZG1lQ29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0iT3ZlcnZpZXctcmVhZG1lQ29udGVudCBqcy1yZWFkbWVDb250ZW50Ij48cD48YSBocmVmPSJodHRwOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24iIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24/c3RhdHVzLnBuZyIgYWx0PSJHb0RvYyIvPjwvYT4KPGEgaHJlZj0iaHR0cHM6Ly90cmF2aXMtY2kub3JnL3JvYmZpZy9jcm9uIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly90cmF2aXMtY2kub3JnL3JvYmZpZy9jcm9uLnN2Zz9icmFuY2g9bWFzdGVyIiBhbHQ9IkJ1aWxkIFN0YXR1cyIvPjwvYT48L3A+CjxoMyBjbGFzcz0iaDEiIGlkPSJyZWFkbWUtY3JvbiI+Y3JvbjwvaDM+CjxwPkNyb24gVjMgaGFzIGJlZW4gcmVsZWFzZWQhPC9wPgo8cD5UbyBkb3dubG9hZCB0aGUgc3BlY2lmaWMgdGFnZ2VkIHJlbGVhc2UsIHJ1bjo8L3A+CjxwcmU+PGNvZGU+Z28gZ2V0IGdpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjNAdjMuMC4wCjwvY29kZT48L3ByZT4KPHA+SW1wb3J0IGl0IGluIHlvdXIgcHJvZ3JhbSBhczo8L3A+CjxwcmU+PGNvZGU+aW1wb3J0ICYjMzQ7Z2l0aHViLmNvbS9yb2JmaWcvY3Jvbi92MyYjMzQ7CjwvY29kZT48L3ByZT4KPHA+SXQgcmVxdWlyZXMgR28gMS4xMSBvciBsYXRlciBkdWUgdG8gdXNhZ2Ugb2YgR28gTW9kdWxlcy48L3A+CjxwPlJlZmVyIHRvIHRoZSBkb2N1bWVudGF0aW9uIGhlcmU6CjxhIGhyZWY9Imh0dHA6Ly9nb2RvYy5vcmcvZ2l0aHViLmNvbS9yb2JmaWcvY3JvbiIgcmVsPSJub2ZvbGxvdyI+aHR0cDovL2dvZG9jLm9yZy9naXRodWIuY29tL3JvYmZpZy9jcm9uPC9hPjwvcD4KPHA+VGhlIHJlc3Qgb2YgdGhpcyBkb2N1bWVudCBkZXNjcmliZXMgdGhlIHRoZSBhZHZhbmNlcyBpbiB2MyBhbmQgYSBsaXN0IG9mCmJyZWFraW5nIGNoYW5nZXMgZm9yIHVzZXJzIHRoYXQgd2lzaCB0byB1cGdyYWRlIGZyb20gYW4gZWFybGllciB2ZXJzaW9uLjwvcD4KPGg0IGNsYXNzPSJoMiIgaWQ9InJlYWRtZS11cGdyYWRpbmctdG8tdjMtanVuZS0yMDE5Ij5VcGdyYWRpbmcgdG8gdjMgKEp1bmUgMjAxOSk8L2g0Pgo8cD5jcm9uIHYzIGlzIGEgbWFqb3IgdXBncmFkZSB0byB0aGUgbGlicmFyeSB0aGF0IGFkZHJlc3NlcyBhbGwgb3V0c3RhbmRpbmcgYnVncywKZmVhdHVyZSByZXF1ZXN0cywgYW5kIHJvdWdoIGVkZ2VzLiBJdCBpcyBiYXNlZCBvbiBhIG1lcmdlIG9mIG1hc3RlciB3aGljaApjb250YWlucyB2YXJpb3VzIGZpeGVzIHRvIGlzc3VlcyBmb3VuZCBvdmVyIHRoZSB5ZWFycyBhbmQgdGhlIHYyIGJyYW5jaCB3aGljaApjb250YWlucyBzb21lIGJhY2t3YXJkcy1pbmNvbXBhdGlibGUgZmVhdHVyZXMgbGlrZSB0aGUgYWJpbGl0eSB0byByZW1vdmUgY3Jvbgpqb2JzLiBJbiBhZGRpdGlvbiwgdjMgYWRkcyBzdXBwb3J0IGZvciBHbyBNb2R1bGVzLCBjbGVhbnMgdXAgcm91Z2ggZWRnZXMgbGlrZQp0aGUgdGltZXpvbmUgc3VwcG9ydCwgYW5kIGZpeGVzIGEgbnVtYmVyIG9mIGJ1Z3MuPC9wPgo8cD5OZXcgZmVhdHVyZXM6PC9wPgo8dWw+CjxsaT4KPHA+U3VwcG9ydCBmb3IgR28gbW9kdWxlcy4gQ2FsbGVycyBtdXN0IG5vdyBpbXBvcnQgdGhpcyBsaWJyYXJ5IGFzCjxjb2RlPmdpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjM8L2NvZGU+LCBpbnN0ZWFkIG9mIDxjb2RlPmdvcGtnLmluLy4uLjwvY29kZT48L3A+CjwvbGk+CjxsaT4KPHA+Rml4ZWQgYnVnczo8L3A+Cjx1bD4KPGxpPjBmMDFlNmIgcGFyc2VyOiBmaXggY29tYmluaW5nIG9mIERvdyBhbmQgRG9tICgjNzApPC9saT4KPGxpPmRiZjMyMjAgYWRqdXN0IHRpbWVzIHdoZW4gcm9sbGluZyB0aGUgY2xvY2sgZm9yd2FyZCB0byBoYW5kbGUgbm9uLWV4aXN0ZW50IG1pZG5pZ2h0ICgjMTU3KTwvbGk+CjxsaT5lZWVjZjE1IHNwZWNfdGVzdC5nbzogZW5zdXJlIGFuIGVycm9yIGlzIHJldHVybmVkIG9uIDAgaW5jcmVtZW50ICgjMTQ0KTwvbGk+CjxsaT43MDk3MWRjIGNyb24uRW50cmllcygpOiB1cGRhdGUgcmVxdWVzdCBmb3Igc25hcHNob3QgdG8gaW5jbHVkZSBhIHJlcGx5IGNoYW5uZWwgKCM5Nyk8L2xpPgo8bGk+MWNiYTVlNiBjcm9uOiBmaXg6IHJlbW92aW5nIGEgam9iIGNhdXNlcyB0aGUgbmV4dCBzY2hlZHVsZWQgam9iIHRvIHJ1biB0b28gbGF0ZSAoIzIwNik8L2xpPgo8L3VsPgo8L2xpPgo8bGk+CjxwPlN0YW5kYXJkIGNyb24gc3BlYyBwYXJzaW5nIGJ5IGRlZmF1bHQgKGZpcnN0IGZpZWxkIGlzICYjMzQ7bWludXRlJiMzNDspLCB3aXRoIGFuIGVhc3kKd2F5IHRvIG9wdCBpbnRvIHRoZSBzZWNvbmRzIGZpZWxkIChxdWFydHotY29tcGF0aWJsZSkuIEFsdGhvdWdoLCBub3RlIHRoYXQgdGhlCnllYXIgZmllbGQgKG9wdGlvbmFsIGluIFF1YXJ0eikgaXMgbm90IHN1cHBvcnRlZC48L3A+CjwvbGk+CjxsaT4KPHA+RXh0ZW5zaWJsZSwga2V5L3ZhbHVlIGxvZ2dpbmcgdmlhIGFuIGludGVyZmFjZSB0aGF0IGNvbXBsaWVzIHdpdGgKdGhlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nby1sb2dyL2xvZ3IiIHJlbD0ibm9mb2xsb3ciPmh0dHBzOi8vZ2l0aHViLmNvbS9nby1sb2dyL2xvZ3I8L2E+IHByb2plY3QuPC9wPgo8L2xpPgo8bGk+CjxwPlRoZSBuZXcgQ2hhaW4gJmFtcDsgSm9iV3JhcHBlciB0eXBlcyBhbGxvdyB5b3UgdG8gaW5zdGFsbCAmIzM0O2ludGVyY2VwdG9ycyYjMzQ7IHRvIGFkZApjcm9zcy1jdXR0aW5nIGJlaGF2aW9yIGxpa2UgdGhlIGZvbGxvd2luZzo8L3A+Cjx1bD4KPGxpPlJlY292ZXIgYW55IHBhbmljcyBmcm9tIGpvYnM8L2xpPgo8bGk+RGVsYXkgYSBqb2ImIzM5O3MgZXhlY3V0aW9uIGlmIHRoZSBwcmV2aW91cyBydW4gaGFzbiYjMzk7dCBjb21wbGV0ZWQgeWV0PC9saT4KPGxpPlNraXAgYSBqb2ImIzM5O3MgZXhlY3V0aW9uIGlmIHRoZSBwcmV2aW91cyBydW4gaGFzbiYjMzk7dCBjb21wbGV0ZWQgeWV0PC9saT4KPGxpPkxvZyBlYWNoIGpvYiYjMzk7cyBpbnZvY2F0aW9uczwvbGk+CjxsaT5Ob3RpZmljYXRpb24gd2hlbiBqb2JzIGFyZSBjb21wbGV0ZWQ8L2xpPgo8L3VsPgo8L2xpPgo8L3VsPgo8cD5JdCBpcyBiYWNrd2FyZHMgaW5jb21wYXRpYmxlIHdpdGggYm90aCB2MSBhbmQgdjIuIFRoZXNlIHVwZGF0ZXMgYXJlIHJlcXVpcmVkOjwvcD4KPHVsPgo8bGk+CjxwPlRoZSB2MSBicmFuY2ggYWNjZXB0ZWQgYW4gb3B0aW9uYWwgc2Vjb25kcyBmaWVsZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjcm9uCnNwZWMuIFRoaXMgaXMgbm9uLXN0YW5kYXJkIGFuZCBoYXMgbGVkIHRvIGEgbG90IG9mIGNvbmZ1c2lvbi4gVGhlIG5ldyBkZWZhdWx0CnBhcnNlciBjb25mb3JtcyB0byB0aGUgc3RhbmRhcmQgYXMgZGVzY3JpYmVkIGJ5IDxhIGhyZWY9Imh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb24iIHJlbD0ibm9mb2xsb3ciPnRoZSBDcm9uIHdpa2lwZWRpYSBwYWdlPC9hPi48L3A+CjxwPlVQREFUSU5HOiBUbyByZXRhaW4gdGhlIG9sZCBiZWhhdmlvciwgY29uc3RydWN0IHlvdXIgQ3JvbiB3aXRoIGEgY3VzdG9tCnBhcnNlcjo8L3A+CjxwcmU+PGNvZGU+Ly8gU2Vjb25kcyBmaWVsZCwgcmVxdWlyZWQKY3Jvbi5OZXcoY3Jvbi5XaXRoU2Vjb25kcygpKQoKLy8gU2Vjb25kcyBmaWVsZCwgb3B0aW9uYWwKY3Jvbi5OZXcoCiAgICBjcm9uLldpdGhQYXJzZXIoCiAgICAgICAgY3Jvbi5TZWNvbmRPcHRpb25hbCB8IGNyb24uTWludXRlIHwgY3Jvbi5Ib3VyIHwgY3Jvbi5Eb20gfCBjcm9uLk1vbnRoIHwgY3Jvbi5Eb3cgfCBjcm9uLkRlc2NyaXB0b3IpKQo8L2NvZGU+PC9wcmU+CjwvbGk+CjxsaT4KPHA+VGhlIENyb24gdHlwZSBub3cgYWNjZXB0cyBmdW5jdGlvbmFsIG9wdGlvbnMgb24gY29uc3RydWN0aW9uIHJhdGhlciB0aGFuIHRoZQpwcmV2aW91cyBhZC1ob2MgYmVoYXZpb3IgbW9kaWZpY2F0aW9uIG1lY2hhbmlzbXMgKHNldHRpbmcgYSBmaWVsZCwgY2FsbGluZyBhIHNldHRlcikuPC9wPgo8cD5VUERBVElORzogQ29kZSB0aGF0IHNldHMgQ3Jvbi5FcnJvckxvZ2dlciBvciBjYWxscyBDcm9uLlNldExvY2F0aW9uIG11c3QgYmUKdXBkYXRlZCB0byBwcm92aWRlIHRob3NlIHZhbHVlcyBvbiBjb25zdHJ1Y3Rpb24uPC9wPgo8L2xpPgo8bGk+CjxwPkNST05fVFogaXMgbm93IHRoZSByZWNvbW1lbmRlZCB3YXkgdG8gc3BlY2lmeSB0aGUgdGltZXpvbmUgb2YgYSBzaW5nbGUKc2NoZWR1bGUsIHdoaWNoIGlzIHNhbmN0aW9uZWQgYnkgdGhlIHNwZWNpZmljYXRpb24uIFRoZSBsZWdhY3kgJiMzNDtUWj0mIzM0OyBwcmVmaXgKd2lsbCBjb250aW51ZSB0byBiZSBzdXBwb3J0ZWQgc2luY2UgaXQgaXMgdW5hbWJpZ3VvdXMgYW5kIGVhc3kgdG8gZG8gc28uPC9wPgo8cD5VUERBVElORzogTm8gdXBkYXRlIGlzIHJlcXVpcmVkLjwvcD4KPC9saT4KPGxpPgo8cD5CeSBkZWZhdWx0LCBjcm9uIHdpbGwgbm8gbG9uZ2VyIHJlY292ZXIgcGFuaWNzIGluIGpvYnMgdGhhdCBpdCBydW5zLgpSZWNvdmVyaW5nIGNhbiBiZSBzdXJwcmlzaW5nIChzZWUgaXNzdWUgIzE5MikgYW5kIHNlZW1zIHRvIGJlIGF0IG9kZHMgd2l0aAp0eXBpY2FsIGJlaGF2aW9yIG9mIGxpYnJhcmllcy4gUmVsYXRlZGx5LCB0aGUgPGNvZGU+Y3Jvbi5XaXRoUGFuaWNMb2dnZXI8L2NvZGU+IG9wdGlvbgpoYXMgYmVlbiByZW1vdmVkIHRvIGFjY29tbW9kYXRlIHRoZSBtb3JlIGdlbmVyYWwgSm9iV3JhcHBlciB0eXBlLjwvcD4KPHA+VVBEQVRJTkc6IFRvIG9wdCBpbnRvIHBhbmljIHJlY292ZXJ5IGFuZCBjb25maWd1cmUgdGhlIHBhbmljIGxvZ2dlcjo8L3A+CjxwcmU+PGNvZGU+Y3Jvbi5OZXcoY3Jvbi5XaXRoQ2hhaW4oCiAgICBjcm9uLlJlY292ZXIobG9nZ2VyKSwgIC8vIG9yIHVzZSBjcm9uLkRlZmF1bHRMb2dnZXIKKSkKPC9jb2RlPjwvcHJlPgo8L2xpPgo8bGk+CjxwPkluIGFkZGluZyBzdXBwb3J0IGZvciA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ28tbG9nci9sb2dyIiByZWw9Im5vZm9sbG93Ij5odHRwczovL2dpdGh1Yi5jb20vZ28tbG9nci9sb2dyPC9hPiwgPGNvZGU+Y3Jvbi5XaXRoVmVyYm9zZUxvZ2dlcjwvY29kZT4gd2FzCnJlbW92ZWQsIHNpbmNlIGl0IGlzIGR1cGxpY2F0aXZlIHdpdGggdGhlIGxldmVsZWQgbG9nZ2luZy48L3A+CjxwPlVQREFUSU5HOiBDYWxsZXJzIHNob3VsZCB1c2UgPGNvZGU+V2l0aExvZ2dlcjwvY29kZT4gYW5kIHNwZWNpZnkgYSBsb2dnZXIgdGhhdCBkb2VzIG5vdApkaXNjYXJkIDxjb2RlPkluZm88L2NvZGU+IGxvZ3MuIEZvciBjb252ZW5pZW5jZSwgb25lIGlzIHByb3ZpZGVkIHRoYXQgd3JhcHMgPGNvZGU+KmxvZy5Mb2dnZXI8L2NvZGU+OjwvcD4KPHByZT48Y29kZT5jcm9uLk5ldygKICAgIGNyb24uV2l0aExvZ2dlcihjcm9uLlZlcmJvc2VQcmludGZMb2dnZXIobG9nZ2VyKSkpCjwvY29kZT48L3ByZT4KPC9saT4KPC91bD4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS1iYWNrZ3JvdW5kLWNyb24tc3BlYy1mb3JtYXQiPkJhY2tncm91bmQgLSBDcm9uIHNwZWMgZm9ybWF0PC9oNT4KPHA+VGhlcmUgYXJlIHR3byBjcm9uIHNwZWMgZm9ybWF0cyBpbiBjb21tb24gdXNhZ2U6PC9wPgo8dWw+CjxsaT4KPHA+VGhlICYjMzQ7c3RhbmRhcmQmIzM0OyBjcm9uIGZvcm1hdCwgZGVzY3JpYmVkIG9uIDxhIGhyZWY9Imh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb24iIHJlbD0ibm9mb2xsb3ciPnRoZSBDcm9uIHdpa2lwZWRpYSBwYWdlPC9hPiBhbmQgdXNlZCBieQp0aGUgY3JvbiBMaW51eCBzeXN0ZW0gdXRpbGl0eS48L3A+CjwvbGk+CjxsaT4KPHA+VGhlIGNyb24gZm9ybWF0IHVzZWQgYnkgPGEgaHJlZj0iaHR0cDovL3d3dy5xdWFydHotc2NoZWR1bGVyLm9yZy9kb2N1bWVudGF0aW9uL3F1YXJ0ei0yLjMuMC90dXRvcmlhbHMvdHV0b3JpYWwtbGVzc29uLTA2Lmh0bWwiIHJlbD0ibm9mb2xsb3ciPnRoZSBRdWFydHogU2NoZWR1bGVyPC9hPiwgY29tbW9ubHkgdXNlZCBmb3Igc2NoZWR1bGVkCmpvYnMgaW4gSmF2YSBzb2Z0d2FyZTwvcD4KPC9saT4KPC91bD4KPHA+VGhlIG9yaWdpbmFsIHZlcnNpb24gb2YgdGhpcyBwYWNrYWdlIGluY2x1ZGVkIGFuIG9wdGlvbmFsICYjMzQ7c2Vjb25kcyYjMzQ7IGZpZWxkLCB3aGljaAptYWRlIGl0IGluY29tcGF0aWJsZSB3aXRoIGJvdGggb2YgdGhlc2UgZm9ybWF0cy4gTm93LCB0aGUgJiMzNDtzdGFuZGFyZCYjMzQ7IGZvcm1hdCBpcwp0aGUgZGVmYXVsdCBmb3JtYXQgYWNjZXB0ZWQsIGFuZCB0aGUgUXVhcnR6IGZvcm1hdCBpcyBvcHQtaW4uPC9wPgo8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxidXR0b24gY2xhc3M9IlVuaXRSZWFkbWUtZXhwYW5kTGluayBqcy1yZWFkbWVFeHBhbmQiCiAgICAgICAgICBkYXRhLXRlc3QtaWQ9InJlYWRtZS1leHBhbmQiIGRhdGEtZ3RtYz0icmVhZG1lIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkV4cGFuZCBSZWFkbWUiPkV4cGFuZCDilr48L2J1dHRvbj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iVW5pdFJlYWRtZS1jb2xsYXBzZUxpbmsganMtcmVhZG1lQ29sbGFwc2UiCiAgICAgICAgICBkYXRhLXRlc3QtaWQ9InJlYWRtZS1jb2xsYXBzZSIgZGF0YS1ndG1jPSJyZWFkbWUgYnV0dG9uIgogICAgICAgICAgYXJpYS1sYWJlbD0iRXhwYW5kIFJlYWRtZSI+Q29sbGFwc2Ug4pa0PC9idXR0b24+CiAgICAKICA8L2Rpdj4KCiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgICAgIAogIDxkaXYgY2xhc3M9IlVuaXREb2MiPgogICAgPGgyIGNsYXNzPSJVbml0RG9jLXRpdGxlIiBpZD0ic2VjdGlvbi1kb2N1bWVudGF0aW9uIj4KICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY29kZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgIERvY3VtZW50YXRpb24KICAgICAgPGEgY2xhc3M9IlVuaXREb2MtaWRMaW5rIiBocmVmPSIjc2VjdGlvbi1kb2N1bWVudGF0aW9uIj7CtjwvYT4KICAgIDwvaDI+CiAgICAKICAKICAgIAogIAoKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24ganMtZG9jdW1lbnRhdGlvbiI+CiAgICAgIAogICAgICAgIAoKPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1jb250ZW50IGpzLWRvY0NvbnRlbnQiPiA8c2VjdGlvbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1vdmVydmlldyI+CiAgICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLW92ZXJ2aWV3IiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1vdmVydmlld0hlYWRlciI+T3ZlcnZpZXcgPGEgaHJlZj0iI3BrZy1vdmVydmlldyI+wrY8L2E+PC9oMz4KCjxkaXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iVGFibGUgb2YgQ29udGVudHMiPgogIDx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2MgRG9jdW1lbnRhdGlvbi10b2MtY29sdW1ucyI+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1JbnN0YWxsYXRpb24iPkluc3RhbGxhdGlvbjwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVVzYWdlIj5Vc2FnZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUNST05fRXhwcmVzc2lvbl9Gb3JtYXQiPkNST04gRXhwcmVzc2lvbiBGb3JtYXQ8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1BbHRlcm5hdGl2ZV9Gb3JtYXRzIj5BbHRlcm5hdGl2ZSBGb3JtYXRzPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItU3BlY2lhbF9DaGFyYWN0ZXJzIj5TcGVjaWFsIENoYXJhY3RlcnM8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1QcmVkZWZpbmVkX3NjaGVkdWxlcyI+UHJlZGVmaW5lZCBzY2hlZHVsZXM8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1JbnRlcnZhbHMiPkludGVydmFsczwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVRpbWVfem9uZXMiPlRpbWUgem9uZXM8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1Kb2JfV3JhcHBlcnMiPkpvYiBXcmFwcGVyczwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVRocmVhZF9zYWZldHkiPlRocmVhZCBzYWZldHk8L2E+CiAgICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24tdG9jSXRlbSI+CiAgICAgICAgPGEgaHJlZj0iI2hkci1Mb2dnaW5nIj5Mb2dnaW5nPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItSW1wbGVtZW50YXRpb24iPkltcGxlbWVudGF0aW9uPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KPC9kaXY+CjxwPlBhY2thZ2UgY3JvbiBpbXBsZW1lbnRzIGEgY3JvbiBzcGVjIHBhcnNlciBhbmQgam9iIHJ1bm5lci4KPC9wPjxoNCBpZD0iaGRyLUluc3RhbGxhdGlvbiI+SW5zdGFsbGF0aW9uIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbnN0YWxsYXRpb24iPsK2PC9hPjwvaDQ+PHA+VG8gZG93bmxvYWQgdGhlIHNwZWNpZmljIHRhZ2dlZCByZWxlYXNlLCBydW46CjwvcD48cHJlPmdvIGdldCBnaXRodWIuY29tL3JvYmZpZy9jcm9uL3YzQHYzLjAuMAo8L3ByZT48cD5JbXBvcnQgaXQgaW4geW91ciBwcm9ncmFtIGFzOgo8L3A+PHByZT5pbXBvcnQgJiMzNDtnaXRodWIuY29tL3JvYmZpZy9jcm9uL3YzJiMzNDsKPC9wcmU+PHA+SXQgcmVxdWlyZXMgR28gMS4xMSBvciBsYXRlciBkdWUgdG8gdXNhZ2Ugb2YgR28gTW9kdWxlcy4KPC9wPjxoNCBpZD0iaGRyLVVzYWdlIj5Vc2FnZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItVXNhZ2UiPsK2PC9hPjwvaDQ+PHA+Q2FsbGVycyBtYXkgcmVnaXN0ZXIgRnVuY3MgdG8gYmUgaW52b2tlZCBvbiBhIGdpdmVuIHNjaGVkdWxlLiAgQ3JvbiB3aWxsIHJ1bgp0aGVtIGluIHRoZWlyIG93biBnb3JvdXRpbmVzLgo8L3A+PHByZT5jIDo9IGNyb24uTmV3KCkKYy5BZGRGdW5jKCYjMzQ7MzAgKiAqICogKiYjMzQ7LCBmdW5jKCkgeyBmbXQuUHJpbnRsbigmIzM0O0V2ZXJ5IGhvdXIgb24gdGhlIGhhbGYgaG91ciYjMzQ7KSB9KQpjLkFkZEZ1bmMoJiMzNDszMCAzLTYsMjAtMjMgKiAqIComIzM0OywgZnVuYygpIHsgZm10LlByaW50bG4oJiMzNDsuLiBpbiB0aGUgcmFuZ2UgMy02YW0sIDgtMTFwbSYjMzQ7KSB9KQpjLkFkZEZ1bmMoJiMzNDtDUk9OX1RaPUFzaWEvVG9reW8gMzAgMDQgKiAqIComIzM0OywgZnVuYygpIHsgZm10LlByaW50bG4oJiMzNDtSdW5zIGF0IDA0OjMwIFRva3lvIHRpbWUgZXZlcnkgZGF5JiMzNDspIH0pCmMuQWRkRnVuYygmIzM0O0Bob3VybHkmIzM0OywgICAgICBmdW5jKCkgeyBmbXQuUHJpbnRsbigmIzM0O0V2ZXJ5IGhvdXIsIHN0YXJ0aW5nIGFuIGhvdXIgZnJvbSBub3cmIzM0OykgfSkKYy5BZGRGdW5jKCYjMzQ7QGV2ZXJ5IDFoMzBtJiMzNDssIGZ1bmMoKSB7IGZtdC5QcmludGxuKCYjMzQ7RXZlcnkgaG91ciB0aGlydHksIHN0YXJ0aW5nIGFuIGhvdXIgdGhpcnR5IGZyb20gbm93JiMzNDspIH0pCmMuU3RhcnQoKQouLgovLyBGdW5jcyBhcmUgaW52b2tlZCBpbiB0aGVpciBvd24gZ29yb3V0aW5lLCBhc3luY2hyb25vdXNseS4KLi4uCi8vIEZ1bmNzIG1heSBhbHNvIGJlIGFkZGVkIHRvIGEgcnVubmluZyBDcm9uCmMuQWRkRnVuYygmIzM0O0BkYWlseSYjMzQ7LCBmdW5jKCkgeyBmbXQuUHJpbnRsbigmIzM0O0V2ZXJ5IGRheSYjMzQ7KSB9KQouLgovLyBJbnNwZWN0IHRoZSBjcm9uIGpvYiBlbnRyaWVzJiMzOTsgbmV4dCBhbmQgcHJldmlvdXMgcnVuIHRpbWVzLgppbnNwZWN0KGMuRW50cmllcygpKQouLgpjLlN0b3AoKSAgLy8gU3RvcCB0aGUgc2NoZWR1bGVyIChkb2VzIG5vdCBzdG9wIGFueSBqb2JzIGFscmVhZHkgcnVubmluZykuCjwvcHJlPjxoNCBpZD0iaGRyLUNST05fRXhwcmVzc2lvbl9Gb3JtYXQiPkNST04gRXhwcmVzc2lvbiBGb3JtYXQgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUNST05fRXhwcmVzc2lvbl9Gb3JtYXQiPsK2PC9hPjwvaDQ+PHA+QSBjcm9uIGV4cHJlc3Npb24gcmVwcmVzZW50cyBhIHNldCBvZiB0aW1lcywgdXNpbmcgNSBzcGFjZS1zZXBhcmF0ZWQgZmllbGRzLgo8L3A+PHByZT5GaWVsZCBuYW1lICAgfCBNYW5kYXRvcnk/IHwgQWxsb3dlZCB2YWx1ZXMgIHwgQWxsb3dlZCBzcGVjaWFsIGNoYXJhY3RlcnMKLS0tLS0tLS0tLSAgIHwgLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tICB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCk1pbnV0ZXMgICAgICB8IFllcyAgICAgICAgfCAwLTU5ICAgICAgICAgICAgfCAqIC8gLCAtCkhvdXJzICAgICAgICB8IFllcyAgICAgICAgfCAwLTIzICAgICAgICAgICAgfCAqIC8gLCAtCkRheSBvZiBtb250aCB8IFllcyAgICAgICAgfCAxLTMxICAgICAgICAgICAgfCAqIC8gLCAtID8KTW9udGggICAgICAgIHwgWWVzICAgICAgICB8IDEtMTIgb3IgSkFOLURFQyB8ICogLyAsIC0KRGF5IG9mIHdlZWsgIHwgWWVzICAgICAgICB8IDAtNiBvciBTVU4tU0FUICB8ICogLyAsIC0gPwo8L3ByZT48cD5Nb250aCBhbmQgRGF5LW9mLXdlZWsgZmllbGQgdmFsdWVzIGFyZSBjYXNlIGluc2Vuc2l0aXZlLiAgJiMzNDtTVU4mIzM0OywgJiMzNDtTdW4mIzM0OywgYW5kCiYjMzQ7c3VuJiMzNDsgYXJlIGVxdWFsbHkgYWNjZXB0ZWQuCjwvcD48cD5UaGUgc3BlY2lmaWMgaW50ZXJwcmV0YXRpb24gb2YgdGhlIGZvcm1hdCBpcyBiYXNlZCBvbiB0aGUgQ3JvbiBXaWtpcGVkaWEgcGFnZToKPGEgaHJlZj0iaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3JvbiI+aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3JvbjwvYT4KPC9wPjxoNCBpZD0iaGRyLUFsdGVybmF0aXZlX0Zvcm1hdHMiPkFsdGVybmF0aXZlIEZvcm1hdHMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUFsdGVybmF0aXZlX0Zvcm1hdHMiPsK2PC9hPjwvaDQ+PHA+QWx0ZXJuYXRpdmUgQ3JvbiBleHByZXNzaW9uIGZvcm1hdHMgc3VwcG9ydCBvdGhlciBmaWVsZHMgbGlrZSBzZWNvbmRzLiBZb3UgY2FuCmltcGxlbWVudCB0aGF0IGJ5IGNyZWF0aW5nIGEgY3VzdG9tIFBhcnNlciBhcyBmb2xsb3dzLgo8L3A+PHByZT5jcm9uLk5ldygKCWNyb24uV2l0aFBhcnNlcigKCQljcm9uLk5ld1BhcnNlcigKCQkJY3Jvbi5TZWNvbmRPcHRpb25hbCB8IGNyb24uTWludXRlIHwgY3Jvbi5Ib3VyIHwgY3Jvbi5Eb20gfCBjcm9uLk1vbnRoIHwgY3Jvbi5Eb3cgfCBjcm9uLkRlc2NyaXB0b3IpKSkKPC9wcmU+PHA+U2luY2UgYWRkaW5nIFNlY29uZHMgaXMgdGhlIG1vc3QgY29tbW9uIG1vZGlmaWNhdGlvbiB0byB0aGUgc3RhbmRhcmQgY3JvbiBzcGVjLApjcm9uIHByb3ZpZGVzIGEgYnVpbHRpbiBmdW5jdGlvbiB0byBkbyB0aGF0LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBjdXN0b20KcGFyc2VyIHlvdSBzYXcgZWFybGllciwgZXhjZXB0IHRoYXQgaXRzIHNlY29uZHMgZmllbGQgaXMgUkVRVUlSRUQ6CjwvcD48cHJlPmNyb24uTmV3KGNyb24uV2l0aFNlY29uZHMoKSkKPC9wcmU+PHA+VGhhdCBlbXVsYXRlcyBRdWFydHosIHRoZSBtb3N0IHBvcHVsYXIgYWx0ZXJuYXRpdmUgQ3JvbiBzY2hlZHVsZSBmb3JtYXQ6CjxhIGhyZWY9Imh0dHA6Ly93d3cucXVhcnR6LXNjaGVkdWxlci5vcmcvZG9jdW1lbnRhdGlvbi9xdWFydHotMi54L3R1dG9yaWFscy9jcm9udHJpZ2dlci5odG1sIj5odHRwOi8vd3d3LnF1YXJ0ei1zY2hlZHVsZXIub3JnL2RvY3VtZW50YXRpb24vcXVhcnR6LTIueC90dXRvcmlhbHMvY3JvbnRyaWdnZXIuaHRtbDwvYT4KPC9wPjxoNCBpZD0iaGRyLVNwZWNpYWxfQ2hhcmFjdGVycyI+U3BlY2lhbCBDaGFyYWN0ZXJzIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1TcGVjaWFsX0NoYXJhY3RlcnMiPsK2PC9hPjwvaDQ+PHA+QXN0ZXJpc2sgKCAqICkKPC9wPjxwPlRoZSBhc3RlcmlzayBpbmRpY2F0ZXMgdGhhdCB0aGUgY3JvbiBleHByZXNzaW9uIHdpbGwgbWF0Y2ggZm9yIGFsbCB2YWx1ZXMgb2YgdGhlCmZpZWxkOyBlLmcuLCB1c2luZyBhbiBhc3RlcmlzayBpbiB0aGUgNXRoIGZpZWxkIChtb250aCkgd291bGQgaW5kaWNhdGUgZXZlcnkKbW9udGguCjwvcD48cD5TbGFzaCAoIC8gKQo8L3A+PHA+U2xhc2hlcyBhcmUgdXNlZCB0byBkZXNjcmliZSBpbmNyZW1lbnRzIG9mIHJhbmdlcy4gRm9yIGV4YW1wbGUgMy01OS8xNSBpbiB0aGUKMXN0IGZpZWxkIChtaW51dGVzKSB3b3VsZCBpbmRpY2F0ZSB0aGUgM3JkIG1pbnV0ZSBvZiB0aGUgaG91ciBhbmQgZXZlcnkgMTUKbWludXRlcyB0aGVyZWFmdGVyLiBUaGUgZm9ybSAmIzM0OypcLy4uLiYjMzQ7IGlzIGVxdWl2YWxlbnQgdG8gdGhlIGZvcm0gJiMzNDtmaXJzdC1sYXN0Ly4uLiYjMzQ7LAp0aGF0IGlzLCBhbiBpbmNyZW1lbnQgb3ZlciB0aGUgbGFyZ2VzdCBwb3NzaWJsZSByYW5nZSBvZiB0aGUgZmllbGQuICBUaGUgZm9ybQomIzM0O04vLi4uJiMzNDsgaXMgYWNjZXB0ZWQgYXMgbWVhbmluZyAmIzM0O04tTUFYLy4uLiYjMzQ7LCB0aGF0IGlzLCBzdGFydGluZyBhdCBOLCB1c2UgdGhlCmluY3JlbWVudCB1bnRpbCB0aGUgZW5kIG9mIHRoYXQgc3BlY2lmaWMgcmFuZ2UuICBJdCBkb2VzIG5vdCB3cmFwIGFyb3VuZC4KPC9wPjxwPkNvbW1hICggLCApCjwvcD48cD5Db21tYXMgYXJlIHVzZWQgdG8gc2VwYXJhdGUgaXRlbXMgb2YgYSBsaXN0LiBGb3IgZXhhbXBsZSwgdXNpbmcgJiMzNDtNT04sV0VELEZSSSYjMzQ7IGluCnRoZSA1dGggZmllbGQgKGRheSBvZiB3ZWVrKSB3b3VsZCBtZWFuIE1vbmRheXMsIFdlZG5lc2RheXMgYW5kIEZyaWRheXMuCjwvcD48cD5IeXBoZW4gKCAtICkKPC9wPjxwPkh5cGhlbnMgYXJlIHVzZWQgdG8gZGVmaW5lIHJhbmdlcy4gRm9yIGV4YW1wbGUsIDktMTcgd291bGQgaW5kaWNhdGUgZXZlcnkKaG91ciBiZXR3ZWVuIDlhbSBhbmQgNXBtIGluY2x1c2l2ZS4KPC9wPjxwPlF1ZXN0aW9uIG1hcmsgKCA/ICkKPC9wPjxwPlF1ZXN0aW9uIG1hcmsgbWF5IGJlIHVzZWQgaW5zdGVhZCBvZiAmIzM5OyomIzM5OyBmb3IgbGVhdmluZyBlaXRoZXIgZGF5LW9mLW1vbnRoIG9yCmRheS1vZi13ZWVrIGJsYW5rLgo8L3A+PGg0IGlkPSJoZHItUHJlZGVmaW5lZF9zY2hlZHVsZXMiPlByZWRlZmluZWQgc2NoZWR1bGVzIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1QcmVkZWZpbmVkX3NjaGVkdWxlcyI+wrY8L2E+PC9oND48cD5Zb3UgbWF5IHVzZSBvbmUgb2Ygc2V2ZXJhbCBwcmUtZGVmaW5lZCBzY2hlZHVsZXMgaW4gcGxhY2Ugb2YgYSBjcm9uIGV4cHJlc3Npb24uCjwvcD48cHJlPkVudHJ5ICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFcXVpdmFsZW50IFRvCi0tLS0tICAgICAgICAgICAgICAgICAgfCAtLS0tLS0tLS0tLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAtLS0tLS0tLS0tLS0tCkB5ZWFybHkgKG9yIEBhbm51YWxseSkgfCBSdW4gb25jZSBhIHllYXIsIG1pZG5pZ2h0LCBKYW4uIDFzdCAgICAgICAgfCAwIDAgMSAxICoKQG1vbnRobHkgICAgICAgICAgICAgICB8IFJ1biBvbmNlIGEgbW9udGgsIG1pZG5pZ2h0LCBmaXJzdCBvZiBtb250aCB8IDAgMCAxICogKgpAd2Vla2x5ICAgICAgICAgICAgICAgIHwgUnVuIG9uY2UgYSB3ZWVrLCBtaWRuaWdodCBiZXR3ZWVuIFNhdC9TdW4gIHwgMCAwICogKiAwCkBkYWlseSAob3IgQG1pZG5pZ2h0KSAgfCBSdW4gb25jZSBhIGRheSwgbWlkbmlnaHQgICAgICAgICAgICAgICAgICAgfCAwIDAgKiAqICoKQGhvdXJseSAgICAgICAgICAgICAgICB8IFJ1biBvbmNlIGFuIGhvdXIsIGJlZ2lubmluZyBvZiBob3VyICAgICAgICB8IDAgKiAqICogKgo8L3ByZT48aDQgaWQ9Imhkci1JbnRlcnZhbHMiPkludGVydmFscyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItSW50ZXJ2YWxzIj7CtjwvYT48L2g0PjxwPllvdSBtYXkgYWxzbyBzY2hlZHVsZSBhIGpvYiB0byBleGVjdXRlIGF0IGZpeGVkIGludGVydmFscywgc3RhcnRpbmcgYXQgdGhlIHRpbWUgaXQmIzM5O3MgYWRkZWQKb3IgY3JvbiBpcyBydW4uIFRoaXMgaXMgc3VwcG9ydGVkIGJ5IGZvcm1hdHRpbmcgdGhlIGNyb24gc3BlYyBsaWtlIHRoaXM6CjwvcD48cHJlPkBldmVyeSAmbHQ7ZHVyYXRpb24mZ3Q7CjwvcHJlPjxwPndoZXJlICYjMzQ7ZHVyYXRpb24mIzM0OyBpcyBhIHN0cmluZyBhY2NlcHRlZCBieSB0aW1lLlBhcnNlRHVyYXRpb24KKDxhIGhyZWY9Imh0dHA6Ly9nb2xhbmcub3JnL3BrZy90aW1lLyNQYXJzZUR1cmF0aW9uIj5odHRwOi8vZ29sYW5nLm9yZy9wa2cvdGltZS8jUGFyc2VEdXJhdGlvbjwvYT4pLgo8L3A+PHA+Rm9yIGV4YW1wbGUsICYjMzQ7QGV2ZXJ5IDFoMzBtMTBzJiMzNDsgd291bGQgaW5kaWNhdGUgYSBzY2hlZHVsZSB0aGF0IGFjdGl2YXRlcyBhZnRlcgoxIGhvdXIsIDMwIG1pbnV0ZXMsIDEwIHNlY29uZHMsIGFuZCB0aGVuIGV2ZXJ5IGludGVydmFsIGFmdGVyIHRoYXQuCjwvcD48cD5Ob3RlOiBUaGUgaW50ZXJ2YWwgZG9lcyBub3QgdGFrZSB0aGUgam9iIHJ1bnRpbWUgaW50byBhY2NvdW50LiAgRm9yIGV4YW1wbGUsCmlmIGEgam9iIHRha2VzIDMgbWludXRlcyB0byBydW4sIGFuZCBpdCBpcyBzY2hlZHVsZWQgdG8gcnVuIGV2ZXJ5IDUgbWludXRlcywKaXQgd2lsbCBoYXZlIG9ubHkgMiBtaW51dGVzIG9mIGlkbGUgdGltZSBiZXR3ZWVuIGVhY2ggcnVuLgo8L3A+PGg0IGlkPSJoZHItVGltZV96b25lcyI+VGltZSB6b25lcyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItVGltZV96b25lcyI+wrY8L2E+PC9oND48cD5CeSBkZWZhdWx0LCBhbGwgaW50ZXJwcmV0YXRpb24gYW5kIHNjaGVkdWxpbmcgaXMgZG9uZSBpbiB0aGUgbWFjaGluZSYjMzk7cyBsb2NhbAp0aW1lIHpvbmUgKHRpbWUuTG9jYWwpLiBZb3UgY2FuIHNwZWNpZnkgYSBkaWZmZXJlbnQgdGltZSB6b25lIG9uIGNvbnN0cnVjdGlvbjoKPC9wPjxwcmU+Y3Jvbi5OZXcoCiAgICBjcm9uLldpdGhMb2NhdGlvbih0aW1lLlVUQykpCjwvcHJlPjxwPkluZGl2aWR1YWwgY3JvbiBzY2hlZHVsZXMgbWF5IGFsc28gb3ZlcnJpZGUgdGhlIHRpbWUgem9uZSB0aGV5IGFyZSB0byBiZQppbnRlcnByZXRlZCBpbiBieSBwcm92aWRpbmcgYW4gYWRkaXRpb25hbCBzcGFjZS1zZXBhcmF0ZWQgZmllbGQgYXQgdGhlIGJlZ2lubmluZwpvZiB0aGUgY3JvbiBzcGVjLCBvZiB0aGUgZm9ybSAmIzM0O0NST05fVFo9QXNpYS9Ub2t5byYjMzQ7Lgo8L3A+PHA+Rm9yIGV4YW1wbGU6CjwvcD48cHJlPiMgUnVucyBhdCA2YW0gaW4gdGltZS5Mb2NhbApjcm9uLk5ldygpLkFkZEZ1bmMoJiMzNDswIDYgKiAqID8mIzM0OywgLi4uKQoKIyBSdW5zIGF0IDZhbSBpbiBBbWVyaWNhL05ld19Zb3JrCm55YywgXyA6PSB0aW1lLkxvYWRMb2NhdGlvbigmIzM0O0FtZXJpY2EvTmV3X1lvcmsmIzM0OykKYyA6PSBjcm9uLk5ldyhjcm9uLldpdGhMb2NhdGlvbihueWMpKQpjLkFkZEZ1bmMoJiMzNDswIDYgKiAqID8mIzM0OywgLi4uKQoKIyBSdW5zIGF0IDZhbSBpbiBBc2lhL1Rva3lvCmNyb24uTmV3KCkuQWRkRnVuYygmIzM0O0NST05fVFo9QXNpYS9Ub2t5byAwIDYgKiAqID8mIzM0OywgLi4uKQoKIyBSdW5zIGF0IDZhbSBpbiBBc2lhL1Rva3lvCmMgOj0gY3Jvbi5OZXcoY3Jvbi5XaXRoTG9jYXRpb24obnljKSkKYy5TZXRMb2NhdGlvbigmIzM0O0FtZXJpY2EvTmV3X1lvcmsmIzM0OykKYy5BZGRGdW5jKCYjMzQ7Q1JPTl9UWj1Bc2lhL1Rva3lvIDAgNiAqICogPyYjMzQ7LCAuLi4pCjwvcHJlPjxwPlRoZSBwcmVmaXggJiMzNDtUWj0oVElNRSBaT05FKSYjMzQ7IGlzIGFsc28gc3VwcG9ydGVkIGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eS4KPC9wPjxwPkJlIGF3YXJlIHRoYXQgam9icyBzY2hlZHVsZWQgZHVyaW5nIGRheWxpZ2h0LXNhdmluZ3MgbGVhcC1haGVhZCB0cmFuc2l0aW9ucyB3aWxsCm5vdCBiZSBydW4hCjwvcD48aDQgaWQ9Imhkci1Kb2JfV3JhcHBlcnMiPkpvYiBXcmFwcGVycyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItSm9iX1dyYXBwZXJzIj7CtjwvYT48L2g0PjxwPkEgQ3JvbiBydW5uZXIgbWF5IGJlIGNvbmZpZ3VyZWQgd2l0aCBhIGNoYWluIG9mIGpvYiB3cmFwcGVycyB0byBhZGQKY3Jvc3MtY3V0dGluZyBmdW5jdGlvbmFsaXR5IHRvIGFsbCBzdWJtaXR0ZWQgam9icy4gRm9yIGV4YW1wbGUsIHRoZXkgbWF5IGJlIHVzZWQKdG8gYWNoaWV2ZSB0aGUgZm9sbG93aW5nIGVmZmVjdHM6CjwvcD48dWwgY2xhc3M9IkRvY3VtZW50YXRpb24tYnVsbGV0TGlzdCI+CiAgPGxpPlJlY292ZXIgYW55IHBhbmljcyBmcm9tIGpvYnMgKGFjdGl2YXRlZCBieSBkZWZhdWx0KTwvbGk+CiAgPGxpPkRlbGF5IGEgam9iJiMzOTtzIGV4ZWN1dGlvbiBpZiB0aGUgcHJldmlvdXMgcnVuIGhhc24mIzM5O3QgY29tcGxldGVkIHlldDwvbGk+CiAgPGxpPlNraXAgYSBqb2ImIzM5O3MgZXhlY3V0aW9uIGlmIHRoZSBwcmV2aW91cyBydW4gaGFzbiYjMzk7dCBjb21wbGV0ZWQgeWV0PC9saT4KICA8bGk+TG9nIGVhY2ggam9iJiMzOTtzIGludm9jYXRpb25zPC9saT4KPC91bD48cD5JbnN0YWxsIHdyYXBwZXJzIGZvciBhbGwgam9icyBhZGRlZCB0byBhIGNyb24gdXNpbmcgdGhlIGBjcm9uLldpdGhDaGFpbmAgb3B0aW9uOgo8L3A+PHByZT5jcm9uLk5ldyhjcm9uLldpdGhDaGFpbigKCWNyb24uU2tpcElmU3RpbGxSdW5uaW5nKGxvZ2dlciksCikpCjwvcHJlPjxwPkluc3RhbGwgd3JhcHBlcnMgZm9yIGluZGl2aWR1YWwgam9icyBieSBleHBsaWNpdGx5IHdyYXBwaW5nIHRoZW06CjwvcD48cHJlPmpvYiA9IGNyb24uTmV3Q2hhaW4oCgljcm9uLlNraXBJZlN0aWxsUnVubmluZyhsb2dnZXIpLAopLlRoZW4oam9iKQo8L3ByZT48aDQgaWQ9Imhkci1UaHJlYWRfc2FmZXR5Ij5UaHJlYWQgc2FmZXR5IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1UaHJlYWRfc2FmZXR5Ij7CtjwvYT48L2g0PjxwPlNpbmNlIHRoZSBDcm9uIHNlcnZpY2UgcnVucyBjb25jdXJyZW50bHkgd2l0aCB0aGUgY2FsbGluZyBjb2RlLCBzb21lIGFtb3VudCBvZgpjYXJlIG11c3QgYmUgdGFrZW4gdG8gZW5zdXJlIHByb3BlciBzeW5jaHJvbml6YXRpb24uCjwvcD48cD5BbGwgY3JvbiBtZXRob2RzIGFyZSBkZXNpZ25lZCB0byBiZSBjb3JyZWN0bHkgc3luY2hyb25pemVkIGFzIGxvbmcgYXMgdGhlIGNhbGxlcgplbnN1cmVzIHRoYXQgaW52b2NhdGlvbnMgaGF2ZSBhIGNsZWFyIGhhcHBlbnMtYmVmb3JlIG9yZGVyaW5nIGJldHdlZW4gdGhlbS4KPC9wPjxoNCBpZD0iaGRyLUxvZ2dpbmciPkxvZ2dpbmcgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUxvZ2dpbmciPsK2PC9hPjwvaDQ+PHA+Q3JvbiBkZWZpbmVzIGEgTG9nZ2VyIGludGVyZmFjZSB0aGF0IGlzIGEgc3Vic2V0IG9mIHRoZSBvbmUgZGVmaW5lZCBpbgpnaXRodWIuY29tL2dvLWxvZ3IvbG9nci4gSXQgaGFzIHR3byBsb2dnaW5nIGxldmVscyAoSW5mbyBhbmQgRXJyb3IpLCBhbmQKcGFyYW1ldGVycyBhcmUga2V5L3ZhbHVlIHBhaXJzLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciBjcm9uIGxvZ2dpbmcgdG8gcGx1ZwppbnRvIHN0cnVjdHVyZWQgbG9nZ2luZyBzeXN0ZW1zLiBBbiBhZGFwdGVyLCBbVmVyYm9zZV1QcmludGZMb2dnZXIsIGlzIHByb3ZpZGVkCnRvIHdyYXAgdGhlIHN0YW5kYXJkIGxpYnJhcnkgKmxvZy5Mb2dnZXIuCjwvcD48cD5Gb3IgYWRkaXRpb25hbCBpbnNpZ2h0IGludG8gQ3JvbiBvcGVyYXRpb25zLCB2ZXJib3NlIGxvZ2dpbmcgbWF5IGJlIGFjdGl2YXRlZAp3aGljaCB3aWxsIHJlY29yZCBqb2IgcnVucywgc2NoZWR1bGluZyBkZWNpc2lvbnMsIGFuZCBhZGRlZCBvciByZW1vdmVkIGpvYnMuCkFjdGl2YXRlIGl0IHdpdGggYSBvbmUtb2ZmIGxvZ2dlciBhcyBmb2xsb3dzOgo8L3A+PHByZT5jcm9uLk5ldygKCWNyb24uV2l0aExvZ2dlcigKCQljcm9uLlZlcmJvc2VQcmludGZMb2dnZXIobG9nLk5ldyhvcy5TdGRvdXQsICYjMzQ7Y3JvbjogJiMzNDssIGxvZy5Mc3RkRmxhZ3MpKSkpCjwvcHJlPjxoNCBpZD0iaGRyLUltcGxlbWVudGF0aW9uIj5JbXBsZW1lbnRhdGlvbiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItSW1wbGVtZW50YXRpb24iPsK2PC9hPjwvaDQ+PHA+Q3JvbiBlbnRyaWVzIGFyZSBzdG9yZWQgaW4gYW4gYXJyYXksIHNvcnRlZCBieSB0aGVpciBuZXh0IGFjdGl2YXRpb24gdGltZS4gIENyb24Kc2xlZXBzIHVudGlsIHRoZSBuZXh0IGpvYiBpcyBkdWUgdG8gYmUgcnVuLgo8L3A+PHA+VXBvbiB3YWtpbmc6CjwvcD48dWwgY2xhc3M9IkRvY3VtZW50YXRpb24tYnVsbGV0TGlzdCI+CiAgPGxpPml0IHJ1bnMgZWFjaCBlbnRyeSB0aGF0IGlzIGFjdGl2ZSBvbiB0aGF0IHNlY29uZDwvbGk+CiAgPGxpPml0IGNhbGN1bGF0ZXMgdGhlIG5leHQgcnVuIHRpbWVzIGZvciB0aGUgam9icyB0aGF0IHdlcmUgcnVuPC9saT4KICA8bGk+aXQgcmUtc29ydHMgdGhlIGFycmF5IG9mIGVudHJpZXMgYnkgbmV4dCBhY3RpdmF0aW9uIHRpbWUuPC9saT4KICA8bGk+aXQgZ29lcyB0byBzbGVlcCB1bnRpbCB0aGUgc29vbmVzdCBqb2IuPC9saT4KPC91bD4KPC9zZWN0aW9uPjxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4Ij4KICAgIDxoMyBpZD0icGtnLWluZGV4IiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEhlYWRlciI+SW5kZXggPGEgaHJlZj0iI3BrZy1pbmRleCI+wrY8L2E+PC9oMz4KCjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleExpc3QiPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlIj4KICAgICAgICAgIDxhIGhyZWY9IiNDaGFpbiI+dHlwZSBDaGFpbjwvYT48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZUZ1bmN0aW9ucyI+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI05ld0NoYWluIj5mdW5jIE5ld0NoYWluKGMgLi4uSm9iV3JhcHBlcikgQ2hhaW48L2E+PC9saT4KPC91bD48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZU1ldGhvZHMiPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDaGFpbi5UaGVuIj5mdW5jIChjIENoYWluKSBUaGVuKGogSm9iKSBKb2I8L2E+PC9saT4KPC91bD48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlIj4KICAgICAgICAgIDxhIGhyZWY9IiNDb25zdGFudERlbGF5U2NoZWR1bGUiPnR5cGUgQ29uc3RhbnREZWxheVNjaGVkdWxlPC9hPjwvbGk+CjxsaT48dWwgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlRnVuY3Rpb25zIj4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjRXZlcnkiPmZ1bmMgRXZlcnkoZHVyYXRpb24gdGltZS5EdXJhdGlvbikgQ29uc3RhbnREZWxheVNjaGVkdWxlPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpPjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGVNZXRob2RzIj4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjQ29uc3RhbnREZWxheVNjaGVkdWxlLk5leHQiPmZ1bmMgKHNjaGVkdWxlIENvbnN0YW50RGVsYXlTY2hlZHVsZSkgTmV4dCh0IHRpbWUuVGltZSkgdGltZS5UaW1lPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjQ3JvbiI+dHlwZSBDcm9uPC9hPjwvbGk+CjxsaT48dWwgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlRnVuY3Rpb25zIj4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjTmV3Ij5mdW5jIE5ldyhvcHRzIC4uLk9wdGlvbikgKkNyb248L2E+PC9saT4KPC91bD48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZU1ldGhvZHMiPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDcm9uLkFkZEZ1bmMiPmZ1bmMgKGMgKkNyb24pIEFkZEZ1bmMoc3BlYyBzdHJpbmcsIGNtZCBmdW5jKCkpIChFbnRyeUlELCBlcnJvcik8L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjQ3Jvbi5BZGRKb2IiPmZ1bmMgKGMgKkNyb24pIEFkZEpvYihzcGVjIHN0cmluZywgY21kIEpvYikgKEVudHJ5SUQsIGVycm9yKTwvYT48L2xpPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDcm9uLkVudHJpZXMiPmZ1bmMgKGMgKkNyb24pIEVudHJpZXMoKSBbXUVudHJ5PC9hPjwvbGk+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI0Nyb24uRW50cnkiPmZ1bmMgKGMgKkNyb24pIEVudHJ5KGlkIEVudHJ5SUQpIEVudHJ5PC9hPjwvbGk+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI0Nyb24uTG9jYXRpb24iPmZ1bmMgKGMgKkNyb24pIExvY2F0aW9uKCkgKnRpbWUuTG9jYXRpb248L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjQ3Jvbi5SZW1vdmUiPmZ1bmMgKGMgKkNyb24pIFJlbW92ZShpZCBFbnRyeUlEKTwvYT48L2xpPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDcm9uLlJ1biI+ZnVuYyAoYyAqQ3JvbikgUnVuKCk8L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjQ3Jvbi5TY2hlZHVsZSI+ZnVuYyAoYyAqQ3JvbikgU2NoZWR1bGUoc2NoZWR1bGUgU2NoZWR1bGUsIGNtZCBKb2IpIEVudHJ5SUQ8L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjQ3Jvbi5TdGFydCI+ZnVuYyAoYyAqQ3JvbikgU3RhcnQoKTwvYT48L2xpPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDcm9uLlN0b3AiPmZ1bmMgKGMgKkNyb24pIFN0b3AoKSBjb250ZXh0LkNvbnRleHQ8L2E+PC9saT4KPC91bD48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlIj4KICAgICAgICAgIDxhIGhyZWY9IiNFbnRyeSI+dHlwZSBFbnRyeTwvYT48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZU1ldGhvZHMiPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNFbnRyeS5WYWxpZCI+ZnVuYyAoZSBFbnRyeSkgVmFsaWQoKSBib29sPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjRW50cnlJRCI+dHlwZSBFbnRyeUlEPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGUiPgogICAgICAgICAgPGEgaHJlZj0iI0Z1bmNKb2IiPnR5cGUgRnVuY0pvYjwvYT48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZU1ldGhvZHMiPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNGdW5jSm9iLlJ1biI+ZnVuYyAoZiBGdW5jSm9iKSBSdW4oKTwvYT48L2xpPgo8L3VsPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGUiPgogICAgICAgICAgPGEgaHJlZj0iI0pvYiI+dHlwZSBKb2I8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjSm9iV3JhcHBlciI+dHlwZSBKb2JXcmFwcGVyPC9hPjwvbGk+CjxsaT48dWwgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlRnVuY3Rpb25zIj4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjRGVsYXlJZlN0aWxsUnVubmluZyI+ZnVuYyBEZWxheUlmU3RpbGxSdW5uaW5nKGxvZ2dlciBMb2dnZXIpIEpvYldyYXBwZXI8L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjUmVjb3ZlciI+ZnVuYyBSZWNvdmVyKGxvZ2dlciBMb2dnZXIpIEpvYldyYXBwZXI8L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjU2tpcElmU3RpbGxSdW5uaW5nIj5mdW5jIFNraXBJZlN0aWxsUnVubmluZyhsb2dnZXIgTG9nZ2VyKSBKb2JXcmFwcGVyPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjTG9nZ2VyIj50eXBlIExvZ2dlcjwvYT48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZUZ1bmN0aW9ucyI+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1ByaW50ZkxvZ2dlciI+ZnVuYyBQcmludGZMb2dnZXIobCBpbnRlcmZhY2V7IC4uLiB9KSBMb2dnZXI8L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjVmVyYm9zZVByaW50ZkxvZ2dlciI+ZnVuYyBWZXJib3NlUHJpbnRmTG9nZ2VyKGwgaW50ZXJmYWNleyAuLi4gfSkgTG9nZ2VyPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjT3B0aW9uIj50eXBlIE9wdGlvbjwvYT48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZUZ1bmN0aW9ucyI+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhDaGFpbiI+ZnVuYyBXaXRoQ2hhaW4od3JhcHBlcnMgLi4uSm9iV3JhcHBlcikgT3B0aW9uPC9hPjwvbGk+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhMb2NhdGlvbiI+ZnVuYyBXaXRoTG9jYXRpb24obG9jICp0aW1lLkxvY2F0aW9uKSBPcHRpb248L2E+PC9saT4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjV2l0aExvZ2dlciI+ZnVuYyBXaXRoTG9nZ2VyKGxvZ2dlciBMb2dnZXIpIE9wdGlvbjwvYT48L2xpPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoUGFyc2VyIj5mdW5jIFdpdGhQYXJzZXIocCBTY2hlZHVsZVBhcnNlcikgT3B0aW9uPC9hPjwvbGk+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhTZWNvbmRzIj5mdW5jIFdpdGhTZWNvbmRzKCkgT3B0aW9uPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjUGFyc2VPcHRpb24iPnR5cGUgUGFyc2VPcHRpb248L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjUGFyc2VyIj50eXBlIFBhcnNlcjwvYT48L2xpPgo8bGk+PHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZUZ1bmN0aW9ucyI+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI05ld1BhcnNlciI+ZnVuYyBOZXdQYXJzZXIob3B0aW9ucyBQYXJzZU9wdGlvbikgUGFyc2VyPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpPjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGVNZXRob2RzIj4KPGxpPgogICAgICAgICAgICA8YSBocmVmPSIjUGFyc2VyLlBhcnNlIj5mdW5jIChwIFBhcnNlcikgUGFyc2Uoc3BlYyBzdHJpbmcpIChTY2hlZHVsZSwgZXJyb3IpPC9hPjwvbGk+CjwvdWw+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjU2NoZWR1bGUiPnR5cGUgU2NoZWR1bGU8L2E+PC9saT4KPGxpPjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGVGdW5jdGlvbnMiPgo8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNQYXJzZVN0YW5kYXJkIj5mdW5jIFBhcnNlU3RhbmRhcmQoc3RhbmRhcmRTcGVjIHN0cmluZykgKFNjaGVkdWxlLCBlcnJvcik8L2E+PC9saT4KPC91bD48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlIj4KICAgICAgICAgIDxhIGhyZWY9IiNTY2hlZHVsZVBhcnNlciI+dHlwZSBTY2hlZHVsZVBhcnNlcjwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlIj4KICAgICAgICAgIDxhIGhyZWY9IiNTcGVjU2NoZWR1bGUiPnR5cGUgU3BlY1NjaGVkdWxlPC9hPjwvbGk+CjxsaT48dWwgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhUeXBlTWV0aG9kcyI+CjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1NwZWNTY2hlZHVsZS5OZXh0Ij5mdW5jIChzICpTcGVjU2NoZWR1bGUpIE5leHQodCB0aW1lLlRpbWUpIHRpbWUuVGltZTwvYT48L2xpPgo8L3VsPjwvbGk+CjwvdWw+Cjwvc2VjdGlvbj48aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLWNvbnN0YW50cyIgY2xhc3M9IkRvY3VtZW50YXRpb24tY29uc3RhbnRzSGVhZGVyIj5Db25zdGFudHMgPGEgaHJlZj0iI3BrZy1jb25zdGFudHMiPsK2PC9hPjwvaDM+CgogIDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50cyI+PHAgY2xhc3M9IkRvY3VtZW50YXRpb24tZW1wdHkiPlRoaXMgc2VjdGlvbiBpcyBlbXB0eS48L3A+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLXZhcmlhYmxlcyIgY2xhc3M9IkRvY3VtZW50YXRpb24tdmFyaWFibGVzSGVhZGVyIj5WYXJpYWJsZXMgPGEgaHJlZj0iI3BrZy12YXJpYWJsZXMiPsK2PC9hPjwvaDM+CgogIDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLXZhcmlhYmxlcyI+PHAgY2xhc3M9IkRvY3VtZW50YXRpb24tZW1wdHkiPlRoaXMgc2VjdGlvbiBpcyBlbXB0eS48L3A+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLWZ1bmN0aW9ucyIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zSGVhZGVyIj5GdW5jdGlvbnMgPGEgaHJlZj0iI3BrZy1mdW5jdGlvbnMiPsK2PC9hPjwvaDM+CgogIDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9ucyI+PHAgY2xhc3M9IkRvY3VtZW50YXRpb24tZW1wdHkiPlRoaXMgc2VjdGlvbiBpcyBlbXB0eS48L3A+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLXR5cGVzIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlc0hlYWRlciI+VHlwZXMgPGEgaHJlZj0iI3BrZy10eXBlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZXMiPjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNoYWluIiBkYXRhLWtpbmQ9InR5cGUiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVIZWFkZXIiPgogICAgICA8c3Bhbj50eXBlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2NoYWluLmdvI0wxNSI+Q2hhaW48L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0NoYWluIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgQ2hhaW4gc3RydWN0IHsKCTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBjb250YWlucyBmaWx0ZXJlZCBvciB1bmV4cG9ydGVkIGZpZWxkczwvc3Bhbj4KfTwvcHJlPgogICAgPC9kaXY+CiAgPHA+Q2hhaW4gaXMgYSBzZXF1ZW5jZSBvZiBKb2JXcmFwcGVycyB0aGF0IGRlY29yYXRlcyBzdWJtaXR0ZWQgam9icyB3aXRoCmNyb3NzLWN1dHRpbmcgYmVoYXZpb3JzIGxpa2UgbG9nZ2luZyBvciBzeW5jaHJvbml6YXRpb24uCjwvcD4KPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuYyI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJOZXdDaGFpbiIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmNIZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2NoYWluLmdvI0wyMCI+TmV3Q2hhaW48L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI05ld0NoYWluIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTmV3Q2hhaW4oYyAuLi48YSBocmVmPSIjSm9iV3JhcHBlciI+Sm9iV3JhcHBlcjwvYT4pIDxhIGhyZWY9IiNDaGFpbiI+Q2hhaW48L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5OZXdDaGFpbiByZXR1cm5zIGEgQ2hhaW4gY29uc2lzdGluZyBvZiB0aGUgZ2l2ZW4gSm9iV3JhcHBlcnMuCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZCI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJDaGFpbi5UaGVuIiBkYXRhLWtpbmQ9Im1ldGhvZCIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZEhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgKENoYWluKSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jaGFpbi5nbyNMMzAiPlRoZW48L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0NoYWluLlRoZW4iPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyAoYyA8YSBocmVmPSIjQ2hhaW4iPkNoYWluPC9hPikgVGhlbihqIDxhIGhyZWY9IiNKb2IiPkpvYjwvYT4pIDxhIGhyZWY9IiNKb2IiPkpvYjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPlRoZW4gZGVjb3JhdGVzIHRoZSBnaXZlbiBqb2Igd2l0aCBhbGwgSm9iV3JhcHBlcnMgaW4gdGhlIGNoYWluLgo8L3A+PHA+VGhpczoKPC9wPjxwcmU+TmV3Q2hhaW4obTEsIG0yLCBtMykuVGhlbihqb2IpCjwvcHJlPjxwPmlzIGVxdWl2YWxlbnQgdG86CjwvcD48cHJlPm0xKG0yKG0zKGpvYikpKQo8L3ByZT4KCiAgCgogIDwvZGl2PgogIAoKICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNvbnN0YW50RGVsYXlTY2hlZHVsZSIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jb25zdGFudGRlbGF5LmdvI0w3Ij5Db25zdGFudERlbGF5U2NoZWR1bGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0NvbnN0YW50RGVsYXlTY2hlZHVsZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT50eXBlIENvbnN0YW50RGVsYXlTY2hlZHVsZSBzdHJ1Y3Qgewo8c3BhbiBpZD0iQ29uc3RhbnREZWxheVNjaGVkdWxlLkRlbGF5IiBkYXRhLWtpbmQ9ImZpZWxkIj4JRGVsYXkgPGEgaHJlZj0iL3RpbWUiPnRpbWU8L2E+LjxhIGhyZWY9Ii90aW1lI0R1cmF0aW9uIj5EdXJhdGlvbjwvYT4KPC9zcGFuPn08L3ByZT4KICAgIDwvZGl2PgogIDxwPkNvbnN0YW50RGVsYXlTY2hlZHVsZSByZXByZXNlbnRzIGEgc2ltcGxlIHJlY3VycmluZyBkdXR5IGN5Y2xlLCBlLmcuICYjMzQ7RXZlcnkgNSBtaW51dGVzJiMzNDsuCkl0IGRvZXMgbm90IHN1cHBvcnQgam9icyBtb3JlIGZyZXF1ZW50IHRoYW4gb25jZSBhIHNlY29uZC4KPC9wPgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkV2ZXJ5IiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuY0hlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY29uc3RhbnRkZWxheS5nbyNMMTQiPkV2ZXJ5PC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNFdmVyeSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIEV2ZXJ5KGR1cmF0aW9uIDxhIGhyZWY9Ii90aW1lIj50aW1lPC9hPi48YSBocmVmPSIvdGltZSNEdXJhdGlvbiI+RHVyYXRpb248L2E+KSA8YSBocmVmPSIjQ29uc3RhbnREZWxheVNjaGVkdWxlIj5Db25zdGFudERlbGF5U2NoZWR1bGU8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5FdmVyeSByZXR1cm5zIGEgY3JvbnRhYiBTY2hlZHVsZSB0aGF0IGFjdGl2YXRlcyBvbmNlIGV2ZXJ5IGR1cmF0aW9uLgpEZWxheXMgb2YgbGVzcyB0aGFuIGEgc2Vjb25kIGFyZSBub3Qgc3VwcG9ydGVkICh3aWxsIHJvdW5kIHVwIHRvIDEgc2Vjb25kKS4KQW55IGZpZWxkcyBsZXNzIHRoYW4gYSBTZWNvbmQgYXJlIHRydW5jYXRlZC4KPC9wPgoKICAKCiAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNvbnN0YW50RGVsYXlTY2hlZHVsZS5OZXh0IiBkYXRhLWtpbmQ9Im1ldGhvZCIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZEhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgKENvbnN0YW50RGVsYXlTY2hlZHVsZSkgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY29uc3RhbnRkZWxheS5nbyNMMjUiPk5leHQ8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0NvbnN0YW50RGVsYXlTY2hlZHVsZS5OZXh0Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKHNjaGVkdWxlIDxhIGhyZWY9IiNDb25zdGFudERlbGF5U2NoZWR1bGUiPkNvbnN0YW50RGVsYXlTY2hlZHVsZTwvYT4pIE5leHQodCA8YSBocmVmPSIvdGltZSI+dGltZTwvYT4uPGEgaHJlZj0iL3RpbWUjVGltZSI+VGltZTwvYT4pIDxhIGhyZWY9Ii90aW1lIj50aW1lPC9hPi48YSBocmVmPSIvdGltZSNUaW1lIj5UaW1lPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TmV4dCByZXR1cm5zIHRoZSBuZXh0IHRpbWUgdGhpcyBzaG91bGQgYmUgcnVuLgpUaGlzIHJvdW5kcyBzbyB0aGF0IHRoZSBuZXh0IGFjdGl2YXRpb24gdGltZSB3aWxsIGJlIG9uIHRoZSBzZWNvbmQuCjwvcD4KCiAgCgogIDwvZGl2PgogIAoKICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNyb24iIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY3Jvbi5nbyNMMTMiPkNyb248L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0Nyb24iPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+dHlwZSBDcm9uIHN0cnVjdCB7Cgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gY29udGFpbnMgZmlsdGVyZWQgb3IgdW5leHBvcnRlZCBmaWVsZHM8L3NwYW4+Cn08L3ByZT4KICAgIDwvZGl2PgogIDxwPkNyb24ga2VlcHMgdHJhY2sgb2YgYW55IG51bWJlciBvZiBlbnRyaWVzLCBpbnZva2luZyB0aGUgYXNzb2NpYXRlZCBmdW5jIGFzCnNwZWNpZmllZCBieSB0aGUgc2NoZWR1bGUuIEl0IG1heSBiZSBzdGFydGVkLCBzdG9wcGVkLCBhbmQgdGhlIGVudHJpZXMgbWF5CmJlIGluc3BlY3RlZCB3aGlsZSBydW5uaW5nLgo8L3A+CjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmMiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTmV3IiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuY0hlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY3Jvbi5nbyNMMTEzIj5OZXc8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI05ldyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE5ldyhvcHRzIC4uLjxhIGhyZWY9IiNPcHRpb24iPk9wdGlvbjwvYT4pICo8YSBocmVmPSIjQ3JvbiI+Q3JvbjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPk5ldyByZXR1cm5zIGEgbmV3IENyb24gam9iIHJ1bm5lciwgbW9kaWZpZWQgYnkgdGhlIGdpdmVuIG9wdGlvbnMuCjwvcD48cD5BdmFpbGFibGUgU2V0dGluZ3MKPC9wPjxwcmU+VGltZSBab25lCiAgRGVzY3JpcHRpb246IFRoZSB0aW1lIHpvbmUgaW4gd2hpY2ggc2NoZWR1bGVzIGFyZSBpbnRlcnByZXRlZAogIERlZmF1bHQ6ICAgICB0aW1lLkxvY2FsCgpQYXJzZXIKICBEZXNjcmlwdGlvbjogUGFyc2VyIGNvbnZlcnRzIGNyb24gc3BlYyBzdHJpbmdzIGludG8gY3Jvbi5TY2hlZHVsZXMuCiAgRGVmYXVsdDogICAgIEFjY2VwdHMgdGhpcyBzcGVjOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9uCgpDaGFpbgogIERlc2NyaXB0aW9uOiBXcmFwIHN1Ym1pdHRlZCBqb2JzIHRvIGN1c3RvbWl6ZSBiZWhhdmlvci4KICBEZWZhdWx0OiAgICAgQSBjaGFpbiB0aGF0IHJlY292ZXJzIHBhbmljcyBhbmQgbG9ncyB0aGVtIHRvIHN0ZGVyci4KPC9wcmU+PHA+U2VlICYjMzQ7Y3Jvbi5XaXRoKiYjMzQ7IHRvIG1vZGlmeSB0aGUgZGVmYXVsdCBiZWhhdmlvci4KPC9wPgoKICAKCiAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNyb24uQWRkRnVuYyIgZGF0YS1raW5kPSJtZXRob2QiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVNZXRob2RIZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jICgqQ3JvbikgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY3Jvbi5nbyNMMTQxIj5BZGRGdW5jPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNDcm9uLkFkZEZ1bmMiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyAoYyAqPGEgaHJlZj0iI0Nyb24iPkNyb248L2E+KSBBZGRGdW5jKHNwZWMgPGEgaHJlZj0iL2J1aWx0aW4jc3RyaW5nIj5zdHJpbmc8L2E+LCBjbWQgZnVuYygpKSAoPGEgaHJlZj0iI0VudHJ5SUQiPkVudHJ5SUQ8L2E+LCA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+KTwvcHJlPgogICAgPC9kaXY+CiAgPHA+QWRkRnVuYyBhZGRzIGEgZnVuYyB0byB0aGUgQ3JvbiB0byBiZSBydW4gb24gdGhlIGdpdmVuIHNjaGVkdWxlLgpUaGUgc3BlYyBpcyBwYXJzZWQgdXNpbmcgdGhlIHRpbWUgem9uZSBvZiB0aGlzIENyb24gaW5zdGFuY2UgYXMgdGhlIGRlZmF1bHQuCkFuIG9wYXF1ZSBJRCBpcyByZXR1cm5lZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGxhdGVyIHJlbW92ZSBpdC4KPC9wPgoKICAKCiAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNyb24uQWRkSm9iIiBkYXRhLWtpbmQ9Im1ldGhvZCIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZEhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgKCpDcm9uKSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jcm9uLmdvI0wxNDgiPkFkZEpvYjwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ3Jvbi5BZGRKb2IiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyAoYyAqPGEgaHJlZj0iI0Nyb24iPkNyb248L2E+KSBBZGRKb2Ioc3BlYyA8YSBocmVmPSIvYnVpbHRpbiNzdHJpbmciPnN0cmluZzwvYT4sIGNtZCA8YSBocmVmPSIjSm9iIj5Kb2I8L2E+KSAoPGEgaHJlZj0iI0VudHJ5SUQiPkVudHJ5SUQ8L2E+LCA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+KTwvcHJlPgogICAgPC9kaXY+CiAgPHA+QWRkSm9iIGFkZHMgYSBKb2IgdG8gdGhlIENyb24gdG8gYmUgcnVuIG9uIHRoZSBnaXZlbiBzY2hlZHVsZS4KVGhlIHNwZWMgaXMgcGFyc2VkIHVzaW5nIHRoZSB0aW1lIHpvbmUgb2YgdGhpcyBDcm9uIGluc3RhbmNlIGFzIHRoZSBkZWZhdWx0LgpBbiBvcGFxdWUgSUQgaXMgcmV0dXJuZWQgdGhhdCBjYW4gYmUgdXNlZCB0byBsYXRlciByZW1vdmUgaXQuCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZCI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJDcm9uLkVudHJpZXMiIGRhdGEta2luZD0ibWV0aG9kIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyAoKkNyb24pIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2Nyb24uZ28jTDE3NyI+RW50cmllczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ3Jvbi5FbnRyaWVzIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKGMgKjxhIGhyZWY9IiNDcm9uIj5Dcm9uPC9hPikgRW50cmllcygpIFtdPGEgaHJlZj0iI0VudHJ5Ij5FbnRyeTwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPkVudHJpZXMgcmV0dXJucyBhIHNuYXBzaG90IG9mIHRoZSBjcm9uIGVudHJpZXMuCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZCI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJDcm9uLkVudHJ5IiBkYXRhLWtpbmQ9Im1ldGhvZCIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZEhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgKCpDcm9uKSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jcm9uLmdvI0wxOTQiPkVudHJ5PC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNDcm9uLkVudHJ5Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKGMgKjxhIGhyZWY9IiNDcm9uIj5Dcm9uPC9hPikgRW50cnkoaWQgPGEgaHJlZj0iI0VudHJ5SUQiPkVudHJ5SUQ8L2E+KSA8YSBocmVmPSIjRW50cnkiPkVudHJ5PC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+RW50cnkgcmV0dXJucyBhIHNuYXBzaG90IG9mIHRoZSBnaXZlbiBlbnRyeSwgb3IgbmlsIGlmIGl0IGNvdWxkbiYjMzk7dCBiZSBmb3VuZC4KPC9wPgoKICAKCiAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNyb24uTG9jYXRpb24iIGRhdGEta2luZD0ibWV0aG9kIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyAoKkNyb24pIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2Nyb24uZ28jTDE4OSI+TG9jYXRpb248L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0Nyb24uTG9jYXRpb24iPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyAoYyAqPGEgaHJlZj0iI0Nyb24iPkNyb248L2E+KSBMb2NhdGlvbigpICo8YSBocmVmPSIvdGltZSI+dGltZTwvYT4uPGEgaHJlZj0iL3RpbWUjTG9jYXRpb24iPkxvY2F0aW9uPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TG9jYXRpb24gZ2V0cyB0aGUgdGltZSB6b25lIGxvY2F0aW9uCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZCI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJDcm9uLlJlbW92ZSIgZGF0YS1raW5kPSJtZXRob2QiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVNZXRob2RIZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jICgqQ3JvbikgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY3Jvbi5nbyNMMjA0Ij5SZW1vdmU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0Nyb24uUmVtb3ZlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKGMgKjxhIGhyZWY9IiNDcm9uIj5Dcm9uPC9hPikgUmVtb3ZlKGlkIDxhIGhyZWY9IiNFbnRyeUlEIj5FbnRyeUlEPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPlJlbW92ZSBhbiBlbnRyeSBmcm9tIGJlaW5nIHJ1biBpbiB0aGUgZnV0dXJlLgo8L3A+CgogIAoKICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVNZXRob2QiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iQ3Jvbi5SdW4iIGRhdGEta2luZD0ibWV0aG9kIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyAoKkNyb24pIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2Nyb24uZ28jTDIyNiI+UnVuPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNDcm9uLlJ1biI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIChjICo8YSBocmVmPSIjQ3JvbiI+Q3JvbjwvYT4pIFJ1bigpPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5SdW4gdGhlIGNyb24gc2NoZWR1bGVyLCBvciBuby1vcCBpZiBhbHJlYWR5IHJ1bm5pbmcuCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZCI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJDcm9uLlNjaGVkdWxlIiBkYXRhLWtpbmQ9Im1ldGhvZCIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZEhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgKCpDcm9uKSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jcm9uLmdvI0wxNTgiPlNjaGVkdWxlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNDcm9uLlNjaGVkdWxlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKGMgKjxhIGhyZWY9IiNDcm9uIj5Dcm9uPC9hPikgU2NoZWR1bGUoc2NoZWR1bGUgPGEgaHJlZj0iI1NjaGVkdWxlIj5TY2hlZHVsZTwvYT4sIGNtZCA8YSBocmVmPSIjSm9iIj5Kb2I8L2E+KSA8YSBocmVmPSIjRW50cnlJRCI+RW50cnlJRDwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPlNjaGVkdWxlIGFkZHMgYSBKb2IgdG8gdGhlIENyb24gdG8gYmUgcnVuIG9uIHRoZSBnaXZlbiBzY2hlZHVsZS4KVGhlIGpvYiBpcyB3cmFwcGVkIHdpdGggdGhlIGNvbmZpZ3VyZWQgQ2hhaW4uCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZCI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJDcm9uLlN0YXJ0IiBkYXRhLWtpbmQ9Im1ldGhvZCIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZEhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgKCpDcm9uKSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jcm9uLmdvI0wyMTUiPlN0YXJ0PC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNDcm9uLlN0YXJ0Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKGMgKjxhIGhyZWY9IiNDcm9uIj5Dcm9uPC9hPikgU3RhcnQoKTwvcHJlPgogICAgPC9kaXY+CiAgPHA+U3RhcnQgdGhlIGNyb24gc2NoZWR1bGVyIGluIGl0cyBvd24gZ29yb3V0aW5lLCBvciBuby1vcCBpZiBhbHJlYWR5IHN0YXJ0ZWQuCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZCI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJDcm9uLlN0b3AiIGRhdGEta2luZD0ibWV0aG9kIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyAoKkNyb24pIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2Nyb24uZ28jTDMyMyI+U3RvcDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ3Jvbi5TdG9wIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKGMgKjxhIGhyZWY9IiNDcm9uIj5Dcm9uPC9hPikgU3RvcCgpIDxhIGhyZWY9Ii9jb250ZXh0Ij5jb250ZXh0PC9hPi48YSBocmVmPSIvY29udGV4dCNDb250ZXh0Ij5Db250ZXh0PC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+U3RvcCBzdG9wcyB0aGUgY3JvbiBzY2hlZHVsZXIgaWYgaXQgaXMgcnVubmluZzsgb3RoZXJ3aXNlIGl0IGRvZXMgbm90aGluZy4KQSBjb250ZXh0IGlzIHJldHVybmVkIHNvIHRoZSBjYWxsZXIgY2FuIHdhaXQgZm9yIHJ1bm5pbmcgam9icyB0byBjb21wbGV0ZS4KPC9wPgoKICAKCiAgPC9kaXY+CiAgCgogICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlIj4KICAgICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iRW50cnkiIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY3Jvbi5nbyNMNTAiPkVudHJ5PC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNFbnRyeSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT50eXBlIEVudHJ5IHN0cnVjdCB7CjxzcGFuIGlkPSJFbnRyeS5JRCIgZGF0YS1raW5kPSJmaWVsZCI+CTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBJRCBpcyB0aGUgY3Jvbi1hc3NpZ25lZCBJRCBvZiB0aGlzIGVudHJ5LCB3aGljaCBtYXkgYmUgdXNlZCB0byBsb29rIHVwIGE8L3NwYW4+Cjwvc3Bhbj4JPHNwYW4gY2xhc3M9ImNvbW1lbnQiPi8vIHNuYXBzaG90IG9yIHJlbW92ZSBpdC48L3NwYW4+CglJRCA8YSBocmVmPSIjRW50cnlJRCI+RW50cnlJRDwvYT4KCjxzcGFuIGlkPSJFbnRyeS5TY2hlZHVsZSIgZGF0YS1raW5kPSJmaWVsZCI+CTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBTY2hlZHVsZSBvbiB3aGljaCB0aGlzIGpvYiBzaG91bGQgYmUgcnVuLjwvc3Bhbj4KPC9zcGFuPglTY2hlZHVsZSA8YSBocmVmPSIjU2NoZWR1bGUiPlNjaGVkdWxlPC9hPgoKPHNwYW4gaWQ9IkVudHJ5Lk5leHQiIGRhdGEta2luZD0iZmllbGQiPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gTmV4dCB0aW1lIHRoZSBqb2Igd2lsbCBydW4sIG9yIHRoZSB6ZXJvIHRpbWUgaWYgQ3JvbiBoYXMgbm90IGJlZW48L3NwYW4+Cjwvc3Bhbj4JPHNwYW4gY2xhc3M9ImNvbW1lbnQiPi8vIHN0YXJ0ZWQgb3IgdGhpcyBlbnRyeSYjMzk7cyBzY2hlZHVsZSBpcyB1bnNhdGlzZmlhYmxlPC9zcGFuPgoJTmV4dCA8YSBocmVmPSIvdGltZSI+dGltZTwvYT4uPGEgaHJlZj0iL3RpbWUjVGltZSI+VGltZTwvYT4KCjxzcGFuIGlkPSJFbnRyeS5QcmV2IiBkYXRhLWtpbmQ9ImZpZWxkIj4JPHNwYW4gY2xhc3M9ImNvbW1lbnQiPi8vIFByZXYgaXMgdGhlIGxhc3QgdGltZSB0aGlzIGpvYiB3YXMgcnVuLCBvciB0aGUgemVybyB0aW1lIGlmIG5ldmVyLjwvc3Bhbj4KPC9zcGFuPglQcmV2IDxhIGhyZWY9Ii90aW1lIj50aW1lPC9hPi48YSBocmVmPSIvdGltZSNUaW1lIj5UaW1lPC9hPgoKPHNwYW4gaWQ9IkVudHJ5LldyYXBwZWRKb2IiIGRhdGEta2luZD0iZmllbGQiPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gV3JhcHBlZEpvYiBpcyB0aGUgdGhpbmcgdG8gcnVuIHdoZW4gdGhlIFNjaGVkdWxlIGlzIGFjdGl2YXRlZC48L3NwYW4+Cjwvc3Bhbj4JV3JhcHBlZEpvYiA8YSBocmVmPSIjSm9iIj5Kb2I8L2E+Cgo8c3BhbiBpZD0iRW50cnkuSm9iIiBkYXRhLWtpbmQ9ImZpZWxkIj4JPHNwYW4gY2xhc3M9ImNvbW1lbnQiPi8vIEpvYiBpcyB0aGUgdGhpbmcgdGhhdCB3YXMgc3VibWl0dGVkIHRvIGNyb24uPC9zcGFuPgo8L3NwYW4+CTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBJdCBpcyBrZXB0IGFyb3VuZCBzbyB0aGF0IHVzZXIgY29kZSB0aGF0IG5lZWRzIHRvIGdldCBhdCB0aGUgam9iIGxhdGVyLDwvc3Bhbj4KCTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBlLmcuIHZpYSBFbnRyaWVzKCkgY2FuIGRvIHNvLjwvc3Bhbj4KCUpvYiA8YSBocmVmPSIjSm9iIj5Kb2I8L2E+Cn08L3ByZT4KICAgIDwvZGl2PgogIDxwPkVudHJ5IGNvbnNpc3RzIG9mIGEgc2NoZWR1bGUgYW5kIHRoZSBmdW5jIHRvIGV4ZWN1dGUgb24gdGhhdCBzY2hlZHVsZS4KPC9wPgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVNZXRob2QiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iRW50cnkuVmFsaWQiIGRhdGEta2luZD0ibWV0aG9kIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyAoRW50cnkpIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2Nyb24uZ28jTDc1Ij5WYWxpZDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjRW50cnkuVmFsaWQiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+ZnVuYyAoZSA8YSBocmVmPSIjRW50cnkiPkVudHJ5PC9hPikgVmFsaWQoKSA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+VmFsaWQgcmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgbm90IHRoZSB6ZXJvIGVudHJ5Lgo8L3A+CgogIAoKICA8L2Rpdj4KICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJFbnRyeUlEIiBkYXRhLWtpbmQ9InR5cGUiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVIZWFkZXIiPgogICAgICA8c3Bhbj50eXBlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2Nyb24uZ28jTDQ3Ij5FbnRyeUlEPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNFbnRyeUlEIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgRW50cnlJRCA8YSBocmVmPSIvYnVpbHRpbiNpbnQiPmludDwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPkVudHJ5SUQgaWRlbnRpZmllcyBhbiBlbnRyeSB3aXRoaW4gYSBDcm9uIGluc3RhbmNlCjwvcD4KCiAgCgogICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlIj4KICAgICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iRnVuY0pvYiIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jcm9uLmdvI0wxMzQiPkZ1bmNKb2I8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0Z1bmNKb2IiPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+dHlwZSBGdW5jSm9iIGZ1bmMoKTwvcHJlPgogICAgPC9kaXY+CiAgPHA+RnVuY0pvYiBpcyBhIHdyYXBwZXIgdGhhdCB0dXJucyBhIGZ1bmMoKSBpbnRvIGEgY3Jvbi5Kb2IKPC9wPgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVNZXRob2QiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iRnVuY0pvYi5SdW4iIGRhdGEta2luZD0ibWV0aG9kIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyAoRnVuY0pvYikgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY3Jvbi5nbyNMMTM2Ij5SdW48L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI0Z1bmNKb2IuUnVuIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKGYgPGEgaHJlZj0iI0Z1bmNKb2IiPkZ1bmNKb2I8L2E+KSBSdW4oKTwvcHJlPgogICAgPC9kaXY+CiAgCgogIAoKICA8L2Rpdj4KICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJKb2IiIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY3Jvbi5nbyNMMzUiPkpvYjwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjSm9iIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgSm9iIGludGVyZmFjZSB7CjxzcGFuIGlkPSJKb2IuUnVuIiBkYXRhLWtpbmQ9Im1ldGhvZCI+CVJ1bigpCjwvc3Bhbj59PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5Kb2IgaXMgYW4gaW50ZXJmYWNlIGZvciBzdWJtaXR0ZWQgY3JvbiBqb2JzLgo8L3A+CgogIAoKICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkpvYldyYXBwZXIiIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY2hhaW4uZ28jTDExIj5Kb2JXcmFwcGVyPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNKb2JXcmFwcGVyIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgSm9iV3JhcHBlciBmdW5jKDxhIGhyZWY9IiNKb2IiPkpvYjwvYT4pIDxhIGhyZWY9IiNKb2IiPkpvYjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPkpvYldyYXBwZXIgZGVjb3JhdGVzIHRoZSBnaXZlbiBKb2Igd2l0aCBzb21lIGJlaGF2aW9yLgo8L3A+CjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmMiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iRGVsYXlJZlN0aWxsUnVubmluZyIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmNIZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2NoYWluLmdvI0w2MSI+RGVsYXlJZlN0aWxsUnVubmluZzwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjRGVsYXlJZlN0aWxsUnVubmluZyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIERlbGF5SWZTdGlsbFJ1bm5pbmcobG9nZ2VyIDxhIGhyZWY9IiNMb2dnZXIiPkxvZ2dlcjwvYT4pIDxhIGhyZWY9IiNKb2JXcmFwcGVyIj5Kb2JXcmFwcGVyPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+RGVsYXlJZlN0aWxsUnVubmluZyBzZXJpYWxpemVzIGpvYnMsIGRlbGF5aW5nIHN1YnNlcXVlbnQgcnVucyB1bnRpbCB0aGUKcHJldmlvdXMgb25lIGlzIGNvbXBsZXRlLiBKb2JzIHJ1bm5pbmcgYWZ0ZXIgYSBkZWxheSBvZiBtb3JlIHRoYW4gYSBtaW51dGUKaGF2ZSB0aGUgZGVsYXkgbG9nZ2VkIGF0IEluZm8uCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmMiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iUmVjb3ZlciIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmNIZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2NoYWluLmdvI0wzOCI+UmVjb3ZlcjwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjUmVjb3ZlciI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFJlY292ZXIobG9nZ2VyIDxhIGhyZWY9IiNMb2dnZXIiPkxvZ2dlcjwvYT4pIDxhIGhyZWY9IiNKb2JXcmFwcGVyIj5Kb2JXcmFwcGVyPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+UmVjb3ZlciBwYW5pY3MgaW4gd3JhcHBlZCBqb2JzIGFuZCBsb2cgdGhlbSB3aXRoIHRoZSBwcm92aWRlZCBsb2dnZXIuCjwvcD4KCiAgCgogIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmMiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iU2tpcElmU3RpbGxSdW5uaW5nIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuY0hlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY2hhaW4uZ28jTDc4Ij5Ta2lwSWZTdGlsbFJ1bm5pbmc8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1NraXBJZlN0aWxsUnVubmluZyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFNraXBJZlN0aWxsUnVubmluZyhsb2dnZXIgPGEgaHJlZj0iI0xvZ2dlciI+TG9nZ2VyPC9hPikgPGEgaHJlZj0iI0pvYldyYXBwZXIiPkpvYldyYXBwZXI8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5Ta2lwSWZTdGlsbFJ1bm5pbmcgc2tpcHMgYW4gaW52b2NhdGlvbiBvZiB0aGUgSm9iIGlmIGEgcHJldmlvdXMgaW52b2NhdGlvbiBpcwpzdGlsbCBydW5uaW5nLiBJdCBsb2dzIHNraXBzIHRvIHRoZSBnaXZlbiBsb2dnZXIgYXQgSW5mbyBsZXZlbC4KPC9wPgoKICAKCiAgPC9kaXY+CiAgCgogICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlIj4KICAgICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTG9nZ2VyIiBkYXRhLWtpbmQ9InR5cGUiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVIZWFkZXIiPgogICAgICA8c3Bhbj50eXBlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2xvZ2dlci5nbyNMMTkiPkxvZ2dlcjwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjTG9nZ2VyIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgTG9nZ2VyIGludGVyZmFjZSB7CjxzcGFuIGlkPSJMb2dnZXIuSW5mbyIgZGF0YS1raW5kPSJtZXRob2QiPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gSW5mbyBsb2dzIHJvdXRpbmUgbWVzc2FnZXMgYWJvdXQgY3JvbiYjMzk7cyBvcGVyYXRpb24uPC9zcGFuPgo8L3NwYW4+CUluZm8obXNnIDxhIGhyZWY9Ii9idWlsdGluI3N0cmluZyI+c3RyaW5nPC9hPiwga2V5c0FuZFZhbHVlcyAuLi5pbnRlcmZhY2V7fSkKPHNwYW4gaWQ9IkxvZ2dlci5FcnJvciIgZGF0YS1raW5kPSJtZXRob2QiPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gRXJyb3IgbG9ncyBhbiBlcnJvciBjb25kaXRpb24uPC9zcGFuPgo8L3NwYW4+CUVycm9yKGVyciA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+LCBtc2cgPGEgaHJlZj0iL2J1aWx0aW4jc3RyaW5nIj5zdHJpbmc8L2E+LCBrZXlzQW5kVmFsdWVzIC4uLmludGVyZmFjZXt9KQp9PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5Mb2dnZXIgaXMgdGhlIGludGVyZmFjZSB1c2VkIGluIHRoaXMgcGFja2FnZSBmb3IgbG9nZ2luZywgc28gdGhhdCBhbnkgYmFja2VuZApjYW4gYmUgcGx1Z2dlZCBpbi4gSXQgaXMgYSBzdWJzZXQgb2YgdGhlIGdpdGh1Yi5jb20vZ28tbG9nci9sb2dyIGludGVyZmFjZS4KPC9wPgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVWYXJpYWJsZSI+CiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT48c3BhbiBpZD0iRGVmYXVsdExvZ2dlciIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+dmFyIERlZmF1bHRMb2dnZXIgPGEgaHJlZj0iI0xvZ2dlciI+TG9nZ2VyPC9hPiA9IDxhIGhyZWY9IiNQcmludGZMb2dnZXIiPlByaW50ZkxvZ2dlcjwvYT4oPGEgaHJlZj0iL2xvZyI+bG9nPC9hPi48YSBocmVmPSIvbG9nI05ldyI+TmV3PC9hPig8YSBocmVmPSIvb3MiPm9zPC9hPi48YSBocmVmPSIvb3MjU3Rkb3V0Ij5TdGRvdXQ8L2E+LCAmIzM0O2Nyb246ICYjMzQ7LCA8YSBocmVmPSIvbG9nIj5sb2c8L2E+LjxhIGhyZWY9Ii9sb2cjTHN0ZEZsYWdzIj5Mc3RkRmxhZ3M8L2E+KSk8L3NwYW4+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5EZWZhdWx0TG9nZ2VyIGlzIHVzZWQgYnkgQ3JvbiBpZiBub25lIGlzIHNwZWNpZmllZC4KPC9wPgo8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVWYXJpYWJsZSI+CiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT48c3BhbiBpZD0iRGlzY2FyZExvZ2dlciIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+dmFyIERpc2NhcmRMb2dnZXIgPGEgaHJlZj0iI0xvZ2dlciI+TG9nZ2VyPC9hPiA9IDxhIGhyZWY9IiNQcmludGZMb2dnZXIiPlByaW50ZkxvZ2dlcjwvYT4oPGEgaHJlZj0iL2xvZyI+bG9nPC9hPi48YSBocmVmPSIvbG9nI05ldyI+TmV3PC9hPig8YSBocmVmPSIvaW8vaW91dGlsIj5pb3V0aWw8L2E+LjxhIGhyZWY9Ii9pby9pb3V0aWwjRGlzY2FyZCI+RGlzY2FyZDwvYT4sICYjMzQ7JiMzNDssIDApKTwvc3Bhbj48L3ByZT4KICAgIDwvZGl2PgogIDxwPkRpc2NhcmRMb2dnZXIgY2FuIGJlIHVzZWQgYnkgY2FsbGVycyB0byBkaXNjYXJkIGFsbCBsb2cgbWVzc2FnZXMuCjwvcD4KPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuYyI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJQcmludGZMb2dnZXIiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9sb2dnZXIuZ28jTDI4Ij5QcmludGZMb2dnZXI8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1ByaW50ZkxvZ2dlciI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFByaW50ZkxvZ2dlcihsIGludGVyZmFjZXsgUHJpbnRmKDxhIGhyZWY9Ii9idWlsdGluI3N0cmluZyI+c3RyaW5nPC9hPiwgLi4uaW50ZXJmYWNle30pIH0pIDxhIGhyZWY9IiNMb2dnZXIiPkxvZ2dlcjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPlByaW50ZkxvZ2dlciB3cmFwcyBhIFByaW50Zi1iYXNlZCBsb2dnZXIgKHN1Y2ggYXMgdGhlIHN0YW5kYXJkIGxpYnJhcnkgJiMzNDtsb2cmIzM0OykKaW50byBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgTG9nZ2VyIGludGVyZmFjZSB3aGljaCBsb2dzIGVycm9ycyBvbmx5Lgo8L3A+CgogIAoKICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IlZlcmJvc2VQcmludGZMb2dnZXIiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9sb2dnZXIuZ28jTDM0Ij5WZXJib3NlUHJpbnRmTG9nZ2VyPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNWZXJib3NlUHJpbnRmTG9nZ2VyIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgVmVyYm9zZVByaW50ZkxvZ2dlcihsIGludGVyZmFjZXsgUHJpbnRmKDxhIGhyZWY9Ii9idWlsdGluI3N0cmluZyI+c3RyaW5nPC9hPiwgLi4uaW50ZXJmYWNle30pIH0pIDxhIGhyZWY9IiNMb2dnZXIiPkxvZ2dlcjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPlZlcmJvc2VQcmludGZMb2dnZXIgd3JhcHMgYSBQcmludGYtYmFzZWQgbG9nZ2VyIChzdWNoIGFzIHRoZSBzdGFuZGFyZCBsaWJyYXJ5CiYjMzQ7bG9nJiMzNDspIGludG8gYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIExvZ2dlciBpbnRlcmZhY2Ugd2hpY2ggbG9ncyBldmVyeXRoaW5nLgo8L3A+CgogIAoKICA8L2Rpdj4KICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJPcHRpb24iIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvb3B0aW9uLmdvI0w4Ij5PcHRpb248L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI09wdGlvbiI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT50eXBlIE9wdGlvbiBmdW5jKCo8YSBocmVmPSIjQ3JvbiI+Q3JvbjwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5PcHRpb24gcmVwcmVzZW50cyBhIG1vZGlmaWNhdGlvbiB0byB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBhIENyb24uCjwvcD4KPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuYyI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoQ2hhaW4iIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9vcHRpb24uZ28jTDM0Ij5XaXRoQ2hhaW48L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhDaGFpbiI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhDaGFpbih3cmFwcGVycyAuLi48YSBocmVmPSIjSm9iV3JhcHBlciI+Sm9iV3JhcHBlcjwvYT4pIDxhIGhyZWY9IiNPcHRpb24iPk9wdGlvbjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhDaGFpbiBzcGVjaWZpZXMgSm9iIHdyYXBwZXJzIHRvIGFwcGx5IHRvIGFsbCBqb2JzIGFkZGVkIHRvIHRoaXMgY3Jvbi4KUmVmZXIgdG8gdGhlIENoYWluKiBmdW5jdGlvbnMgaW4gdGhpcyBwYWNrYWdlIGZvciBwcm92aWRlZCB3cmFwcGVycy4KPC9wPgoKICAKCiAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuYyI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoTG9jYXRpb24iIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9vcHRpb24uZ28jTDExIj5XaXRoTG9jYXRpb248L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhMb2NhdGlvbiI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhMb2NhdGlvbihsb2MgKjxhIGhyZWY9Ii90aW1lIj50aW1lPC9hPi48YSBocmVmPSIvdGltZSNMb2NhdGlvbiI+TG9jYXRpb248L2E+KSA8YSBocmVmPSIjT3B0aW9uIj5PcHRpb248L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoTG9jYXRpb24gb3ZlcnJpZGVzIHRoZSB0aW1lem9uZSBvZiB0aGUgY3JvbiBpbnN0YW5jZS4KPC9wPgoKICAKCiAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuYyI+CiAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoTG9nZ2VyIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuY0hlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvb3B0aW9uLmdvI0w0MSI+V2l0aExvZ2dlcjwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aExvZ2dlciI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhMb2dnZXIobG9nZ2VyIDxhIGhyZWY9IiNMb2dnZXIiPkxvZ2dlcjwvYT4pIDxhIGhyZWY9IiNPcHRpb24iPk9wdGlvbjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhMb2dnZXIgdXNlcyB0aGUgcHJvdmlkZWQgbG9nZ2VyLgo8L3A+CgogIAoKICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhQYXJzZXIiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9vcHRpb24uZ28jTDI2Ij5XaXRoUGFyc2VyPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoUGFyc2VyIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aFBhcnNlcihwIDxhIGhyZWY9IiNTY2hlZHVsZVBhcnNlciI+U2NoZWR1bGVQYXJzZXI8L2E+KSA8YSBocmVmPSIjT3B0aW9uIj5PcHRpb248L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoUGFyc2VyIG92ZXJyaWRlcyB0aGUgcGFyc2VyIHVzZWQgZm9yIGludGVycHJldGluZyBqb2Igc2NoZWR1bGVzLgo8L3A+CgogIAoKICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhTZWNvbmRzIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlRnVuY0hlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvb3B0aW9uLmdvI0wxOSI+V2l0aFNlY29uZHM8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhTZWNvbmRzIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aFNlY29uZHMoKSA8YSBocmVmPSIjT3B0aW9uIj5PcHRpb248L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoU2Vjb25kcyBvdmVycmlkZXMgdGhlIHBhcnNlciB1c2VkIGZvciBpbnRlcnByZXRpbmcgam9iIHNjaGVkdWxlcyB0bwppbmNsdWRlIGEgc2Vjb25kcyBmaWVsZCBhcyB0aGUgZmlyc3Qgb25lLgo8L3A+CgogIAoKICA8L2Rpdj4KICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJQYXJzZU9wdGlvbiIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9wYXJzZXIuZ28jTDE1Ij5QYXJzZU9wdGlvbjwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjUGFyc2VPcHRpb24iPsK2PC9hPjwvc3Bhbj4KICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb24iPgogICAgCiAgPC9zcGFuPgo8L2g0PgoKICAgIAogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+dHlwZSBQYXJzZU9wdGlvbiA8YSBocmVmPSIvYnVpbHRpbiNpbnQiPmludDwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPkNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgY3JlYXRpbmcgYSBwYXJzZXIuIE1vc3Qgb3B0aW9ucyBzcGVjaWZ5IHdoaWNoCmZpZWxkcyBzaG91bGQgYmUgaW5jbHVkZWQsIHdoaWxlIG90aGVycyBlbmFibGUgZmVhdHVyZXMuIElmIGEgZmllbGQgaXMgbm90CmluY2x1ZGVkIHRoZSBwYXJzZXIgd2lsbCBhc3N1bWUgYSBkZWZhdWx0IHZhbHVlLiBUaGVzZSBvcHRpb25zIGRvIG5vdCBjaGFuZ2UKdGhlIG9yZGVyIGZpZWxkcyBhcmUgcGFyc2UgaW4uCjwvcD4KPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlQ29uc3RhbnQiPgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxwcmU+Y29uc3QgKAo8c3BhbiBpZD0iU2Vjb25kIiBkYXRhLWtpbmQ9ImNvbnN0YW50Ij4JU2Vjb25kICAgICAgICAgPGEgaHJlZj0iI1BhcnNlT3B0aW9uIj5QYXJzZU9wdGlvbjwvYT4gPSAxICZsdDsmbHQ7IDxhIGhyZWY9Ii9idWlsdGluI2lvdGEiPmlvdGE8L2E+IDxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBTZWNvbmRzIGZpZWxkLCBkZWZhdWx0IDA8L3NwYW4+Cjwvc3Bhbj48c3BhbiBpZD0iU2Vjb25kT3B0aW9uYWwiIGRhdGEta2luZD0iY29uc3RhbnQiPglTZWNvbmRPcHRpb25hbCAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gT3B0aW9uYWwgc2Vjb25kcyBmaWVsZCwgZGVmYXVsdCAwPC9zcGFuPgo8L3NwYW4+PHNwYW4gaWQ9Ik1pbnV0ZSIgZGF0YS1raW5kPSJjb25zdGFudCI+CU1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBNaW51dGVzIGZpZWxkLCBkZWZhdWx0IDA8L3NwYW4+Cjwvc3Bhbj48c3BhbiBpZD0iSG91ciIgZGF0YS1raW5kPSJjb25zdGFudCI+CUhvdXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBIb3VycyBmaWVsZCwgZGVmYXVsdCAwPC9zcGFuPgo8L3NwYW4+PHNwYW4gaWQ9IkRvbSIgZGF0YS1raW5kPSJjb25zdGFudCI+CURvbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBEYXkgb2YgbW9udGggZmllbGQsIGRlZmF1bHQgKjwvc3Bhbj4KPC9zcGFuPjxzcGFuIGlkPSJNb250aCIgZGF0YS1raW5kPSJjb25zdGFudCI+CU1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBNb250aCBmaWVsZCwgZGVmYXVsdCAqPC9zcGFuPgo8L3NwYW4+PHNwYW4gaWQ9IkRvdyIgZGF0YS1raW5kPSJjb25zdGFudCI+CURvdyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBEYXkgb2Ygd2VlayBmaWVsZCwgZGVmYXVsdCAqPC9zcGFuPgo8L3NwYW4+PHNwYW4gaWQ9IkRvd09wdGlvbmFsIiBkYXRhLWtpbmQ9ImNvbnN0YW50Ij4JRG93T3B0aW9uYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNvbW1lbnQiPi8vIE9wdGlvbmFsIGRheSBvZiB3ZWVrIGZpZWxkLCBkZWZhdWx0ICo8L3NwYW4+Cjwvc3Bhbj48c3BhbiBpZD0iRGVzY3JpcHRvciIgZGF0YS1raW5kPSJjb25zdGFudCI+CURlc2NyaXB0b3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBBbGxvdyBkZXNjcmlwdG9ycyBzdWNoIGFzIEBtb250aGx5LCBAd2Vla2x5LCBldGMuPC9zcGFuPgo8L3NwYW4+KTwvcHJlPgogICAgPC9kaXY+CiAgCjwvZGl2PgogIAoKICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IlBhcnNlciIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9wYXJzZXIuZ28jTDQ4Ij5QYXJzZXI8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1BhcnNlciI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT50eXBlIFBhcnNlciBzdHJ1Y3QgewoJPHNwYW4gY2xhc3M9ImNvbW1lbnQiPi8vIGNvbnRhaW5zIGZpbHRlcmVkIG9yIHVuZXhwb3J0ZWQgZmllbGRzPC9zcGFuPgp9PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5BIGN1c3RvbSBQYXJzZXIgdGhhdCBjYW4gYmUgY29uZmlndXJlZC4KPC9wPgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9Ik5ld1BhcnNlciIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUZ1bmNIZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL3BhcnNlci5nbyNMNzEiPk5ld1BhcnNlcjwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjTmV3UGFyc2VyIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTmV3UGFyc2VyKG9wdGlvbnMgPGEgaHJlZj0iI1BhcnNlT3B0aW9uIj5QYXJzZU9wdGlvbjwvYT4pIDxhIGhyZWY9IiNQYXJzZXIiPlBhcnNlcjwvYT48L3ByZT4KICAgIDwvZGl2PgogIDxwPk5ld1BhcnNlciBjcmVhdGVzIGEgUGFyc2VyIHdpdGggY3VzdG9tIG9wdGlvbnMuCjwvcD48cD5JdCBwYW5pY3MgaWYgbW9yZSB0aGFuIG9uZSBPcHRpb25hbCBpcyBnaXZlbiwgc2luY2UgaXQgd291bGQgYmUgaW1wb3NzaWJsZSB0bwpjb3JyZWN0bHkgaW5mZXIgd2hpY2ggb3B0aW9uYWwgaXMgcHJvdmlkZWQgb3IgbWlzc2luZyBpbiBnZW5lcmFsLgo8L3A+PHA+RXhhbXBsZXMKPC9wPjxwcmU+Ly8gU3RhbmRhcmQgcGFyc2VyIHdpdGhvdXQgZGVzY3JpcHRvcnMKc3BlY1BhcnNlciA6PSBOZXdQYXJzZXIoTWludXRlIHwgSG91ciB8IERvbSB8IE1vbnRoIHwgRG93KQpzY2hlZCwgZXJyIDo9IHNwZWNQYXJzZXIuUGFyc2UoJiMzNDswIDAgMTUgKi8zIComIzM0OykKCi8vIFNhbWUgYXMgYWJvdmUsIGp1c3QgZXhjbHVkZXMgdGltZSBmaWVsZHMKc3Vic1BhcnNlciA6PSBOZXdQYXJzZXIoRG9tIHwgTW9udGggfCBEb3cpCnNjaGVkLCBlcnIgOj0gc3BlY1BhcnNlci5QYXJzZSgmIzM0OzE1ICovMyAqJiMzNDspCgovLyBTYW1lIGFzIGFib3ZlLCBqdXN0IG1ha2VzIERvdyBvcHRpb25hbApzdWJzUGFyc2VyIDo9IE5ld1BhcnNlcihEb20gfCBNb250aCB8IERvd09wdGlvbmFsKQpzY2hlZCwgZXJyIDo9IHNwZWNQYXJzZXIuUGFyc2UoJiMzNDsxNSAqLzMmIzM0OykKPC9wcmU+CgogIAoKICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVNZXRob2QiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iUGFyc2VyLlBhcnNlIiBkYXRhLWtpbmQ9Im1ldGhvZCIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZU1ldGhvZEhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgKFBhcnNlcikgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvcGFyc2VyLmdvI0w4OCI+UGFyc2U8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1BhcnNlci5QYXJzZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIChwIDxhIGhyZWY9IiNQYXJzZXIiPlBhcnNlcjwvYT4pIFBhcnNlKHNwZWMgPGEgaHJlZj0iL2J1aWx0aW4jc3RyaW5nIj5zdHJpbmc8L2E+KSAoPGEgaHJlZj0iI1NjaGVkdWxlIj5TY2hlZHVsZTwvYT4sIDxhIGhyZWY9Ii9idWlsdGluI2Vycm9yIj5lcnJvcjwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5QYXJzZSByZXR1cm5zIGEgbmV3IGNyb250YWIgc2NoZWR1bGUgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiBzcGVjLgpJdCByZXR1cm5zIGEgZGVzY3JpcHRpdmUgZXJyb3IgaWYgdGhlIHNwZWMgaXMgbm90IHZhbGlkLgpJdCBhY2NlcHRzIGNyb250YWIgc3BlY3MgYW5kIGZlYXR1cmVzIGNvbmZpZ3VyZWQgYnkgTmV3UGFyc2VyLgo8L3A+CgogIAoKICA8L2Rpdj4KICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJTY2hlZHVsZSIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jcm9uLmdvI0w0MCI+U2NoZWR1bGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1NjaGVkdWxlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgU2NoZWR1bGUgaW50ZXJmYWNlIHsKPHNwYW4gaWQ9IlNjaGVkdWxlLk5leHQiIGRhdGEta2luZD0ibWV0aG9kIj4JPHNwYW4gY2xhc3M9ImNvbW1lbnQiPi8vIE5leHQgcmV0dXJucyB0aGUgbmV4dCBhY3RpdmF0aW9uIHRpbWUsIGxhdGVyIHRoYW4gdGhlIGdpdmVuIHRpbWUuPC9zcGFuPgo8L3NwYW4+CTxzcGFuIGNsYXNzPSJjb21tZW50Ij4vLyBOZXh0IGlzIGludm9rZWQgaW5pdGlhbGx5LCBhbmQgdGhlbiBlYWNoIHRpbWUgdGhlIGpvYiBpcyBydW4uPC9zcGFuPgoJTmV4dCg8YSBocmVmPSIvdGltZSI+dGltZTwvYT4uPGEgaHJlZj0iL3RpbWUjVGltZSI+VGltZTwvYT4pIDxhIGhyZWY9Ii90aW1lIj50aW1lPC9hPi48YSBocmVmPSIvdGltZSNUaW1lIj5UaW1lPC9hPgp9PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5TY2hlZHVsZSBkZXNjcmliZXMgYSBqb2ImIzM5O3MgZHV0eSBjeWNsZS4KPC9wPgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jIj4KICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IlBhcnNlU3RhbmRhcmQiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVGdW5jSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9wYXJzZXIuZ28jTDIyOSI+UGFyc2VTdGFuZGFyZDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjUGFyc2VTdGFuZGFyZCI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFBhcnNlU3RhbmRhcmQoc3RhbmRhcmRTcGVjIDxhIGhyZWY9Ii9idWlsdGluI3N0cmluZyI+c3RyaW5nPC9hPikgKDxhIGhyZWY9IiNTY2hlZHVsZSI+U2NoZWR1bGU8L2E+LCA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+KTwvcHJlPgogICAgPC9kaXY+CiAgPHA+UGFyc2VTdGFuZGFyZCByZXR1cm5zIGEgbmV3IGNyb250YWIgc2NoZWR1bGUgcmVwcmVzZW50aW5nIHRoZSBnaXZlbgpzdGFuZGFyZFNwZWMgKDxhIGhyZWY9Imh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb24iPmh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb248L2E+KS4gSXQgcmVxdWlyZXMgNSBlbnRyaWVzCnJlcHJlc2VudGluZzogbWludXRlLCBob3VyLCBkYXkgb2YgbW9udGgsIG1vbnRoIGFuZCBkYXkgb2Ygd2VlaywgaW4gdGhhdApvcmRlci4gSXQgcmV0dXJucyBhIGRlc2NyaXB0aXZlIGVycm9yIGlmIHRoZSBzcGVjIGlzIG5vdCB2YWxpZC4KPC9wPjxwPkl0IGFjY2VwdHMKPC9wPjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1idWxsZXRMaXN0Ij4KICA8bGk+U3RhbmRhcmQgY3JvbnRhYiBzcGVjcywgZS5nLiAmIzM0OyogKiAqICogPyYjMzQ7PC9saT4KICA8bGk+RGVzY3JpcHRvcnMsIGUuZy4gJiMzNDtAbWlkbmlnaHQmIzM0OywgJiMzNDtAZXZlcnkgMWgzMG0mIzM0OzwvbGk+CjwvdWw+CgogIAoKICA8L2Rpdj4KICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJTY2hlZHVsZVBhcnNlciIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jcm9uLmdvI0wzMCI+U2NoZWR1bGVQYXJzZXI8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1NjaGVkdWxlUGFyc2VyIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYzLjAuMTwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgU2NoZWR1bGVQYXJzZXIgaW50ZXJmYWNlIHsKPHNwYW4gaWQ9IlNjaGVkdWxlUGFyc2VyLlBhcnNlIiBkYXRhLWtpbmQ9Im1ldGhvZCI+CVBhcnNlKHNwZWMgPGEgaHJlZj0iL2J1aWx0aW4jc3RyaW5nIj5zdHJpbmc8L2E+KSAoPGEgaHJlZj0iI1NjaGVkdWxlIj5TY2hlZHVsZTwvYT4sIDxhIGhyZWY9Ii9idWlsdGluI2Vycm9yIj5lcnJvcjwvYT4pCjwvc3Bhbj59PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5TY2hlZHVsZVBhcnNlciBpcyBhbiBpbnRlcmZhY2UgZm9yIHNjaGVkdWxlIHNwZWMgcGFyc2VycyB0aGF0IHJldHVybiBhIFNjaGVkdWxlCjwvcD4KCiAgCgogICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlIj4KICAgICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iU3BlY1NjaGVkdWxlIiBkYXRhLWtpbmQ9InR5cGUiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVIZWFkZXIiPgogICAgICA8c3Bhbj50eXBlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL3NwZWMuZ28jTDciPlNwZWNTY2hlZHVsZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjU3BlY1NjaGVkdWxlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgU3BlY1NjaGVkdWxlIHN0cnVjdCB7CjxzcGFuIGlkPSJTcGVjU2NoZWR1bGUuU2Vjb25kIiBkYXRhLWtpbmQ9ImZpZWxkIj48c3BhbiBpZD0iU3BlY1NjaGVkdWxlLk1pbnV0ZSIgZGF0YS1raW5kPSJmaWVsZCI+PHNwYW4gaWQ9IlNwZWNTY2hlZHVsZS5Ib3VyIiBkYXRhLWtpbmQ9ImZpZWxkIj48c3BhbiBpZD0iU3BlY1NjaGVkdWxlLkRvbSIgZGF0YS1raW5kPSJmaWVsZCI+PHNwYW4gaWQ9IlNwZWNTY2hlZHVsZS5Nb250aCIgZGF0YS1raW5kPSJmaWVsZCI+PHNwYW4gaWQ9IlNwZWNTY2hlZHVsZS5Eb3ciIGRhdGEta2luZD0iZmllbGQiPglTZWNvbmQsIE1pbnV0ZSwgSG91ciwgRG9tLCBNb250aCwgRG93IDxhIGhyZWY9Ii9idWlsdGluI3VpbnQ2NCI+dWludDY0PC9hPgo8L3NwYW4+CjxzcGFuIGlkPSJTcGVjU2NoZWR1bGUuTG9jYXRpb24iIGRhdGEta2luZD0iZmllbGQiPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gT3ZlcnJpZGUgbG9jYXRpb24gZm9yIHRoaXMgc2NoZWR1bGUuPC9zcGFuPgo8L3NwYW4+CUxvY2F0aW9uICo8YSBocmVmPSIvdGltZSI+dGltZTwvYT4uPGEgaHJlZj0iL3RpbWUjTG9jYXRpb24iPkxvY2F0aW9uPC9hPgp9PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5TcGVjU2NoZWR1bGUgc3BlY2lmaWVzIGEgZHV0eSBjeWNsZSAodG8gdGhlIHNlY29uZCBncmFudWxhcml0eSksIGJhc2VkIG9uIGEKdHJhZGl0aW9uYWwgY3JvbnRhYiBzcGVjaWZpY2F0aW9uLiBJdCBpcyBjb21wdXRlZCBpbml0aWFsbHkgYW5kIHN0b3JlZCBhcyBiaXQgc2V0cy4KPC9wPgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGVNZXRob2QiPgogICAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iU3BlY1NjaGVkdWxlLk5leHQiIGRhdGEta2luZD0ibWV0aG9kIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlTWV0aG9kSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyAoKlNwZWNTY2hlZHVsZSkgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvc3BlYy5nbyNMNTgiPk5leHQ8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1NwZWNTY2hlZHVsZS5OZXh0Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgKHMgKjxhIGhyZWY9IiNTcGVjU2NoZWR1bGUiPlNwZWNTY2hlZHVsZTwvYT4pIE5leHQodCA8YSBocmVmPSIvdGltZSI+dGltZTwvYT4uPGEgaHJlZj0iL3RpbWUjVGltZSI+VGltZTwvYT4pIDxhIGhyZWY9Ii90aW1lIj50aW1lPC9hPi48YSBocmVmPSIvdGltZSNUaW1lIj5UaW1lPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TmV4dCByZXR1cm5zIHRoZSBuZXh0IHRpbWUgdGhpcyBzY2hlZHVsZSBpcyBhY3RpdmF0ZWQsIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4KdGltZS4gIElmIG5vIHRpbWUgY2FuIGJlIGZvdW5kIHRvIHNhdGlzZnkgdGhlIHNjaGVkdWxlLCByZXR1cm4gdGhlIHplcm8gdGltZS4KPC9wPgoKICAKCiAgPC9kaXY+CiAgCgogICAgPC9kaXY+PC9zZWN0aW9uPjwvZGl2PiAKCgoKCgoKICAgICAgCiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgICAgICAgCiAgICAgIAogICAgICAKICAgICAgICAKICA8ZGl2IGNsYXNzPSJVbml0RmlsZXMganMtdW5pdEZpbGVzIj4KICAgIDxoMiBjbGFzcz0iVW5pdEZpbGVzLXRpdGxlIiBpZD0ic2VjdGlvbi1zb3VyY2VmaWxlcyI+CiAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2luc2VydF9kcml2ZV9maWxlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgU291cmNlIEZpbGVzCiAgICAgIDxhIGNsYXNzPSJVbml0RmlsZXMtaWRMaW5rIiBocmVmPSIjc2VjdGlvbi1zb3VyY2VmaWxlcyI+wrY8L2E+CiAgICA8L2gyPgogICAgPGRpdiBjbGFzcz0iVW5pdEZpbGVzLXRpdGxlTGluayI+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi90cmVlL3YzLjAuMSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiPlZpZXcgYWxsPC9hPgogICAgPC9kaXY+CiAgICA8ZGl2PgogICAgICA8dWwgY2xhc3M9IlVuaXRGaWxlcy1maWxlTGlzdCI+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvY2hhaW4uZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iY2hhaW4uZ28iPmNoYWluLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9jb25zdGFudGRlbGF5LmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9ImNvbnN0YW50ZGVsYXkuZ28iPmNvbnN0YW50ZGVsYXkuZ288L2E+CiAgICAgICAgICA8L2xpPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL2Nyb24uZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iY3Jvbi5nbyI+Y3Jvbi5nbzwvYT4KICAgICAgICAgIDwvbGk+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvZG9jLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9ImRvYy5nbyI+ZG9jLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9sb2dnZXIuZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0ibG9nZ2VyLmdvIj5sb2dnZXIuZ288L2E+CiAgICAgICAgICA8L2xpPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9uL2Jsb2IvdjMuMC4xL29wdGlvbi5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJvcHRpb24uZ28iPm9wdGlvbi5nbzwvYT4KICAgICAgICAgIDwvbGk+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vYmxvYi92My4wLjEvcGFyc2VyLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9InBhcnNlci5nbyI+cGFyc2VyLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi9ibG9iL3YzLjAuMS9zcGVjLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9InNwZWMuZ28iPnNwZWMuZ288L2E+CiAgICAgICAgICA8L2xpPjwvdWw+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgICAgIAogICAgICAKICAgIDwvZGl2PgogIDwvZGl2Pgo8L2FydGljbGU+CiAgICA8Zm9vdGVyIGNsYXNzPSJnby1NYWluLWZvb3RlciI+PC9mb290ZXI+CiAgPC9tYWluPgoKICAgIAogIDxmb290ZXIgY2xhc3M9ImdvLUZvb3RlciI+CiAgICAKICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rcyI+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMiIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBXaHkgR28KICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI3VzZS1jYXNlcyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFVzZSBDYXNlcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjY2FzZS1zdHVkaWVzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgQ2FzZSBTdHVkaWVzCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbGVhcm4uZ28uZGV2LyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEdldCBTdGFydGVkCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGxheS5nb2xhbmcub3JnIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgUGxheWdyb3VuZAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3RvdXIuZ29sYW5nLm9yZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFRvdXIKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL2dvP3RhYj1OZXdlc3QiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdGFjayBPdmVyZmxvdwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9oZWxwIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgSGVscAogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3BrZy5nby5kZXYiIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBQYWNrYWdlcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSIvc3RkIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgU3RhbmRhcmQgTGlicmFyeQogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSIvZ29sYW5nLm9yZy94IiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgU3ViLXJlcG9zaXRvcmllcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3BrZy5nby5kZXYvYWJvdXQiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBBYm91dCBHbyBQYWNrYWdlcwogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9wcm9qZWN0IiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsgZ28tRm9vdGVyLWxpbmstLXByaW1hcnkiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgQWJvdXQKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZGwvIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPkRvd25sb2FkPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2Jsb2ciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+QmxvZzwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL2lzc3VlcyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIElzc3VlIFRyYWNrZXIKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2RldmVsL3JlbGVhc2UuaHRtbCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFJlbGVhc2UgTm90ZXMKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9ibG9nLmdvbGFuZy5vcmcvZ28tYnJhbmQiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBCcmFuZCBHdWlkZWxpbmVzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2NvbmR1Y3QiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDb2RlIG9mIENvbmR1Y3QKICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Gb290ZXItbGlua0NvbHVtbiI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudHdpdHRlci5jb20vZ29sYW5nIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsgZ28tRm9vdGVyLWxpbmstLXByaW1hcnkiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgQ29ubmVjdAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50d2l0dGVyLmNvbS9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBUd2l0dGVyCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+R2l0SHViPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vaW52aXRlLnNsYWNrLmdvbGFuZ2JyaWRnZS5vcmcvIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgU2xhY2sKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9yZWRkaXQuY29tL3IvZ29sYW5nIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgci9nb2xhbmcKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubWVldHVwLmNvbS9wcm8vZ28iIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBNZWV0dXAKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nb2xhbmd3ZWVrbHkuY29tLyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEdvbGFuZyBXZWVrbHkKICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJnby1Gb290ZXItYm90dG9tIj4KICAgICAgPGltZyBjbGFzcz0iZ28tRm9vdGVyLWdvcGhlciIgIHdpZHRoPSIxNDMxIiBoZWlnaHQ9IjkwMSIKICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvZ29waGVyL3BpbG90LWJ1c3QtMTQzMXg5MDEuc3ZnIiBhbHQ9IkdvcGhlciBpbiBmbGlnaHQgZ29nZ2xlcyI+CiAgICAgIDx1bCBjbGFzcz0iZ28tRm9vdGVyLWxpc3RSb3ciPgogICAgICAgIDxsaSBjbGFzcz0iZ28tRm9vdGVyLWxpc3RJdGVtIj4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2NvcHlyaWdodCIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+Q29weXJpZ2h0PC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvdG9zIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5UZXJtcyBvZiBTZXJ2aWNlPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5nb29nbGUuY29tL2ludGwvZW4vcG9saWNpZXMvcHJpdmFjeS8iIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiCiAgICAgICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiPgogICAgICAgICAgICBQcml2YWN5IFBvbGljeQogICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvcy9wa2dzaXRlLWZlZWRiYWNrIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIKICAgICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgICAgUmVwb3J0IGFuIElzc3VlCiAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS10ZXh0IGdvLUZvb3Rlci10b2dnbGVUaGVtZSBqcy10b2dnbGVUaGVtZSIgYXJpYS1sYWJlbD0iVG9nZ2xlIHRoZW1lIj4KICAgICAgICAgICAgPGltZyBkYXRhLXZhbHVlPSJhdXRvIiBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYnJpZ2h0bmVzc182X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iU3lzdGVtIHRoZW1lIj4KICAgICAgICAgICAgPGltZyBkYXRhLXZhbHVlPSJkYXJrIiBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYnJpZ2h0bmVzc18yX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iRGFyayB0aGVtZSI+CiAgICAgICAgICAgIDxpbWcgZGF0YS12YWx1ZT0ibGlnaHQiIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9saWdodF9tb2RlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iTGlnaHQgdGhlbWUiPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS10ZXh0IGdvLUZvb3Rlci1rZXlib2FyZCBqcy1vcGVuU2hvcnRjdXRzIiBhcmlhLWxhYmVsPSJPcGVuIHNob3JjdXRzIG1vZGFsIj4KICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24va2V5Ym9hcmRfZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9saT4KICAgICAgPC91bD4KICAgICAgPGEgY2xhc3M9ImdvLUZvb3Rlci1nb29nbGVMb2dvIiBocmVmPSJodHRwczovL2dvb2dsZS5jb20iIHRhcmdldD0iX2JsYW5rInJlbD0ibm9vcGVuZXIiCiAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICA8aW1nIGNsYXNzPSJnby1Gb290ZXItZ29vZ2xlTG9nb0ltZyIgaGVpZ2h0PSIyNCIgd2lkdGg9IjcyIgogICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vZ29vZ2xlLXdoaXRlLnN2ZyIgYWx0PSJHb29nbGUgbG9nbyI+CiAgICAgIDwvYT4KICAgIDwvZGl2PgogIDwvZm9vdGVyPgoKICAgIAogIDxkaWFsb2cgaWQ9Imp1bXAtdG8tbW9kYWwiIGNsYXNzPSJKdW1wRGlhbG9nIGdvLU1vZGFsIGdvLU1vZGFsLS1tZCBqcy1tb2RhbCI+CiAgICA8Zm9ybSBtZXRob2Q9ImRpYWxvZyIgZGF0YS1nbXRjPSJqdW1wIHRvIGZvcm0iIGFyaWEtbGFiZWw9Ikp1bXAgdG8gSWRlbnRpZmllciI+CiAgICAgIDxkaXYgY2xhc3M9IkRpYWxvZy10aXRsZSBnby1Nb2RhbC1oZWFkZXIiPgogICAgICAgIDxoMj5KdW1wIHRvPC9oMj4KICAgICAgICA8YnV0dG9uCiAgICAgICAgICBjbGFzcz0iZ28tQnV0dG9uIGdvLUJ1dHRvbi0taW5saW5lIgogICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgZGF0YS1tb2RhbC1jbG9zZQogICAgICAgICAgZGF0YS1ndG1jPSJtb2RhbCBidXR0b24iCiAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSIKICAgICAgICA+CiAgICAgICAgICA8aW1nCiAgICAgICAgICAgIGNsYXNzPSJnby1JY29uIgogICAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jbG9zZV9nbV9ncmV5XzI0ZHAuc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgIC8+CiAgICAgICAgPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJKdW1wRGlhbG9nLWZpbHRlciI+CiAgICAgICAgPGlucHV0IGNsYXNzPSJKdW1wRGlhbG9nLWlucHV0IGdvLUlucHV0IiBhdXRvY29tcGxldGU9Im9mZiIgdHlwZT0idGV4dCI+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJKdW1wRGlhbG9nLWJvZHkgZ28tTW9kYWwtYm9keSI+CiAgICAgICAgPGRpdiBjbGFzcz0iSnVtcERpYWxvZy1saXN0Ij48L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWFjdGlvbnMiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiIgZGF0YS10ZXN0LWlkPSJjbG9zZS1kaWFsb2ciPkNsb3NlPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogIDwvZGlhbG9nPgoKICA8ZGlhbG9nIGNsYXNzPSJTaG9ydGN1dHNEaWFsb2cgZ28tTW9kYWwgZ28tTW9kYWwtLXNtIGpzLW1vZGFsIj4KICAgIDxmb3JtIG1ldGhvZD0iZGlhbG9nIj4KICAgICAgPGRpdiBjbGFzcz0iZ28tTW9kYWwtaGVhZGVyIj4KICAgICAgICA8aDI+S2V5Ym9hcmQgc2hvcnRjdXRzPC9oMj4KICAgICAgICA8YnV0dG9uCiAgICAgICAgICBjbGFzcz0iZ28tQnV0dG9uIGdvLUJ1dHRvbi0taW5saW5lIgogICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgZGF0YS1tb2RhbC1jbG9zZQogICAgICAgICAgZGF0YS1ndG1jPSJtb2RhbCBidXR0b24iCiAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSIKICAgICAgICA+CiAgICAgICAgICA8aW1nCiAgICAgICAgICAgIGNsYXNzPSJnby1JY29uIgogICAgICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgICAgICB3aWR0aD0iMjQiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jbG9zZV9nbV9ncmV5XzI0ZHAuc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgIC8+CiAgICAgICAgPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Nb2RhbC1ib2R5Ij4KICAgICAgICA8dGFibGU+CiAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZy1rZXkiPgogICAgICAgICAgICAgIDxzdHJvbmc+Pzwvc3Ryb25nPjwvdGQ+PHRkPiA6IFRoaXMgbWVudTwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj48dGQgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZy1rZXkiPgogICAgICAgICAgICAgIDxzdHJvbmc+Lzwvc3Ryb25nPjwvdGQ+PHRkPiA6IFNlYXJjaCBzaXRlPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz5mPC9zdHJvbmc+IG9yIDxzdHJvbmc+Rjwvc3Ryb25nPjwvdGQ+PHRkPiA6IEp1bXAgdG88L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgPHRkIGNsYXNzPSJTaG9ydGN1dHNEaWFsb2cta2V5Ij48c3Ryb25nPnk8L3N0cm9uZz4gb3IgPHN0cm9uZz5ZPC9zdHJvbmc+PC90ZD4KICAgICAgICAgICAgICA8dGQ+IDogQ2Fub25pY2FsIFVSTDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Nb2RhbC1hY3Rpb25zIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24iIGRhdGEtdGVzdC1pZD0iY2xvc2UtZGlhbG9nIj5DbG9zZTwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgIDwvZm9ybT4KICA8L2RpYWxvZz4KCiAgICAKICAgICAgPHNlY3Rpb24gY2xhc3M9IkNvb2tpZS1ub3RpY2UganMtY29va2llTm90aWNlIj4KICAgICAgICA8ZGl2PmdvLmRldiB1c2VzIGNvb2tpZXMgZnJvbSBHb29nbGUgdG8gZGVsaXZlciBhbmQgZW5oYW5jZSB0aGUgcXVhbGl0eSBvZiBpdHMgc2VydmljZXMgYW5kIHRvCiAgICAgICAgYW5hbHl6ZSB0cmFmZmljLiA8YSB0YXJnZXQ9X2JsYW5rIGhyZWY9Imh0dHBzOi8vcG9saWNpZXMuZ29vZ2xlLmNvbS90ZWNobm9sb2dpZXMvY29va2llcyI+TGVhcm4gbW9yZS48L2E+PC9kaXY+CiAgICAgICAgPGRpdj48YnV0dG9uIGNsYXNzPSJnby1CdXR0b24iPk9rYXk8L2J1dHRvbj48L2Rpdj4KICAgICAgPC9zZWN0aW9uPgogICAgCiAgICAKICAgICAgPHNjcmlwdD4KICAgICAgICAvLyB0aGlzIHdpbGwgdGhyb3cgaWYgdGhlIHF1ZXJ5U2VsZWN0b3IgY2Fu4oCZdCBmaW5kIHRoZSBlbGVtZW50CiAgICAgICAgY29uc3QgZ3RtSWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZ3RtSUQnKS5kYXRhc2V0Lmd0bWlkOwogICAgICAgIGlmICghZ3RtSWQpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR29vZ2xlIFRhZyBNYW5hZ2VyIElEIG5vdCBmb3VuZCcpOwogICAgICAgIH0KICAgICAgICBsb2FkU2NyaXB0KGBodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JHtndG1JZH1gKTsKICAgICAgPC9zY3JpcHQ+CiAgICAgIDxub3NjcmlwdD4KICAgICAgICA8aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tVzhNVlFYRyIKICAgICAgICAgICAgICAgIGhlaWdodD0iMCIgd2lkdGg9IjAiIHN0eWxlPSJkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW4iPgogICAgICAgIDwvaWZyYW1lPgogICAgICA8L25vc2NyaXB0PgogICAgCiAgICAKICAKICA8ZGl2IGNsYXNzPSJqcy1jYW5vbmljYWxVUkxQYXRoIiBkYXRhLWNhbm9uaWNhbC11cmwtcGF0aD0iL2dpdGh1Yi5jb20vcm9iZmlnL2Nyb24vdjNAdjMuMC4xIiBoaWRkZW4+PC9kaXY+CiAgPGRpdiBjbGFzcz0ianMtcGxheWdyb3VuZFZhcnMiIGRhdGEtbW9kdWxlcGF0aD0iZ2l0aHViLmNvbS9yb2JmaWcvY3Jvbi92MyIgZGF0YS12ZXJzaW9uPSJ2My4wLjEiIGhpZGRlbj48L2Rpdj4KICA8c2NyaXB0PgogICAgbG9hZFNjcmlwdCgnL3N0YXRpYy9mcm9udGVuZC91bml0L21haW4vbWFpbi5qcycpCiAgPC9zY3JpcHQ+CgogIDxzY3JpcHQ+CiAgICBsb2FkU2NyaXB0KCcvc3RhdGljL2Zyb250ZW5kL3VuaXQvdW5pdC5qcycpCiAgPC9zY3JpcHQ+CgogIDwvYm9keT4KPC9odG1sPgo=
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:20 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.1.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:08:09 GMT
      Expires:
      - Wed, 19 Jul 2023 23:08:09 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '8652'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v3.0.1","Time":"2020-01-04T01:05:08Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron/v3
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:21 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.0.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1210854644705529138'
      X-Datadog-Parent-Id:
      - '3867063850290900792'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:32:21 GMT
      Expires:
      - Thu, 20 Jul 2023 01:32:21 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v3.0.0","Time":"2019-07-11T17:02:38Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron/v3
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1406538172264787479'
      X-Datadog-Parent-Id:
      - '1833164270817658298'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:21 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4239844779622286751'
      X-Datadog-Parent-Id:
      - '2968839309189159230'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:20 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:20 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '1'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v3.0.1","Time":"2020-01-04T01:05:08Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.1.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4525722778814145905'
      X-Datadog-Parent-Id:
      - '4472036471212319807'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '42'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 19:39:55 GMT
      Expires:
      - Wed, 19 Jul 2023 22:39:55 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '10346'
      Last-Modified:
      - Sat, 04 Jan 2020 01:34:27 GMT
      Etag:
      - '"f895601ed42554966d2979f56420f655966b079254d92205b53828422298244f"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/robfig/cron/v3

        go 1.12
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2997096039141684945'
      X-Datadog-Parent-Id:
      - '2600954112611122932'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:20 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:20 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '1'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v3.0.1","Time":"2020-01-04T01:05:08Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.1.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2523380900464077226'
      X-Datadog-Parent-Id:
      - '4062698342595821190'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '42'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 19:39:55 GMT
      Expires:
      - Wed, 19 Jul 2023 22:39:55 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '10346'
      Last-Modified:
      - Sat, 04 Jan 2020 01:34:27 GMT
      Etag:
      - '"f895601ed42554966d2979f56420f655966b079254d92205b53828422298244f"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/robfig/cron/v3

        go 1.12
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '678374331011680133'
      X-Datadog-Parent-Id:
      - '239446718542461478'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:20 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:20 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '1'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v3.0.1","Time":"2020-01-04T01:05:08Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.1.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3875970006981219634'
      X-Datadog-Parent-Id:
      - '178108060822460544'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '42'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 19:39:55 GMT
      Expires:
      - Wed, 19 Jul 2023 22:39:55 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '10346'
      Last-Modified:
      - Sat, 04 Jan 2020 01:34:27 GMT
      Etag:
      - '"f895601ed42554966d2979f56420f655966b079254d92205b53828422298244f"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/robfig/cron/v3

        go 1.12
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3959020329463663486'
      X-Datadog-Parent-Id:
      - '2447407411230814884'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:21 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:21 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v3.0.0-rc1.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4056650226740200628'
      X-Datadog-Parent-Id:
      - '3450588735791567774'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=1797
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Expires:
      - Wed, 19 Jul 2023 23:02:22 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '144'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: github.com/robfig/cron@v3.0.0-rc1: invalid version: go.mod
        has post-v3 module path "github.com/robfig/cron/v3" at revision v3.0.0-rc1'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:24 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3928570222742504545'
      X-Datadog-Parent-Id:
      - '2650090122369323916'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:24 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/list
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3271674727113753722'
      X-Datadog-Parent-Id:
      - '470193303867964733'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '21'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:24 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        v1.0.0
        v1.2.0
        v1.1.0
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:24 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.0.0.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3253141386220627131'
      X-Datadog-Parent-Id:
      - '963537651510392846'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Expires:
      - Thu, 20 Jul 2023 01:32:24 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2014-01-19T01:50:47Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:24 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.2.0.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3396110990760775599'
      X-Datadog-Parent-Id:
      - '2758343719615857633'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:14:25 GMT
      Expires:
      - Thu, 20 Jul 2023 01:14:25 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '1079'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.2.0","Time":"2018-05-05T20:34:41Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:24 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1288180674097500609'
      X-Datadog-Parent-Id:
      - '3220713101253837817'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:25 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:24 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.1.0.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3566677371770866100'
      X-Datadog-Parent-Id:
      - '3843121124441961093'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:44:43 GMT
      Expires:
      - Wed, 19 Jul 2023 23:44:43 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '6462'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.1.0","Time":"2018-05-05T20:34:41Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/robfig/cron
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4606619188825665562'
      X-Datadog-Parent-Id:
      - '1222495583830139517'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:25 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2852379903708635205'
      X-Datadog-Parent-Id:
      - '4444216050058120762'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:24 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '1'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.2.0","Time":"2018-05-05T20:34:41Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.2.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3364541741302708059'
      X-Datadog-Parent-Id:
      - '3574498872266712854'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '30'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:24:46 GMT
      Expires:
      - Thu, 20 Jul 2023 00:24:46 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '4059'
      Last-Modified:
      - Mon, 17 Jun 2019 12:19:42 GMT
      Etag:
      - '"38c3512f0207856125c29e96d7919ed25e0c2c5aa18f09208e5bc227e580f584"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/robfig/cron

        '
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3105076807712317609'
      X-Datadog-Parent-Id:
      - '856066005030640606'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:24 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '1'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.2.0","Time":"2018-05-05T20:34:41Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.2.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1558504526526129437'
      X-Datadog-Parent-Id:
      - '2486221924483443667'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '30'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:24:46 GMT
      Expires:
      - Thu, 20 Jul 2023 00:24:46 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '4059'
      Last-Modified:
      - Mon, 17 Jun 2019 12:19:42 GMT
      Etag:
      - '"38c3512f0207856125c29e96d7919ed25e0c2c5aa18f09208e5bc227e580f584"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/robfig/cron

        '
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2102699930636831773'
      X-Datadog-Parent-Id:
      - '1684644156452096697'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:24 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '1'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.2.0","Time":"2018-05-05T20:34:41Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.2.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2101236605871131869'
      X-Datadog-Parent-Id:
      - '798697441346608996'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '30'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:24:46 GMT
      Expires:
      - Thu, 20 Jul 2023 00:24:46 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '4059'
      Last-Modified:
      - Mon, 17 Jun 2019 12:19:42 GMT
      Etag:
      - '"38c3512f0207856125c29e96d7919ed25e0c2c5aa18f09208e5bc227e580f584"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/robfig/cron

        '
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:25 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3345014504592968747'
      X-Datadog-Parent-Id:
      - '30515716098819971'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:46 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:46 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/list
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1993192812273844511'
      X-Datadog-Parent-Id:
      - '1911670216992229174'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '112'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '20'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        v0.3.9
        v0.3.11
        v0.3.8
        v0.3.6
        v0.3.4
        v1.0.0
        v0.3.7
        v0.3.5
        v0.3.13
        v0.3.12
        v0.3.16
        v0.3.3
        v0.3.15
        v0.3.14
        v0.3.10
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3037885062432516688'
      X-Datadog-Parent-Id:
      - '4304590344599536441'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '20'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2186108505260670763'
      X-Datadog-Parent-Id:
      - '1908253187425657143'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5712'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.9.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1915017451880487322'
      X-Datadog-Parent-Id:
      - '3576193140226184752'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:14:11 GMT
      Expires:
      - Thu, 20 Jul 2023 00:14:11 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '4716'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.9","Time":"2020-03-24T21:25:48Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2649544514925010134'
      X-Datadog-Parent-Id:
      - '3268487351548663124'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:47 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.11.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2769435437402737048'
      X-Datadog-Parent-Id:
      - '1830954371646348714'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '51'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:27:00 GMT
      Expires:
      - Thu, 20 Jul 2023 01:27:00 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '347'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.11","Time":"2020-08-11T19:49:30Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4223296457943907882'
      X-Datadog-Parent-Id:
      - '328863374150098731'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:47 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.8.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '423510466830443483'
      X-Datadog-Parent-Id:
      - '2914436414134548138'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:28 GMT
      Expires:
      - Thu, 20 Jul 2023 01:32:28 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '19'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.8","Time":"2019-10-03T07:39:17Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3770884388474615130'
      X-Datadog-Parent-Id:
      - '3625411938746916531'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:47 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:47 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.6.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '316167729891274294'
      X-Datadog-Parent-Id:
      - '3972849484751725463'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 19:35:14 GMT
      Expires:
      - Wed, 19 Jul 2023 22:35:14 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '10654'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.6","Time":"2018-07-30T21:26:40Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '295042526894404916'
      X-Datadog-Parent-Id:
      - '4392052002070512923'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:48 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.4.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '959708275758824221'
      X-Datadog-Parent-Id:
      - '3707537635476325697'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:28 GMT
      Expires:
      - Thu, 20 Jul 2023 01:32:28 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '20'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.4","Time":"2018-04-04T21:29:33Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4209298370742122974'
      X-Datadog-Parent-Id:
      - '4071181139286594911'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:48 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3559588854772924399'
      X-Datadog-Parent-Id:
      - '923913981461793079'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '5713'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1234233429955274202'
      X-Datadog-Parent-Id:
      - '4594162683000501'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:48 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGRhdGEtbGF5b3V0PSJyZXNwb25zaXZlIiBkYXRhLWxvY2FsPSIiPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB3aW5kb3cuX19lcnI9ZnVuY3Rpb24gZihlKXtmLnA9Zi5wfHxbXTtmLnAucHVzaChlKX0pOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0PgogICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5jb29raWUubWF0Y2goL3ByZWZlcnMtY29sb3Itc2NoZW1lPShsaWdodHxkYXJrfGF1dG8pLyk/LlsxXQogICAgICAgIGlmICh0aGVtZSkgewogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLnNldEF0dHJpYnV0ZSgnZGF0YS10aGVtZScsIHRoZW1lKTsKICAgICAgICB9CiAgICAgIH0oKSkKICAgIDwvc2NyaXB0PgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDxtZXRhIG5hbWU9IkRlc2NyaXB0aW9uIiBjb250ZW50PSJBIGhlbHBlciB0byBtZXJnZSBzdHJ1Y3RzIGFuZCBtYXBzIGluIEdvbGFuZy4iPgogICAgCiAgICA8bWV0YSBjbGFzcz0ianMtZ3RtSUQiIGRhdGEtZ3RtaWQ9IkdUTS1XOE1WUVhHIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9zaGFyZWQvaWNvbi9mYXZpY29uLmljbyI+CiAgICAKICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3BrZy5nby5kZXYvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIj4KICAKCiAgICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL2Zyb250ZW5kLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIAogIDx0aXRsZT5tZXJnbyBwYWNrYWdlIC0gZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIC0gR28gUGFja2FnZXM8L3RpdGxlPgoKICAgIAogIDxsaW5rIGhyZWY9Ii9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0Lm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAKICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KCgogIDwvaGVhZD4KICA8Ym9keT4KICAgIAogICAgPHNjcmlwdD4KICAgICAgZnVuY3Rpb24gbG9hZFNjcmlwdChzcmMsIG1vZCA9IHRydWUpIHsKICAgICAgICBsZXQgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgIHMuc3JjID0gc3JjOwogICAgICAgIGlmIChtb2QpIHsKICAgICAgICAgIHMudHlwZSA9ICdtb2R1bGUnOwogICAgICAgICAgcy5hc3luYyA9IHRydWU7CiAgICAgICAgICBzLmRlZmVyID0gdHJ1ZQogICAgICAgIH0KICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpOwogICAgICB9CiAgICAgIGxvYWRTY3JpcHQoIi90aGlyZF9wYXJ0eS9kaWFsb2ctcG9seWZpbGwvZGlhbG9nLXBvbHlmaWxsLmpzIiwgZmFsc2UpCiAgICAgIGxvYWRTY3JpcHQoIi9zdGF0aWMvZnJvbnRlbmQvZnJvbnRlbmQuanMiKTsKICAgIDwvc2NyaXB0PgogICAgCiAgPGhlYWRlciBjbGFzcz0iZ28tSGVhZGVyIGdvLUhlYWRlci0tZnVsbCBqcy1zaXRlSGVhZGVyIj4KICAgIDxkaXYgY2xhc3M9ImdvLUhlYWRlci1pbm5lciBnby1IZWFkZXItaW5uZXItLWRhcmsiPgogICAgICA8bmF2IGNsYXNzPSJnby1IZWFkZXItbmF2Ij4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi8iIGNsYXNzPSJqcy1oZWFkZXJMb2dvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIgogICAgICAgICAgICBkYXRhLXRlc3QtaWQ9ImdvLWhlYWRlci1sb2dvLWxpbmsiPgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSGVhZGVyLWxvZ28iIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nby13aGl0ZS5zdmciIGFsdD0iR28iPgogICAgICAgIDwvYT4KICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItcmlnaHRDb250ZW50Ij4KICAgICAgICAgIAo8ZGl2IGNsYXNzPSJnby1TZWFyY2hGb3JtIGpzLXNlYXJjaEZvcm0iPgogIDxmb3JtCiAgICBjbGFzcz0iZ28tSW5wdXRHcm91cCBnby1TaG9ydGN1dEtleSBnby1TZWFyY2hGb3JtLWZvcm0iCiAgICBhY3Rpb249Ii9zZWFyY2giCiAgICBkYXRhLXNob3J0Y3V0PSIvIgogICAgZGF0YS1zaG9ydGN1dC1hbHQ9InNlYXJjaCIKICAgIGRhdGEtZ3RtYz0ic2VhcmNoIGZvcm0iCiAgICBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIKICAgIHJvbGU9InNlYXJjaCIKICA+CiAgICA8aW5wdXQgbmFtZT0icSIgY2xhc3M9ImdvLUlucHV0IGpzLXNlYXJjaEZvY3VzIiBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIgdHlwZT0ic2VhcmNoIgogICAgICAgIGF1dG9jYXBpdGFsaXplPSJvZmYiIGF1dG9jb21wbGV0ZT0ib2ZmIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIKICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIHBhY2thZ2VzIG9yIHN5bWJvbHMiCiAgICAgICAgdmFsdWU9IiIgLz4KICAgIDxpbnB1dCBuYW1lPSJtIiB2YWx1ZT0iIiBoaWRkZW4+CiAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbnZlcnRlZCIgYXJpYS1sYWJlbD0iU3VibWl0IHNlYXJjaCI+CiAgICAgIDxpbWcKICAgICAgICBjbGFzcz0iZ28tSWNvbiIKICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgIHdpZHRoPSIyNCIKICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vc2VhcmNoX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgYWx0PSIiCiAgICAgIC8+CiAgICA8L2J1dHRvbj4KICA8L2Zvcm0+CiAgPGJ1dHRvbiBjbGFzcz0iZ28tU2VhcmNoRm9ybS1leHBhbmRTZWFyY2gganMtZXhwYW5kU2VhcmNoIiBkYXRhLWd0bWM9Im5hdiBidXR0b24iCiAgICAgIGFyaWEtbGFiZWw9Ik9wZW4gc2VhcmNoIiBkYXRhLXRlc3QtaWQ9ImV4cGFuZC1zZWFyY2giPgogICAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9zZWFyY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgoKICA8L2J1dHRvbj4KPC9kaXY+CgogICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItbWVudSI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYXJyb3dfZHJvcF9kb3duX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0ic3VibWVudSBkcm9wZG93biBpY29uIj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItc3VibWVudSBnby1IZWFkZXItc3VibWVudS0td2h5IGpzLWRlc2t0b3Atc3VibWVudS1ob3ZlciIgYXJpYS1sYWJlbD0ic3VibWVudSI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI2Nhc2Utc3R1ZGllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5DYXNlIFN0dWRpZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHA+Q29tbW9uIHByb2JsZW1zIGNvbXBhbmllcyBzb2x2ZSB3aXRoIEdvPC9wPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyN1c2UtY2FzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+VXNlIENhc2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxwPlN0b3JpZXMgYWJvdXQgaG93IGFuZCB3aHkgY29tcGFuaWVzIHVzZSBHbzwvcD4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlNlY3VyaXR5IFBvbGljeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8cD5Ib3cgR28gY2FuIGhlbHAga2VlcCB5b3Ugc2VjdXJlIGJ5IGRlZmF1bHQ8L3A+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyIgZGF0YS1ndG1jPSJuYXYgbGluayI+TGVhcm48L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Fycm93X2Ryb3BfZG93bl9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9InN1Ym1lbnUgZHJvcGRvd24gaWNvbiI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnUgZ28tSGVhZGVyLXN1Ym1lbnUtLWRvY3MganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZWZmZWN0aXZlX2dvIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVmZmVjdGl2ZSBHbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5UaXBzIGZvciB3cml0aW5nIGNsZWFyLCBwZXJmb3JtYW50LCBhbmQgaWRpb21hdGljIEdvIGNvZGU8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R28gVXNlciBNYW51YWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+QSBjb21wbGV0ZSBpbnRyb2R1Y3Rpb24gdG8gYnVpbGRpbmcgc29mdHdhcmUgd2l0aCBHbzwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L3N0ZCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdGFuZGFyZCBsaWJyYXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPlJlZmVyZW5jZSBkb2N1bWVudGF0aW9uIGZvciBHbydzIHN0YW5kYXJkIGxpYnJhcnk8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9kZXZlbC9yZWxlYXNlIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlbGVhc2UgTm90ZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TGVhcm4gd2hhdCdzIG5ldyBpbiBlYWNoIEdvIHJlbGVhc2U8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIGdvLUhlYWRlci1tZW51SXRlbS0tYWN0aXZlIj4KICAgICAgICAgICAgICA8YSBocmVmPSIvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj5QYWNrYWdlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJqcy1kZXNrdG9wLW1lbnUtaG92ZXIiIGhyZWY9IiMiIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPgogICAgICAgICAgICAgICAgQ29tbXVuaXR5CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hcnJvd19kcm9wX2Rvd25fZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJzdWJtZW51IGRyb3Bkb3duIGljb24iPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51IGdvLUhlYWRlci1zdWJtZW51LS1jb21tdW5pdHkganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90YWxrcy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjb3JkZWQgVGFsa3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VmlkZW9zIGZyb20gcHJpb3IgZXZlbnRzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NZWV0dXBzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TWVldCBvdGhlciBsb2NhbCBHbyBkZXZlbG9wZXJzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL3dpa2kvQ29uZmVyZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29uZmVyZW5jZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5MZWFybiBhbmQgbmV0d29yayB3aXRoIEdvIGRldmVsb3BlcnMgZnJvbSBhcm91bmQgdGhlIHdvcmxkPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9ibG9nIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvIGJsb2c8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VGhlIEdvIHByb2plY3QncyBvZmZpY2lhbCBibG9nLjwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HbyBwcm9qZWN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPkdldCBoZWxwIGFuZCBzdGF5IGluZm9ybWVkIGZyb20gR288L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIEdldCBjb25uZWN0ZWQKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9nL2dvbGFuZy1udXRzIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ29vZ2xlLWdyb3Vwcy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ2l0aHViLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvdHdpdHRlci5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL3d3dy5yZWRkaXQuY29tL3IvZ29sYW5nLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3JlZGRpdC5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2ludml0ZS5zbGFjay5nb2xhbmdicmlkZ2Uub3JnLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3NsYWNrLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vY29sbGVjdGl2ZXMvZ28iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zdGFjay1vdmVyZmxvdy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1IZWFkZXItbmF2T3BlbiBqcy1oZWFkZXJNZW51QnV0dG9uIGdvLUhlYWRlci1uYXZPcGVuLS13aGl0ZSIgZGF0YS1ndG1jPSJuYXYgYnV0dG9uIiBhcmlhLWxhYmVsPSJPcGVuIG5hdmlnYXRpb24iPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgogICAgPC9kaXY+CiAgPC9oZWFkZXI+CiAgPGFzaWRlIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyIGpzLWhlYWRlciI+CiAgICA8bmF2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItaGVhZGVyIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi8iPgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1sb2dvIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vZ28tYmx1ZS5zdmciIGFsdD0iR28uIj4KICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0ganMtbW9iaWxlLXN1Ym5hdi10cmlnZ2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItaGFzU3VibmF2Ij4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgPHNwYW4+V2h5IEdvPC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfYmVmb3JlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0Ij4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjY2FzZS1zdHVkaWVzIj4KICAgICAgICAgICAgICAgICAgICAgIENhc2UgU3R1ZGllcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIj4KICAgICAgICAgICAgICAgICAgICAgIFVzZSBDYXNlcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgIFNlY3VyaXR5IFBvbGljeQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyI+TGVhcm48L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGpzLW1vYmlsZS1zdWJuYXYtdHJpZ2dlciBnby1OYXZpZ2F0aW9uRHJhd2VyLWhhc1N1Ym5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxzcGFuPkRvY3M8L3NwYW4+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX25leHRfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBnby1OYXZpZ2F0aW9uRHJhd2VyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX2JlZm9yZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2VmZmVjdGl2ZV9nbyI+CiAgICAgICAgICAgICAgICAgICAgICBFZmZlY3RpdmUgR28KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jLyI+CiAgICAgICAgICAgICAgICAgICAgICBHbyBVc2VyIE1hbnVhbAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3BrZy5nby5kZXYvc3RkIj4KICAgICAgICAgICAgICAgICAgICAgIFN0YW5kYXJkIGxpYnJhcnkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2RldmVsL3JlbGVhc2UiPgogICAgICAgICAgICAgICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSBnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtLS1hY3RpdmUiPgogICAgICAgICAgICA8YSBocmVmPSIvIj5QYWNrYWdlczwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0ganMtbW9iaWxlLXN1Ym5hdi10cmlnZ2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItaGFzU3VibmF2Ij4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgPHNwYW4+Q29tbXVuaXR5PC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBnby1OYXZpZ2F0aW9uRHJhd2VyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9iZWZvcmVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICBDb21tdW5pdHkKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvdGFsa3MvIj4KICAgICAgICAgICAgICAgICAgICAgIFJlY29yZGVkIFRhbGtzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm1lZXR1cC5jb20vcHJvL2dvIj4KICAgICAgICAgICAgICAgICAgICAgIE1lZXR1cHMKICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vd2lraS9Db25mZXJlbmNlcyI+CiAgICAgICAgICAgICAgICAgICAgICBDb25mZXJlbmNlcwogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyI+CiAgICAgICAgICAgICAgICAgICAgICBHbyBibG9nCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiPgogICAgICAgICAgICAgICAgICAgICAgR28gcHJvamVjdAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PkdldCBjb25uZWN0ZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZy9nb2xhbmctbnV0cyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL2dvb2dsZS1ncm91cHMuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ2l0aHViLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9nb2xhbmciPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC90d2l0dGVyLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2dvbGFuZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9yZWRkaXQuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2ludml0ZS5zbGFjay5nb2xhbmdicmlkZ2Uub3JnLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3NsYWNrLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9jb2xsZWN0aXZlcy9nbyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3N0YWNrLW92ZXJmbG93LnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgIDwvdWw+CiAgICA8L25hdj4KICA8L2FzaWRlPgogIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItc2NyaW0ganMtc2NyaW0iIHJvbGU9InByZXNlbnRhdGlvbiI+PC9kaXY+CgogICAgCiAgPG1haW4gY2xhc3M9ImdvLU1haW4iPgogICAgPGRpdiBjbGFzcz0iZ28tTWFpbi1iYW5uZXIiIHJvbGU9ImFsZXJ0Ij48L2Rpdj4KICAgIDxoZWFkZXIgY2xhc3M9ImdvLU1haW4taGVhZGVyIGpzLW1haW5IZWFkZXIiPgogIAogIAogIDxuYXYgY2xhc3M9ImdvLU1haW4taGVhZGVyQnJlYWRjcnVtYiBnby1CcmVhZGNydW1iIiBhcmlhLWxhYmVsPSJCcmVhZGNydW1iIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYiI+CiAgICA8b2w+CiAgICAgIAogICAgICAgIAogICAgICAgICAgPGxpIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1icmVhZGNydW1iSXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGRhdGEtZ3RtYz0iYnJlYWRjcnVtYiBsaW5rIj5EaXNjb3ZlciBQYWNrYWdlczwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnb0B2MC4zLjE2IiBkYXRhLWd0bWM9ImJyZWFkY3J1bWIgbGluayIgYXJpYS1jdXJyZW50PSJsb2NhdGlvbiIKICAgICAgICAgICAgICBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYkN1cnJlbnQiPgogICAgICAgICAgICBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28KICAgICAgICAgIDwvYT4KICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWlubGluZSBnby1DbGlwYm9hcmQganMtY2xpcGJvYXJkIgogICAgICAgICAgICAgIHRpdGxlPSJDb3B5IHBhdGggdG8gY2xpcGJvYXJkLiYjMTA7JiMxMDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ29weSBQYXRoIHRvIENsaXBib2FyZCIKICAgICAgICAgICAgICBkYXRhLXRvLWNvcHk9ImdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgICAgICBkYXRhLWd0bWM9ImJyZWFkY3J1bWJzIGJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb250ZW50X2NvcHlfZ21fZ3JleV8yNGRwLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAKICAgICAgICAKICAgICAgPC9saT4KICAgIDwvb2w+CiAgPC9uYXY+CgogIDxkaXYgY2xhc3M9ImdvLU1haW4taGVhZGVyQ29udGVudCI+CiAgICAKICA8ZGl2IGNsYXNzPSJnby1NYWluLWhlYWRlclRpdGxlIGpzLXN0aWNreUhlYWRlciI+CiAgICA8YSBjbGFzcz0iZ28tTWFpbi1oZWFkZXJMb2dvIiBocmVmPSJodHRwczovL2dvLmRldi8iIGFyaWEtaGlkZGVuPSJ0cnVlIiB0YWJpbmRleD0iLTEiIGRhdGEtZ3RtYz0iaGVhZGVyIGxpbmsiIGFyaWEtbGFiZWw9IkxpbmsgdG8gR28gSG9tZXBhZ2UiPgogICAgICA8aW1nIGhlaWdodD0iNzgiIHdpZHRoPSIyMDciIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nby1ibHVlLnN2ZyIgYWx0PSJHbyI+CiAgICA8L2E+CiAgICA8aDEgY2xhc3M9IlVuaXRIZWFkZXItdGl0bGVIZWFkaW5nIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItdGl0bGUiPm1lcmdvPC9oMT4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1pbnZlcnRlZCI+cGFja2FnZTwvc3Bhbj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1pbnZlcnRlZCI+bW9kdWxlPC9zcGFuPgogICAgCiAgICAKICAgICAgCiAgICAgICAgPGJ1dHRvbgogICAgICAgICAgY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWlubGluZSBnby1DbGlwYm9hcmQganMtY2xpcGJvYXJkIgogICAgICAgICAgdGl0bGU9IkNvcHkgcGF0aCB0byBjbGlwYm9hcmQuJiMxMDsmIzEwO2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNvcHkgUGF0aCB0byBDbGlwYm9hcmQiCiAgICAgICAgICBkYXRhLXRvLWNvcHk9ImdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgIGRhdGEtZ3RtYz0idGl0bGUgYnV0dG9uIgogICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQiCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NvbnRlbnRfY29weV9nbV9ncmV5XzI0ZHAuc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgIC8+CiAgICAgICAgPC9idXR0b24+CiAgICAgIAogICAgCiAgPC9kaXY+CgogICAgCiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxzIj4KICAgIAogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItdmVyc2lvbiI+CiAgICA8YSBocmVmPSI/dGFiPXZlcnNpb25zIiBhcmlhLWxhYmVsPSJHbyB0byBWZXJzaW9ucyIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+PHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPlZlcnNpb246IDwvc3Bhbj52MC4zLjE2PC9hPgogICAgCiAgICA8c3BhbiBjbGFzcz0iRGV0YWlsc0hlYWRlci1iYWRnZS0tbGF0ZXN0IiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItbWlub3JWZXJzaW9uQmFubmVyIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgRGV0YWlsc0hlYWRlci1zcGFuLS1sYXRlc3QiPkxhdGVzdDwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgRGV0YWlsc0hlYWRlci1zcGFuLS1ub3RBdExhdGVzdCI+CiAgICAgICAgTGF0ZXN0CiAgICAgICAgCiAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgIDxzdW1tYXJ5PgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hbGVydF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9Ildhcm5pbmciPgogICAgPC9zdW1tYXJ5PgogICAgPHA+VGhpcyBwYWNrYWdlIGlzIG5vdCBpbiB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgaXRzIG1vZHVsZS48L3A+CiAgPC9kZXRhaWxzPgoKICAgICAgPC9zcGFuPgogICAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiBhcmlhLWxhYmVsPSJHbyB0byBMYXRlc3QgVmVyc2lvbiIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0tYWxlcnQgRGV0YWlsc0hlYWRlci1zcGFuLS1nb1RvTGF0ZXN0Ij5HbyB0byBsYXRlc3Q8L3NwYW4+CiAgICAgIDwvYT4KICAgIDwvc3Bhbj4KICA8L3NwYW4+CgogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItY29tbWl0VGltZSI+CiAgICBQdWJsaXNoZWQ6IEFwciAgMiwgMjAyMwogIDwvc3Bhbj4KCiAgICAgIAogIDxzcGFuIGNsYXNzPSJnby1NYWluLWhlYWRlckRldGFpbEl0ZW0iIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1saWNlbnNlcyI+CiAgICBMaWNlbnNlOiA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1saWNlbnNlcyIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWxpY2Vuc2UiCiAgICAgICAgICAgIGFyaWEtbGFiZWw9IkdvIHRvIExpY2Vuc2VzIiBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj5CU0QtMy1DbGF1c2U8L2E+CiAgICAgIAogICAgCiAgPC9zcGFuPgoKICAgICAgCiAgICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWltcG9ydHMiPgogICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0cyIgYXJpYS1sYWJlbD0iR28gdG8gSW1wb3J0cyIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPkltcG9ydHM6IDwvc3Bhbj41CiAgICA8L2E+CiAgPC9zcGFuPgoKICAgICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItaW1wb3J0ZWRieSI+CiAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRlZGJ5IiBhcmlhLWxhYmVsPSJHbyB0byBJbXBvcnRlZCBCeSIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgIDxzcGFuIGNsYXNzPSJnby10ZXh0U3VidGxlIj5JbXBvcnRlZCBieTogPC9zcGFuPjAKICAgIDwvYT4KICA8L3NwYW4+CgogICAgICAKICAgIAogIDwvZGl2PgogIAogIDxkaXYgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dDb250YWluZXIiPgogICAgPHN2ZyBjbGFzcz0iVW5pdEhlYWRlci1vdmVyZmxvd0ltYWdlIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0Ij4KICAgICAgPHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPgogICAgICA8cGF0aCBkPSJNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6Ii8+CiAgICA8L3N2Zz4KICAgIDxzZWxlY3QgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dTZWxlY3QganMtc2VsZWN0TmF2IiB0YWJpbmRleD0iLTEiPgogICAgICA8b3B0aW9uIHZhbHVlPSIvIj5NYWluPC9vcHRpb24+CiAgICAgIDxvcHRpb24gdmFsdWU9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28/dGFiPXZlcnNpb25zIj4KICAgICAgICBWZXJzaW9ucwogICAgICA8L29wdGlvbj4KICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9bGljZW5zZXMiPgogICAgICAgIExpY2Vuc2VzCiAgICAgIDwvb3B0aW9uPgogICAgICAKICAgICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRzIj4KICAgICAgICAgIEltcG9ydHMKICAgICAgICA8L29wdGlvbj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRlZGJ5Ij4KICAgICAgICAgIEltcG9ydGVkIEJ5CiAgICAgICAgPC9vcHRpb24+CiAgICAgIAogICAgPC9zZWxlY3Q+CiAgPC9kaXY+CgoKICA8L2Rpdj4KCjwvaGVhZGVyPgogICAgPGFzaWRlIGNsYXNzPSJnby1NYWluLWFzaWRlICBqcy1tYWluQXNpZGUiPgogIAogIDxkaXYgY2xhc3M9IlVuaXRNZXRhIj4KICAgIDxoMiBjbGFzcz0iZ28tdGV4dExhYmVsIj5EZXRhaWxzPC9oMj4KICAgIAogIDx1bCBjbGFzcz0iVW5pdE1ldGEtZGV0YWlscyI+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFZhbGlkIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL3RyZWUvdjAuMy4xNi9nby5tb2QiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5nby5tb2Q8L2E+IGZpbGUKICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD4KICAgICAgICAgIFRoZSBHbyBtb2R1bGUgc3lzdGVtIHdhcyBpbnRyb2R1Y2VkIGluIEdvIDEuMTEgYW5kIGlzIHRoZSBvZmZpY2lhbCBkZXBlbmRlbmN5IG1hbmFnZW1lbnQKICAgICAgICAgIHNvbHV0aW9uIGZvciBHby4KICAgICAgICA8L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFJlZGlzdHJpYnV0YWJsZSBsaWNlbnNlCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+CiAgICAgICAgICBSZWRpc3RyaWJ1dGFibGUgbGljZW5zZXMgcGxhY2UgbWluaW1hbCByZXN0cmljdGlvbnMgb24gaG93IHNvZnR3YXJlIGNhbiBiZSB1c2VkLAogICAgICAgICAgbW9kaWZpZWQsIGFuZCByZWRpc3RyaWJ1dGVkLgogICAgICAgIDwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jaGVja19jaXJjbGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJjaGVja2VkImhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CgogICAgICAgICAgVGFnZ2VkIHZlcnNpb24KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD5Nb2R1bGVzIHdpdGggdGFnZ2VkIHZlcnNpb25zIGdpdmUgaW1wb3J0ZXJzIG1vcmUgcHJlZGljdGFibGUgYnVpbGRzLjwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jYW5jZWxfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJ1bmNoZWNrZWQiaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KCiAgICAgICAgICBTdGFibGUgdmVyc2lvbgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2hlbHBfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CiAgICAgICAgPC9zdW1tYXJ5PgogICAgICAgIDxwPldoZW4gYSBwcm9qZWN0IHJlYWNoZXMgbWFqb3IgdmVyc2lvbiB2MSBpdCBpcyBjb25zaWRlcmVkIHN0YWJsZS48L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IlVuaXRNZXRhLWRldGFpbHNMZWFybiI+CiAgICAgIDxhIGhyZWY9Ii9hYm91dCNiZXN0LXByYWN0aWNlcy1oMiIgZGF0YS1ndG1jPSJtZXRhIGxpbmsiPkxlYXJuIG1vcmU8L2E+CiAgICA8L2xpPgogIDwvdWw+CgogICAgPGgyIGNsYXNzPSJnby10ZXh0TGFiZWwiPlJlcG9zaXRvcnk8L2gyPgogICAgPGRpdiBjbGFzcz0iVW5pdE1ldGEtcmVwbyI+CiAgICAgIAogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiB0aXRsZT0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj4KICAgICAgICAgIGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwogICAgICAgIDwvYT4KICAgICAgCiAgICA8L2Rpdj4KICAgIAogICAgICA8aDIgY2xhc3M9ImdvLXRleHRMYWJlbCI+TGlua3M8L2gyPgogICAgICA8dWwgY2xhc3M9IlVuaXRNZXRhLWxpbmtzIj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kZXBzLmRldi9nby9naXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvL3YwLjMuMTYiIHRpdGxlPSJWaWV3IHRoaXMgbW9kdWxlIG9uIE9wZW4gU291cmNlIEluc2lnaHRzIgogICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBkYXRhLXRlc3QtaWQ9Im1ldGEtbGluay1kZXBzZGV2Ij4KICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJkZXBzZGV2LUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9kZXBzZGV2LWxvZ28uc3ZnIgogICAgICAgICAgICAgICAgYWx0PSJPcGVuIFNvdXJjZSBJbnNpZ2h0cyBMb2dvIiAvPgogICAgICAgICAgICAgIE9wZW4gU291cmNlIEluc2lnaHRzCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgCiAgCgogICAgICAgIAogIAoKICAgICAgICAKICAKCiAgICAgIDwvdWw+CiAgICAKICA8L2Rpdj4KCjwvYXNpZGU+CiAgICA8bmF2IGNsYXNzPSJnby1NYWluLW5hdiBnby1NYWluLW5hdi0tc3RpY2t5IGpzLW1haW5OYXYiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogIDxkaXYgY2xhc3M9ImdvLU1haW4tbmF2RGVza3RvcCI+CiAgICAKICA8ZGl2IGNsYXNzPSJVbml0T3V0bGluZS1qdW1wVG8iPgogICAgPGJ1dHRvbiBjbGFzcz0iVW5pdE91dGxpbmUtanVtcFRvSW5wdXQgZ28tU2hvcnRjdXRLZXkganMtanVtcFRvSW5wdXQiCiAgICAgICAgYXJpYS1jb250cm9scz0ianVtcC10by1tb2RhbCIKICAgICAgICBhcmlhLWxhYmVsPSJPcGVuIEp1bXAgdG8gSWRlbnRpZmllciIKICAgICAgICBkYXRhLXNob3J0Y3V0PSJmIgogICAgICAgIGRhdGEtc2hvcnRjdXQtYWx0PSJmaW5kIgogICAgICAgIGRhdGEtdGVzdC1pZD0ianVtcC10by1idXR0b24iIGRhdGEtZ3RtYz0ib3V0bGluZSBidXR0b24iPgogICAgICBKdW1wIHRvIC4uLgogICAgPC9idXR0b24+CiAgPC9kaXY+CiAgPHVsIGNsYXNzPSJnby1UcmVlIGpzLXRyZWUiIHJvbGU9InRyZWUiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogICAgCiAgICAgIDxsaSBjbGFzcz0ianMtcmVhZG1lT3V0bGluZSI+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tcmVhZG1lIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBSRUFETUUKICAgICAgICA8L2E+CiAgICAgICAgCiAgPHVsIGlkPSJyZWFkbWUtb3V0bGluZSI+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtc3RhdHVzIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgU3RhdHVzCiAgICAgICAgPC9hPgogICAgICAgIAogICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWltcG9ydGFudC1ub3RlIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBJbXBvcnRhbnQgbm90ZQogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtZG9uYXRpb25zIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBEb25hdGlvbnMKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLW1lcmdvLWluLXRoZS13aWxkIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBNZXJnbyBpbiB0aGUgd2lsZAogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvdWw+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWluc3RhbGwiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBJbnN0YWxsCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS11c2FnZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIFVzYWdlCiAgICAgICAgPC9hPgogICAgICAgIAogICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtZXJzCiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtY29udGFjdC1tZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIENvbnRhY3QgbWUKICAgICAgICA8L2E+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWFib3V0IiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgQWJvdXQKICAgICAgICA8L2E+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWxpY2Vuc2UiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBMaWNlbnNlCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgICAKICA8L3VsPgoKICAgICAgPC9saT4KICAgIAogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjc2VjdGlvbi1kb2N1bWVudGF0aW9uIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBEb2N1bWVudGF0aW9uCiAgICAgICAgPC9hPgogICAgICAgIAo8dWw+CiAgCiAgICA8bGk+CiAgICAgIDxhIGhyZWY9IiNwa2ctb3ZlcnZpZXciIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+T3ZlcnZpZXc8L2E+CiAgICA8L2xpPgogIDxsaSBjbGFzcz0iRG9jTmF2LW92ZXJ2aWV3Ij4KICAgICAgPGEgaHJlZj0iI3BrZy1pbmRleCIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBJbmRleAogICAgICA8L2E+CiAgICAgIAogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LWNvbnN0YW50cyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIENvbnN0YW50cwogICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtdmFyaWFibGVzIj4KICAgICAgPGEgaHJlZj0iI3BrZy12YXJpYWJsZXMiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgVmFyaWFibGVzCiAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY05hdi1mdW5jdGlvbnMiPgogICAgICA8YSBocmVmPSIjcGtnLWZ1bmN0aW9ucyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBGdW5jdGlvbnMKICAgICAgPC9hPgogICAgICAKICAgICAgICA8dWw+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNYXAiIHRpdGxlPSJNYXAoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWFwKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI01hcFdpdGhPdmVyd3JpdGUiIHRpdGxlPSJNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIE1hcFdpdGhPdmVyd3JpdGUoZHN0LCBzcmMsIG9wdHMpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjTWVyZ2UiIHRpdGxlPSJNZXJnZShkc3QsIHNyYywgb3B0cykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBNZXJnZShkc3QsIHNyYywgb3B0cykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiIHRpdGxlPSJNZXJnZVdpdGhPdmVyd3JpdGUoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhBcHBlbmRTbGljZSIgdGl0bGU9IldpdGhBcHBlbmRTbGljZShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aEFwcGVuZFNsaWNlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiIHRpdGxlPSJXaXRoT3ZlcnJpZGUoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVycmlkZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aE92ZXJyaWRlRW1wdHlTbGljZSIgdGl0bGU9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVycmlkZUVtcHR5U2xpY2UoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSIgdGl0bGU9IldpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoU2xpY2VEZWVwQ29weSIgdGl0bGU9IldpdGhTbGljZURlZXBDb3B5KGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoU2xpY2VEZWVwQ29weShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyIgdGl0bGU9IldpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhUeXBlQ2hlY2siIHRpdGxlPSJXaXRoVHlwZUNoZWNrKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoVHlwZUNoZWNrKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRob3V0RGVyZWZlcmVuY2UiIHRpdGxlPSJXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhvdXREZXJlZmVyZW5jZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgPC91bD4KICAgICAgCiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtdHlwZXMiPgogICAgICA8YSBocmVmPSIjcGtnLXR5cGVzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIFR5cGVzCiAgICAgIDwvYT4KICAgICAgPHVsPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDb25maWciIHRpdGxlPSJ0eXBlIENvbmZpZyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIENvbmZpZwogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1RyYW5zZm9ybWVycyIgdGl0bGU9InR5cGUgVHJhbnNmb3JtZXJzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgIHR5cGUgVHJhbnNmb3JtZXJzCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgIAogICAgICAgICAgPC9saT4KICAgICAgICAgCiAgICAgIDwvdWw+CiAgICA8L2xpPgogIAogIAo8L3VsPgoKICAgICAgPC9saT4KICAgIAogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjc2VjdGlvbi1zb3VyY2VmaWxlcyIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgU291cmNlIEZpbGVzCiAgICAgICAgPC9hPgogICAgICA8L2xpPgogICAgCiAgICAKICA8L3VsPgoKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJnby1NYWluLW5hdk1vYmlsZSBqcy1tYWluTmF2TW9iaWxlIj4KICAgIDxsYWJlbCBjbGFzcz0iZ28tTGFiZWwiPgogICAgICA8c2VsZWN0IGNsYXNzPSJnby1TZWxlY3QiPgogICAgICAgIAogICAgICAgICAgPG9wdGlvbiBzZWxlY3RlZCBkaXNhYmxlZD5SRUFETUU8L29wdGlvbj4KICAgICAgICAKICAgICAgPC9zZWxlY3Q+CiAgICA8L2xhYmVsPgogIDwvZGl2Pgo8L25hdj4KICAgIDxhcnRpY2xlIGNsYXNzPSJnby1NYWluLWFydGljbGUganMtbWFpbkNvbnRlbnQiPgogIDxkaXYgY2xhc3M9IlVuaXREZXRhaWxzIiBkYXRhLXRlc3QtaWQ9IlVuaXREZXRhaWxzIiBzdHlsZT0iZGlzcGxheTogYmxvY2s7Ij4KICAgIDxkaXYgY2xhc3M9IlVuaXREZXRhaWxzLWNvbnRlbnQganMtdW5pdERldGFpbHNDb250ZW50IiBkYXRhLXRlc3QtaWQ9IlVuaXREZXRhaWxzLWNvbnRlbnQiPgogICAgICAKICAgICAgICAKICA8ZGl2IGNsYXNzPSJVbml0UmVhZG1lIFVuaXRSZWFkbWUtLWV4cGFuZGVkIGpzLXJlYWRtZSI+CiAgICA8aDIgY2xhc3M9IlVuaXRSZWFkbWUtdGl0bGUiIGlkPSJzZWN0aW9uLXJlYWRtZSI+CiAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nocm9tZV9yZWFkZXJfbW9kZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgIFJFQURNRQogICAgICA8YSBjbGFzcz0iVW5pdFJlYWRtZS1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLXJlYWRtZSI+wrY8L2E+CiAgICA8L2gyPgogICAgCiAgICAgIDxkaXYgY2xhc3M9IlVuaXRSZWFkbWUtY29udGVudCIgZGF0YS10ZXN0LWlkPSJVbml0LXJlYWRtZUNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Ik92ZXJ2aWV3LXJlYWRtZUNvbnRlbnQganMtcmVhZG1lQ29udGVudCI+PGgzIGNsYXNzPSJoMSIgaWQ9InJlYWRtZS1tZXJnbyI+TWVyZ288L2gzPgo8cD48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9yZWxlYXNlcyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UvaW1kYXJpby9tZXJnby5zdmciIGFsdD0iR2l0SHViIHJlbGVhc2UiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ29yZXBvcnRjYXJkLmNvbS9yZXBvcnQvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9nb3JlcG9ydGNhcmQuY29tL2JhZGdlL2ltZGFyaW8vbWVyZ28iIGFsdD0iR29DYXJkIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9hY3Rpb25zL3dvcmtmbG93cy90ZXN0cy55bWwiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby93b3JrZmxvd3MvdGVzdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIiIGFsdD0iVGVzdCBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYXBpLnNlY3VyaXR5c2NvcmVjYXJkcy5kZXYvcHJvamVjdHMvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcGkuc2VjdXJpdHlzY29yZWNhcmRzLmRldi9wcm9qZWN0cy9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmFkZ2UiIGFsdD0iT3BlblNTRiBTY29yZWNhcmQiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYmVzdHByYWN0aWNlcy5jb3JlaW5mcmFzdHJ1Y3R1cmUub3JnL3Byb2plY3RzLzcxNzciIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2Jlc3RwcmFjdGljZXMuY29yZWluZnJhc3RydWN0dXJlLm9yZy9wcm9qZWN0cy83MTc3L2JhZGdlIiBhbHQ9Ik9wZW5TU0YgQmVzdCBQcmFjdGljZXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vY292ZXJhbGxzLmlvL2dpdGh1Yi9pbWRhcmlvL21lcmdvP2JyYW5jaD1tYXN0ZXIiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9naXRodWIvaW1kYXJpby9tZXJnby9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlciIgYWx0PSJDb3ZlcmFnZSBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9iYWRnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby8tL2JhZGdlLnN2ZyIgYWx0PSJTb3VyY2VncmFwaCIvPjwvYT4KPGEgaHJlZj0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vcHJvamVjdHMvZ2l0JTJCZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbz9yZWY9YmFkZ2Vfc2hpZWxkIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vYXBpL3Byb2plY3RzL2dpdCUyQmdpdGh1Yi5jb20lMkZpbWRhcmlvJTJGbWVyZ28uc3ZnP3R5cGU9c2hpZWxkIiBhbHQ9IkZPU1NBIHN0YXR1cyIvPjwvYT48L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9zdGF0dXMuc3ZnIiBhbHQ9IkdvRG9jIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc3BvbnNvcnMvaW1kYXJpbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3Nwb25zb3JzL2ltZGFyaW8iIGFsdD0iQmVjb21lIG15IHNwb25zb3IiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vdGlkZWxpZnQuY29tL3N1YnNjcmlwdGlvbi9wa2cvZ28tZ2l0aHViLmNvbS1pbWRhcmlvLW1lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly90aWRlbGlmdC5jb20vYmFkZ2VzL3BhY2thZ2UvZ28vZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbyIgYWx0PSJUaWRlbGlmdCIvPjwvYT48L3A+CjxwPkEgaGVscGVyIHRvIG1lcmdlIHN0cnVjdHMgYW5kIG1hcHMgaW4gR29sYW5nLiBVc2VmdWwgZm9yIGNvbmZpZ3VyYXRpb24gZGVmYXVsdCB2YWx1ZXMsIGF2b2lkaW5nIG1lc3N5IGlmLXN0YXRlbWVudHMuPC9wPgo8cD5NZXJnbyBtZXJnZXMgc2FtZS10eXBlIHN0cnVjdHMgYW5kIG1hcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBpbiB6ZXJvLXZhbHVlIGZpZWxkcy4gTWVyZ28gd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcy4gSXQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgb25lLiBJdCBhbHNvIHdvbiYjMzk7dCBtZXJnZSBzdHJ1Y3RzIGluc2lkZSBtYXBzIChiZWNhdXNlIHRoZXkgYXJlIG5vdCBhZGRyZXNzYWJsZSB1c2luZyBHbyByZWZsZWN0aW9uKS48L3A+CjxwPkFsc28gYSBsb3ZlbHkgPGEgaHJlZj0iaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZXJnbyIgcmVsPSJub2ZvbGxvdyI+Y29tdW5lPC9hPiAobXVuaWNpcGFsaXR5KSBpbiB0aGUgUHJvdmluY2Ugb2YgQW5jb25hIGluIHRoZSBJdGFsaWFuIHJlZ2lvbiBvZiBNYXJjaGUuPC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLXN0YXR1cyI+U3RhdHVzPC9oND4KPHA+SXQgaXMgcmVhZHkgZm9yIHByb2R1Y3Rpb24gdXNlLiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyNtZXJnby1pbi10aGUtd2lsZCIgcmVsPSJub2ZvbGxvdyI+SXQgaXMgdXNlZCBpbiBzZXZlcmFsIHByb2plY3RzIGJ5IERvY2tlciwgR29vZ2xlLCBUaGUgTGludXggRm91bmRhdGlvbiwgVk1XYXJlLCBTaG9waWZ5LCBNaWNyb3NvZnQsIGV0YzwvYT4uPC9wPgo8aDUgY2xhc3M9ImgzIiBpZD0icmVhZG1lLWltcG9ydGFudC1ub3RlIj5JbXBvcnRhbnQgbm90ZTwvaDU+CjxwPlBsZWFzZSBrZWVwIGluIG1pbmQgdGhhdCBhIHByb2JsZW1hdGljIFBSIGJyb2tlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuOSIgcmVsPSJub2ZvbGxvdyI+MC4zLjk8L2E+LiBJIHJldmVydGVkIGl0IGluIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuMTAiIHJlbD0ibm9mb2xsb3ciPjAuMy4xMDwvYT4sIGFuZCBJIGNvbnNpZGVyIGl0IHN0YWJsZSBidXQgbm90IGJ1Zy1mcmVlLiBBbHNvLCB0aGlzIHZlcnNpb24gYWRkcyBzdXBwb3J0IGZvciBnbyBtb2R1bGVzLjwvcD4KPHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2ltZGFyaW8vbWVyZ28vcmVsZWFzZXMvdGFnLzAuMy4yIiByZWw9Im5vZm9sbG93Ij4wLjMuMjwvYT4sIE1lcmdvIGNoYW5nZWQgPGNvZGU+TWVyZ2UoKTwvY29kZT5hbmQgPGNvZGU+TWFwKCk8L2NvZGU+IHNpZ25hdHVyZXMgdG8gc3VwcG9ydCA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgcmVsPSJub2ZvbGxvdyI+dHJhbnNmb3JtZXJzPC9hPi4gSSBhZGRlZCBhbiBvcHRpb25hbC92YXJpYWRpYyBhcmd1bWVudCBzbyB0aGF0IGl0IHdvbiYjMzk7dCBicmVhayB0aGUgZXhpc3RpbmcgY29kZS48L3A+CjxwPklmIHlvdSB3ZXJlIHVzaW5nIE1lcmdvIGJlZm9yZSBBcHJpbCA2dGgsIDIwMTUsIHBsZWFzZSBjaGVjayB5b3VyIHByb2plY3Qgd29ya3MgYXMgaW50ZW5kZWQgYWZ0ZXIgdXBkYXRpbmcgeW91ciBsb2NhbCBjb3B5IHdpdGggPGNvZGU+Z28gZ2V0IC11IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbzwvY29kZT4uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS48L3A+CjxoNSBjbGFzcz0iaDMiIGlkPSJyZWFkbWUtZG9uYXRpb25zIj5Eb25hdGlvbnM8L2g1Pgo8cD5JZiBNZXJnbyBpcyB1c2VmdWwgdG8geW91LCBjb25zaWRlciBidXlpbmcgbWUgYSBjb2ZmZWUsIGEgYmVlciwgb3IgbWFraW5nIGEgbW9udGhseSBkb25hdGlvbiB0byBhbGxvdyBtZSB0byBrZWVwIGJ1aWxkaW5nIGdyZWF0IGZyZWUgc29mdHdhcmUuIPCfmI08L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8va28tZmkuY29tL0IwQjU4ODM5IiByZWw9Im5vZm9sbG93Ij48aW1nIGhlaWdodD0iMzYiIHNyYz0iaHR0cHM6Ly9hejc0MzcwMi52by5tc2VjbmQubmV0L2Nkbi9rb2ZpMS5wbmc/dj0wIiBhbHQ9IkJ1eSBNZSBhIENvZmZlZSBhdCBrby1maS5jb20iLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9kYXJpby9kb25hdGUiIHJlbD0ibm9mb2xsb3ciPjxpbWcgYWx0PSJEb25hdGUgdXNpbmcgTGliZXJhcGF5IiBzcmM9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9hc3NldHMvd2lkZ2V0cy9kb25hdGUuc3ZnIj48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zcG9uc29ycy9pbWRhcmlvIiByZWw9Im5vZm9sbG93Ij48aW1nIGFsdD0iQmVjb21lIG15IHNwb25zb3IiIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvc3BvbnNvcnMvaW1kYXJpbz9zdHlsZT1mb3ItdGhlLWJhZGdlIi8+PC9hPjwvcD4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS1tZXJnby1pbi10aGUtd2lsZCI+TWVyZ28gaW4gdGhlIHdpbGQ8L2g1Pgo8dWw+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbW9ieS9tb2J5IiByZWw9Im5vZm9sbG93Ij5tb2J5L21vYnk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2t1YmVybmV0ZXMiIHJlbD0ibm9mb2xsb3ciPmt1YmVybmV0ZXMva3ViZXJuZXRlczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Ztd2FyZS9kaXNwYXRjaCIgcmVsPSJub2ZvbGxvdyI+dm13YXJlL2Rpc3BhdGNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vU2hvcGlmeS90aGVtZWtpdCIgcmVsPSJub2ZvbGxvdyI+U2hvcGlmeS90aGVtZWtpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vemFzIiByZWw9Im5vZm9sbG93Ij5pbWRhcmlvL3phczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hdGNvcm5pYy9oZXJtZXMiIHJlbD0ibm9mb2xsb3ciPm1hdGNvcm5pYy9oZXJtZXM8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuQmF6YWFyL29wZW5iYXphYXItZ28iIHJlbD0ibm9mb2xsb3ciPk9wZW5CYXphYXIvb3BlbmJhemFhci1nbzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2thdGFyYXMvaXJpcyIgcmVsPSJub2ZvbGxvdyI+a2F0YXJhcy9pcmlzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbHNhdXRlci9jcmFuZSIgcmVsPSJub2ZvbGxvdyI+bWljaGFlbHNhdXRlci9jcmFuZTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvLXRhc2svdGFzayIgcmVsPSJub2ZvbGxvdyI+Z28tdGFzay90YXNrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc2Vuc3UvdWNoaXdhIiByZWw9Im5vZm9sbG93Ij5zZW5zdS91Y2hpd2E8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vcnkvaHlkcmEiIHJlbD0ibm9mb2xsb3ciPm9yeS9oeWRyYTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Npc2F0ZWNoL3ZjbGkiIHJlbD0ibm9mb2xsb3ciPnNpc2F0ZWNoL3ZjbGk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kYWlyeWNhcnQvZGFpcnljYXJ0IiByZWw9Im5vZm9sbG93Ij5kYWlyeWNhcnQvZGFpcnljYXJ0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcHJvamVjdGNhbGljby9mZWxpeCIgcmVsPSJub2ZvbGxvdyI+cHJvamVjdGNhbGljby9mZWxpeDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Jlc2luLW9zL2JhbGVuYSIgcmVsPSJub2ZvbGxvdyI+cmVzaW4tb3MvYmFsZW5hPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ28ta2l2aWsva2l2aWsiIHJlbD0ibm9mb2xsb3ciPmdvLWtpdmlrL2tpdmlrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vVGVsZWZvbmljYS9nb3ZpY2UiIHJlbD0ibm9mb2xsb3ciPlRlbGVmb25pY2EvZ292aWNlPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvc3VwZXJnaWFudC9zdXBlcmdpYW50IiByZWw9Im5vZm9sbG93Ij5zdXBlcmdpYW50L3N1cGVyZ2lhbnQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9TZXJnZXlUc2Fsa292L2Jyb29jZSIgcmVsPSJub2ZvbGxvdyI+U2VyZ2V5VHNhbGtvdi9icm9vY2U8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zb25pYWgvZG5zbWFkZWVhc3kiIHJlbD0ibm9mb2xsb3ciPnNvbmlhaC9kbnNtYWRlZWFzeTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL29oc3UtY29tcC1iaW8vZnVubmVsIiByZWw9Im5vZm9sbG93Ij5vaHN1LWNvbXAtYmlvL2Z1bm5lbDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0VhZ2VySU8vU3RvdXQiIHJlbD0ibm9mb2xsb3ciPkVhZ2VySU8vU3RvdXQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpIiByZWw9Im5vZm9sbG93Ij5seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcnVzc3Jvc3MvY2FudmFzYXNzaWdubWVudHMiIHJlbD0ibm9mb2xsb3ciPnJ1c3Nyb3NzL2NhbnZhc2Fzc2lnbm1lbnRzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcmRlZ2dlcy9jcnlwdGx5LWFwaSIgcmVsPSJub2ZvbGxvdyI+cmRlZ2dlcy9jcnlwdGx5LWFwaTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Nhc3VhbGppbS9leGVnZ3V0b3IiIHJlbD0ibm9mb2xsb3ciPmNhc3VhbGppbS9leGVnZ3V0b3I8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kaXZzaG90L2dpdGxpbmciIHJlbD0ibm9mb2xsb3ciPmRpdnNob3QvZ2l0bGluZzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL1JXSk11cnBoeS9nb3JsIiByZWw9Im5vZm9sbG93Ij5SV0pNdXJwaHkvZ29ybDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2FuZHJlcm9ja2VyL2RlcGxveTQyIiByZWw9Im5vZm9sbG93Ij5hbmRyZXJvY2tlci9kZXBsb3k0MjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Vsd2luYXIvcmFtYmxlciIgcmVsPSJub2ZvbGxvdyI+ZWx3aW5hci9yYW1ibGVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vdG1haWFyb3RvL2dvcGFydG1hbiIgcmVsPSJub2ZvbGxvdyI+dG1haWFyb3RvL2dvcGFydG1hbjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2pmYnVzL2ltcHJlc3Npb25pc3QiIHJlbD0ibm9mb2xsb3ciPmpmYnVzL2ltcHJlc3Npb25pc3Q8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9KbWV5ZXJpbmcvemVhbG90IiByZWw9Im5vZm9sbG93Ij5KbWV5ZXJpbmcvemVhbG90PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29kZXAtbWlncmF0b3IvcmlnZ2VyLWhvc3QiIHJlbD0ibm9mb2xsb3ciPmdvZGVwLW1pZ3JhdG9yL3JpZ2dlci1ob3N0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vRHJvbmV2ZXJ5L011bHRpd2F5U3dpdGNoLUdvIiByZWw9Im5vZm9sbG93Ij5Ecm9uZXZlcnkvTXVsdGl3YXlTd2l0Y2gtR288L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90aG9hcy9waWNmaXQiIHJlbD0ibm9mb2xsb3ciPnRob2FzL3BpY2ZpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hbnRhc21hdGVsaXMvd2hvb3BsaXN0LXNlcnZlciIgcmVsPSJub2ZvbGxvdyI+bWFudGFzbWF0ZWxpcy93aG9vcGxpc3Qtc2VydmVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vam51dGhvbmcvaXRlbV9zZWFyY2giIHJlbD0ibm9mb2xsb3ciPmpudXRob25nL2l0ZW1fc2VhcmNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYnVrYWxhcGFrL3Nub3dib2FyZCIgcmVsPSJub2ZvbGxvdyI+YnVrYWxhcGFrL3Nub3dib2FyZDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcnNzaC9jb250YWluZXJzc2giIHJlbD0ibm9mb2xsb3ciPmNvbnRhaW5lcnNzaC9jb250YWluZXJzc2g8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb3JlbGVhc2VyL2dvcmVsZWFzZXIiIHJlbD0ibm9mb2xsb3ciPmdvcmVsZWFzZXIvZ29yZWxlYXNlcjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3RqcG56L3N0cnVjdGJvdCIgcmVsPSJub2ZvbGxvdyI+dGpwbnovc3RydWN0Ym90PC9hPjwvbGk+CjwvdWw+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtaW5zdGFsbCI+SW5zdGFsbDwvaDQ+CjxwcmU+PGNvZGU+Z28gZ2V0IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwoKLy8gdXNlIGluIHlvdXIgLmdvIGNvZGUKaW1wb3J0ICgKICAgICYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQo8L2NvZGU+PC9wcmU+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtdXNhZ2UiPlVzYWdlPC9oND4KPHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIDxhIGhyZWY9Imh0dHBzOi8vZ29sYW5nLm9yZy9yZWYvc3BlYyNUaGVfemVyb192YWx1ZSIgcmVsPSJub2ZvbGxvdyI+dGhleSBhcmUgemVybyB2YWx1ZXM8L2E+IHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BbHNvLCB5b3UgY2FuIG1lcmdlIG92ZXJ3cml0aW5nIHZhbHVlcyB1c2luZyB0aGUgdHJhbnNmb3JtZXIgPGNvZGU+V2l0aE92ZXJyaWRlPC9jb2RlPi48L3A+CjxwcmU+PGNvZGU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BZGRpdGlvbmFsbHksIHlvdSBjYW4gbWFwIGEgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gPGNvZGU+TWVyZ2UoKTwvY29kZT4uIEtleXMgYXJlIGNhcGl0YWxpemVkIHRvIGZpbmQgZWFjaCBjb3JyZXNwb25kaW5nIGV4cG9ydGVkIGZpZWxkLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWFwKCZhbXA7ZHN0LCBzcmNNYXApOyBlcnIgIT0gbmlsIHsKICAgIC8vIC4uLgp9CjwvY29kZT48L3ByZT4KPHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4uIFRoZXkgd2lsbCBiZSBqdXN0IGFzc2lnbmVkIGFzIHZhbHVlcy48L3A+CjxwPkhlcmUgaXMgYSBuaWNlIGV4YW1wbGU6PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQoKdHlwZSBGb28gc3RydWN0IHsKCUEgc3RyaW5nCglCIGludDY0Cn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBGb297CgkJQTogJiMzNDtvbmUmIzM0OywKCQlCOiAyLAoJfQoJZGVzdCA6PSBGb297CgkJQTogJiMzNDt0d28mIzM0OywKCX0KCW1lcmdvLk1lcmdlKCZhbXA7ZGVzdCwgc3JjKQoJZm10LlByaW50bG4oZGVzdCkKCS8vIFdpbGwgcHJpbnQKCS8vIHt0d28gMn0KfQo8L2NvZGU+PC9wcmU+CjxwPk5vdGU6IGlmIHRlc3QgYXJlIGZhaWxpbmcgZHVlIG1pc3NpbmcgcGFja2FnZSwgcGxlYXNlIGV4ZWN1dGU6PC9wPgo8cHJlPjxjb2RlPmdvIGdldCBnb3BrZy5pbi95YW1sLnYzCjwvY29kZT48L3ByZT4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS10cmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvaDU+CjxwPlRyYW5zZm9ybWVycyBhbGxvdyB0byBtZXJnZSBzcGVjaWZpYyB0eXBlcyBkaWZmZXJlbnRseSB0aGFuIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJbiBvdGhlciB3b3Jkcywgbm93IHlvdSBjYW4gY3VzdG9taXplIGhvdyBzb21lIHR5cGVzIGFyZSBtZXJnZWQuIEZvciBleGFtcGxlLCA8Y29kZT50aW1lLlRpbWU8L2NvZGU+IGlzIGEgc3RydWN0OyBpdCBkb2VzbiYjMzk7dCBoYXZlIHplcm8gdmFsdWUgYnV0IElzWmVybyBjYW4gcmV0dXJuIHRydWUgYmVjYXVzZSBpdCBoYXMgZmllbGRzIHdpdGggemVybyB2YWx1ZS4gSG93IGNhbiB3ZSBtZXJnZSBhIG5vbi16ZXJvIDxjb2RlPnRpbWUuVGltZTwvY29kZT4/PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKICAgICAgICAmIzM0O3JlZmxlY3QmIzM0OwogICAgICAgICYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9jb2RlPjwvcHJlPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWNvbnRhY3QtbWUiPkNvbnRhY3QgbWU8L2g0Pgo8cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIiByZWw9Im5vZm9sbG93Ij5AaW1fZGFyaW88L2E+PC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWFib3V0Ij5BYm91dDwvaDQ+CjxwPldyaXR0ZW4gYnkgPGEgaHJlZj0iaHR0cDovL2RhcmlvLmltIiByZWw9Im5vZm9sbG93Ij5EYXJpbyBDYXN0YcOxw6k8L2E+LjwvcD4KPGg0IGNsYXNzPSJoMiIgaWQ9InJlYWRtZS1saWNlbnNlIj5MaWNlbnNlPC9oND4KPHA+PGEgaHJlZj0iaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZSIgcmVsPSJub2ZvbGxvdyI+QlNEIDMtQ2xhdXNlPC9hPiBsaWNlbnNlLCBhcyA8YSBocmVmPSJodHRwOi8vZ29sYW5nLm9yZy9MSUNFTlNFIiByZWw9Im5vZm9sbG93Ij5HbyBsYW5ndWFnZTwvYT4uPC9wPgo8cD48YSBocmVmPSJodHRwczovL2FwcC5mb3NzYS5pby9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvP3JlZj1iYWRnZV9sYXJnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vYXBwLmZvc3NhLmlvL2FwaS9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvLnN2Zz90eXBlPWxhcmdlIiBhbHQ9IkZPU1NBIFN0YXR1cyIvPjwvYT48L3A+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iVW5pdFJlYWRtZS1leHBhbmRMaW5rIGpzLXJlYWRtZUV4cGFuZCIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWV4cGFuZCIgZGF0YS1ndG1jPSJyZWFkbWUgYnV0dG9uIgogICAgICAgICAgYXJpYS1sYWJlbD0iRXhwYW5kIFJlYWRtZSI+RXhwYW5kIOKWvjwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJVbml0UmVhZG1lLWNvbGxhcHNlTGluayBqcy1yZWFkbWVDb2xsYXBzZSIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWNvbGxhcHNlIiBkYXRhLWd0bWM9InJlYWRtZSBidXR0b24iCiAgICAgICAgICBhcmlhLWxhYmVsPSJFeHBhbmQgUmVhZG1lIj5Db2xsYXBzZSDilrQ8L2J1dHRvbj4KICAgIAogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdERvYyI+CiAgICA8aDIgY2xhc3M9IlVuaXREb2MtdGl0bGUiIGlkPSJzZWN0aW9uLWRvY3VtZW50YXRpb24iPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb2RlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgRG9jdW1lbnRhdGlvbgogICAgICA8YSBjbGFzcz0iVW5pdERvYy1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLWRvY3VtZW50YXRpb24iPsK2PC9hPgogICAgPC9oMj4KICAgIAogIAogICAgCiAgCgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbiBqcy1kb2N1bWVudGF0aW9uIj4KICAgICAgCiAgICAgICAgCgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnRlbnQganMtZG9jQ29udGVudCI+IDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3Ij4KICAgIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctb3ZlcnZpZXciIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3SGVhZGVyIj5PdmVydmlldyA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3Ij7CtjwvYT48L2gzPgoKPGRpdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJUYWJsZSBvZiBDb250ZW50cyI+CiAgPHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvYyBEb2N1bWVudGF0aW9uLXRvYy1jb2x1bW5zIj4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVN0YXR1cyI+U3RhdHVzPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItSW5zdGFsbCI+SW5zdGFsbDwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVVzYWdlIj5Vc2FnZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVRyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItQ29udGFjdF9tZSI+Q29udGFjdCBtZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUFib3V0Ij5BYm91dDwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUxpY2Vuc2UiPkxpY2Vuc2U8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgo8L2Rpdj4KPHA+QSBoZWxwZXIgdG8gbWVyZ2Ugc3RydWN0cyBhbmQgbWFwcyBpbiBHb2xhbmcuIFVzZWZ1bCBmb3IgY29uZmlndXJhdGlvbiBkZWZhdWx0IHZhbHVlcywgYXZvaWRpbmcgbWVzc3kgaWYtc3RhdGVtZW50cy4KPC9wPjxwPk1lcmdvIG1lcmdlcyBzYW1lLXR5cGUgc3RydWN0cyBhbmQgbWFwcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGluIHplcm8tdmFsdWUgZmllbGRzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzLiBJdCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IGFsc28gd29uJiMzOTt0IG1lcmdlIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLgo8L3A+PGg0IGlkPSJoZHItU3RhdHVzIj5TdGF0dXMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLVN0YXR1cyI+wrY8L2E+PC9oND48cD5JdCBpcyByZWFkeSBmb3IgcHJvZHVjdGlvbiB1c2UuIEl0IGlzIHVzZWQgaW4gc2V2ZXJhbCBwcm9qZWN0cyBieSBEb2NrZXIsIEdvb2dsZSwgVGhlIExpbnV4IEZvdW5kYXRpb24sIFZNV2FyZSwgU2hvcGlmeSwgZXRjLgo8L3A+PGg0IGlkPSJoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbXBvcnRhbnRfbm90ZSI+wrY8L2E+PC9oND48cD5QbGVhc2Uga2VlcCBpbiBtaW5kIHRoYXQgYSBwcm9ibGVtYXRpYyBQUiBicm9rZSAwLjMuOS4gV2UgcmV2ZXJ0ZWQgaXQgaW4gMC4zLjEwLiBXZSBjb25zaWRlciAwLjMuMTAgYXMgc3RhYmxlIGJ1dCBub3QgYnVnLWZyZWUuIC4gQWxzbywgdGhpcyB2ZXJzaW9uIGFkZHMgc3VwcG90IGZvciBnbyBtb2R1bGVzLgo8L3A+PHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gMC4zLjIsIE1lcmdvIGNoYW5nZWQgTWVyZ2UoKSBhbmQgTWFwKCkgc2lnbmF0dXJlcyB0byBzdXBwb3J0IHRyYW5zZm9ybWVycy4gV2UgYWRkZWQgYW4gb3B0aW9uYWwvdmFyaWFkaWMgYXJndW1lbnQgc28gdGhhdCBpdCB3b24mIzM5O3QgYnJlYWsgdGhlIGV4aXN0aW5nIGNvZGUuCjwvcD48cD5JZiB5b3Ugd2VyZSB1c2luZyBNZXJnbyBiZWZvcmUgQXByaWwgNnRoLCAyMDE1LCBwbGVhc2UgY2hlY2sgeW91ciBwcm9qZWN0IHdvcmtzIGFzIGludGVuZGVkIGFmdGVyIHVwZGF0aW5nIHlvdXIgbG9jYWwgY29weSB3aXRoIGdvIGdldCAtdSBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS4KPC9wPjxoNCBpZD0iaGRyLUluc3RhbGwiPkluc3RhbGwgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUluc3RhbGwiPsK2PC9hPjwvaDQ+PHA+RG8geW91ciB1c3VhbCBpbnN0YWxsYXRpb24gcHJvY2VkdXJlOgo8L3A+PHByZT5nbyBnZXQgZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvCgovLyB1c2UgaW4geW91ciAuZ28gY29kZQppbXBvcnQgKAogICAgJiMzNDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28mIzM0OwopCjwvcHJlPjxoNCBpZD0iaGRyLVVzYWdlIj5Vc2FnZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItVXNhZ2UiPsK2PC9hPjwvaDQ+PHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIHRoZXkgYXJlIHplcm8gdmFsdWVzIHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLgo8L3A+PHByZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+QWxzbywgeW91IGNhbiBtZXJnZSBvdmVyd3JpdGluZyB2YWx1ZXMgdXNpbmcgdGhlIHRyYW5zZm9ybWVyIFdpdGhPdmVycmlkZS4KPC9wPjxwcmU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+QWRkaXRpb25hbGx5LCB5b3UgY2FuIG1hcCBhIG1hcFtzdHJpbmddaW50ZXJmYWNle30gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gTWVyZ2UoKS4gS2V5cyBhcmUgY2FwaXRhbGl6ZWQgdG8gZmluZCBlYWNoIGNvcnJlc3BvbmRpbmcgZXhwb3J0ZWQgZmllbGQuCjwvcD48cHJlPmlmIGVyciA6PSBtZXJnby5NYXAoJmFtcDtkc3QsIHNyY01hcCk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgbWFwW3N0cmluZ11pbnRlcmZhY2V7fS4gVGhleSB3aWxsIGJlIGp1c3QgYXNzaWduZWQgYXMgdmFsdWVzLgo8L3A+PHA+SGVyZSBpcyBhIG5pY2UgZXhhbXBsZToKPC9wPjxwcmU+cGFja2FnZSBtYWluCgppbXBvcnQgKAoJJiMzNDtmbXQmIzM0OwoJJiMzNDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28mIzM0OwopCgp0eXBlIEZvbyBzdHJ1Y3QgewoJQSBzdHJpbmcKCUIgaW50NjQKfQoKZnVuYyBtYWluKCkgewoJc3JjIDo9IEZvb3sKCQlBOiAmIzM0O29uZSYjMzQ7LAoJCUI6IDIsCgl9CglkZXN0IDo9IEZvb3sKCQlBOiAmIzM0O3R3byYjMzQ7LAoJfQoJbWVyZ28uTWVyZ2UoJmFtcDtkZXN0LCBzcmMpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8ge3R3byAyfQp9CjwvcHJlPjxoNCBpZD0iaGRyLVRyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1UcmFuc2Zvcm1lcnMiPsK2PC9hPjwvaDQ+PHA+VHJhbnNmb3JtZXJzIGFsbG93IHRvIG1lcmdlIHNwZWNpZmljIHR5cGVzIGRpZmZlcmVudGx5IHRoYW4gaW4gdGhlIGRlZmF1bHQgYmVoYXZpb3IuIEluIG90aGVyIHdvcmRzLCBub3cgeW91IGNhbiBjdXN0b21pemUgaG93IHNvbWUgdHlwZXMgYXJlIG1lcmdlZC4gRm9yIGV4YW1wbGUsIHRpbWUuVGltZSBpcyBhIHN0cnVjdDsgaXQgZG9lc24mIzM5O3QgaGF2ZSB6ZXJvIHZhbHVlIGJ1dCBJc1plcm8gY2FuIHJldHVybiB0cnVlIGJlY2F1c2UgaXQgaGFzIGZpZWxkcyB3aXRoIHplcm8gdmFsdWUuIEhvdyBjYW4gd2UgbWVyZ2UgYSBub24temVybyB0aW1lLlRpbWU/CjwvcD48cHJlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKCQkmIzM0O3JlZmxlY3QmIzM0OwoJCSYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9wcmU+PGg0IGlkPSJoZHItQ29udGFjdF9tZSI+Q29udGFjdCBtZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItQ29udGFjdF9tZSI+wrY8L2E+PC9oND48cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIj5odHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvPC9hPgo8L3A+PGg0IGlkPSJoZHItQWJvdXQiPkFib3V0IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1BYm91dCI+wrY8L2E+PC9oND48cD5Xcml0dGVuIGJ5IERhcmlvIENhc3Rhw7HDqTogPGEgaHJlZj0iaHR0cHM6Ly9kYS5yaW8uaG4iPmh0dHBzOi8vZGEucmlvLmhuPC9hPgo8L3A+PGg0IGlkPSJoZHItTGljZW5zZSI+TGljZW5zZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItTGljZW5zZSI+wrY8L2E+PC9oND48cD5CU0QgMy1DbGF1c2UgbGljZW5zZSwgYXMgR28gbGFuZ3VhZ2UuCjwvcD4KPC9zZWN0aW9uPjxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4Ij4KICAgIDxoMyBpZD0icGtnLWluZGV4IiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEhlYWRlciI+SW5kZXggPGEgaHJlZj0iI3BrZy1pbmRleCI+wrY8L2E+PC9oMz4KCjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleExpc3QiPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhWYXJpYWJsZXMiPjxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj5WYXJpYWJsZXM8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNYXAiPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWFwV2l0aE92ZXJ3cml0ZSI+ZnVuYyBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWVyZ2UiPmZ1bmMgTWVyZ2UoZHN0LCBzcmMgaW50ZXJmYWNle30sIG9wdHMgLi4uZnVuYygqQ29uZmlnKSkgZXJyb3I8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiPmZ1bmMgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aEFwcGVuZFNsaWNlIj5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVycmlkZUVtcHR5U2xpY2UiPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiPmZ1bmMgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhUcmFuc2Zvcm1lcnMiPmZ1bmMgV2l0aFRyYW5zZm9ybWVycyh0cmFuc2Zvcm1lcnMgVHJhbnNmb3JtZXJzKSBmdW5jKCpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aFR5cGVDaGVjayI+ZnVuYyBXaXRoVHlwZUNoZWNrKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhvdXREZXJlZmVyZW5jZSI+ZnVuYyBXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnICpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGUiPgogICAgICAgICAgPGEgaHJlZj0iI0NvbmZpZyI+dHlwZSBDb25maWc8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjVHJhbnNmb3JtZXJzIj50eXBlIFRyYW5zZm9ybWVyczwvYT48L2xpPgo8L3VsPgo8L3NlY3Rpb24+PGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy1jb25zdGFudHMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50c0hlYWRlciI+Q29uc3RhbnRzIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIj7CtjwvYT48L2gzPgoKICA8c2VjdGlvbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1jb25zdGFudHMiPjxwIGNsYXNzPSJEb2N1bWVudGF0aW9uLWVtcHR5Ij5UaGlzIHNlY3Rpb24gaXMgZW1wdHkuPC9wPjwvc2VjdGlvbj4KCiAgPGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy12YXJpYWJsZXMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXZhcmlhYmxlc0hlYWRlciI+VmFyaWFibGVzIDxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj7CtjwvYT48L2gzPgoKICA8c2VjdGlvbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi12YXJpYWJsZXMiPgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uTGluayI+PGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ28uZ28jTDE3Ij5WaWV3IFNvdXJjZTwvYT48L3NwYW4+CiAgICAgIDxwcmU+dmFyICgKPHNwYW4gaWQ9IkVyck5pbEFyZ3VtZW50cyIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyck5pbEFyZ3VtZW50cyAgICAgICAgICAgICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtzcmMgYW5kIGRzdCBtdXN0IG5vdCBiZSBuaWwmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJEaWZmZXJlbnRBcmd1bWVudHNUeXBlcyIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckRpZmZlcmVudEFyZ3VtZW50c1R5cGVzICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtzcmMgYW5kIGRzdCBtdXN0IGJlIG9mIHNhbWUgdHlwZSYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyck5vdFN1cHBvcnRlZCIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyck5vdFN1cHBvcnRlZCAgICAgICAgICAgICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtvbmx5IHN0cnVjdHMsIG1hcHMsIGFuZCBzbGljZXMgYXJlIHN1cHBvcnRlZCYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyckV4cGVjdGVkTWFwQXNEZXN0aW5hdGlvbiIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckV4cGVjdGVkTWFwQXNEZXN0aW5hdGlvbiAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtkc3Qgd2FzIGV4cGVjdGVkIHRvIGJlIGEgbWFwJiMzNDspCjwvc3Bhbj48c3BhbiBpZD0iRXJyRXhwZWN0ZWRTdHJ1Y3RBc0Rlc3RpbmF0aW9uIiBkYXRhLWtpbmQ9InZhcmlhYmxlIj4JRXJyRXhwZWN0ZWRTdHJ1Y3RBc0Rlc3RpbmF0aW9uID0gPGEgaHJlZj0iL2Vycm9ycyI+ZXJyb3JzPC9hPi48YSBocmVmPSIvZXJyb3JzI05ldyI+TmV3PC9hPigmIzM0O2RzdCB3YXMgZXhwZWN0ZWQgdG8gYmUgYSBzdHJ1Y3QmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJOb25Qb2ludGVyQXJndW1lbnQiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJOb25Qb2ludGVyQXJndW1lbnQgICAgICAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7ZHN0IG11c3QgYmUgYSBwb2ludGVyJiMzNDspCjwvc3Bhbj4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5FcnJvcnMgcmVwb3J0ZWQgYnkgTWVyZ28gd2hlbiBpdCBmaW5kcyBpbnZhbGlkIGFyZ3VtZW50cy4KPC9wPgo8L3NlY3Rpb24+CgogIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctZnVuY3Rpb25zIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbnNIZWFkZXIiPkZ1bmN0aW9ucyA8YSBocmVmPSIjcGtnLWZ1bmN0aW9ucyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zIj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvI0wxMzIiPk1hcDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjTWFwIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NYXAgc2V0cyBmaWVsZHMmIzM5OyB2YWx1ZXMgaW4gZHN0IGZyb20gc3JjLgpzcmMgY2FuIGJlIGEgbWFwIHdpdGggc3RyaW5nIGtleXMgb3IgYSBzdHJ1Y3QuIGRzdCBtdXN0IGJlIHRoZSBvcHBvc2l0ZToKaWYgc3JjIGlzIGEgbWFwLCBkc3QgbXVzdCBiZSBhIHZhbGlkIHBvaW50ZXIgdG8gc3RydWN0LiBJZiBzcmMgaXMgYSBzdHJ1Y3QsCmRzdCBtdXN0IGJlIG1hcFtzdHJpbmddaW50ZXJmYWNle30uCkl0IHdvbiYjMzk7dCBtZXJnZSB1bmV4cG9ydGVkIChwcml2YXRlKSBmaWVsZHMgYW5kIHdpbGwgZG8gcmVjdXJzaXZlbHkKYW55IGV4cG9ydGVkIGZpZWxkLgpJZiBkc3QgaXMgYSBtYXAsIGtleXMgd2lsbCBiZSBzcmMgZmllbGRzJiMzOTsgbmFtZXMgaW4gbG93ZXIgY2FtZWwgY2FzZS4KTWlzc2luZyBrZXkgaW4gc3JjIHRoYXQgZG9lc24mIzM5O3QgbWF0Y2ggYSBmaWVsZCBpbiBkc3Qgd2lsbCBiZSBza2lwcGVkLiBUaGlzCmRvZXNuJiMzOTt0IGFwcGx5IGlmIGRzdCBpcyBhIG1hcC4KVGhpcyBpcyBzZXBhcmF0ZWQgbWV0aG9kIGZyb20gTWVyZ2UgYmVjYXVzZSBpdCBpcyBjbGVhbmVyIGFuZCBpdCBrZWVwcyBzYW5lCnNlbWFudGljczogbWVyZ2luZyBlcXVhbCB0eXBlcywgbWFwcGluZyBkaWZmZXJlbnQgKHJlc3RyaWN0ZWQpIHR5cGVzLgo8L3A+CgogIAoKICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwV2l0aE92ZXJ3cml0ZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21hcC5nbyNMMTM5Ij5NYXBXaXRoT3ZlcndyaXRlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNNYXBXaXRoT3ZlcndyaXRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWFwV2l0aE92ZXJ3cml0ZShkc3QsIHNyYyBpbnRlcmZhY2V7fSwgb3B0cyAuLi5mdW5jKCo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KSkgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TWFwV2l0aE92ZXJ3cml0ZSB3aWxsIGRvIHRoZSBzYW1lIGFzIE1hcCBleGNlcHQgdGhhdCBub24tZW1wdHkgZHN0IGF0dHJpYnV0ZXMgd2lsbCBiZSBvdmVycmlkZGVuIGJ5Cm5vbi1lbXB0eSBzcmMgYXR0cmlidXRlIHZhbHVlcy4KRGVwcmVjYXRlZDogVXNlIE1hcCjigKYpIHdpdGggV2l0aE92ZXJyaWRlCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzMTgiPk1lcmdlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNNZXJnZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NZXJnZSB3aWxsIGZpbGwgYW55IGVtcHR5IGZvciB2YWx1ZSB0eXBlIGF0dHJpYnV0ZXMgb24gdGhlIGRzdCBzdHJ1Y3QgdXNpbmcgY29ycmVzcG9uZGluZwpzcmMgYXR0cmlidXRlcyBpZiB0aGV5IHRoZW1zZWx2ZXMgYXJlIG5vdCBlbXB0eS4gZHN0IGFuZCBzcmMgbXVzdCBiZSB2YWxpZCBzYW1lLXR5cGUgc3RydWN0cwphbmQgZHN0IG11c3QgYmUgYSBwb2ludGVyIHRvIHN0cnVjdC4KSXQgd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcyBhbmQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgZmllbGQuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZVdpdGhPdmVyd3JpdGUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzI1Ij5NZXJnZVdpdGhPdmVyd3JpdGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01lcmdlV2l0aE92ZXJ3cml0ZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlV2l0aE92ZXJ3cml0ZShkc3QsIHNyYyBpbnRlcmZhY2V7fSwgb3B0cyAuLi5mdW5jKCo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KSkgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TWVyZ2VXaXRoT3ZlcndyaXRlIHdpbGwgZG8gdGhlIHNhbWUgYXMgTWVyZ2UgZXhjZXB0IHRoYXQgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpbGwgYmUgb3ZlcnJpZGRlbiBieQpub24tZW1wdHkgc3JjIGF0dHJpYnV0ZSB2YWx1ZXMuCkRlcHJlY2F0ZWQ6IHVzZSBNZXJnZSjigKYpIHdpdGggV2l0aE92ZXJyaWRlCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoQXBwZW5kU2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzU5Ij5XaXRoQXBwZW5kU2xpY2U8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhBcHBlbmRTbGljZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uTGFiZWwiPmFkZGVkIGluPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25WZXJzaW9uIj52MC4zLjQ8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoQXBwZW5kU2xpY2Ugd2lsbCBtYWtlIG1lcmdlIGFwcGVuZCBzbGljZXMgaW5zdGVhZCBvZiBvdmVyd3JpdGluZyBpdC4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzMzciPldpdGhPdmVycmlkZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aE92ZXJyaWRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhPdmVycmlkZSB3aWxsIG1ha2UgbWVyZ2Ugb3ZlcnJpZGUgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpdGggbm9uLWVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQ4Ij5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIHdpbGwgbWFrZSBtZXJnZSBvdmVycmlkZSBlbXB0eSBkc3Qgc2xpY2Ugd2l0aCBlbXB0eSBzcmMgc2xpY2UuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQyIj5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uTGFiZWwiPmFkZGVkIGluPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25WZXJzaW9uIj52MC4zLjk8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUgd2lsbCBtYWtlIG1lcmdlIG92ZXJyaWRlIG5vbiBlbXB0eSBkc3QgYXR0cmlidXRlcyB3aXRoIGVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhTbGljZURlZXBDb3B5IiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDM2OSI+V2l0aFNsaWNlRGVlcENvcHk8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTA8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhTbGljZURlZXBDb3B5IHdpbGwgbWVyZ2Ugc2xpY2UgZWxlbWVudCBvbmUgYnkgb25lIHdpdGggT3ZlcndyaXRlIGZsYWcuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDMzMCI+V2l0aFRyYW5zZm9ybWVyczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzIDxhIGhyZWY9IiNUcmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvYT4pIGZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHJhbnNmb3JtZXJzIGFkZHMgdHJhbnNmb3JtZXJzIHRvIG1lcmdlLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIG1lcmdpbmcgb2Ygc29tZSB0eXBlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhUeXBlQ2hlY2siIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzY0Ij5XaXRoVHlwZUNoZWNrPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoVHlwZUNoZWNrIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aFR5cGVDaGVjayhjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHlwZUNoZWNrIHdpbGwgbWFrZSBtZXJnZSBjaGVjayB0eXBlcyB3aGlsZSBvdmVyd3JpdGluZyBpdCAobXVzdCBiZSB1c2VkIHdpdGggV2l0aE92ZXJyaWRlKS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhvdXREZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzNTQiPldpdGhvdXREZXJlZmVyZW5jZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aG91dERlcmVmZXJlbmNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTU8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhvdXREZXJlZmVyZW5jZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRob3V0RGVyZWZlcmVuY2UgcHJldmVudHMgZGVyZWZlcmVuY2luZyBwb2ludGVycyB3aGVuIGV2YWx1YXRpbmcgd2hldGhlciB0aGV5IGFyZSBlbXB0eQooaS5lLiBhIG5vbi1uaWwgcG9pbnRlciBpcyBuZXZlciBjb25zaWRlcmVkIGVtcHR5KS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLXR5cGVzIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlc0hlYWRlciI+VHlwZXMgPGEgaHJlZj0iI3BrZy10eXBlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZXMiPjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNvbmZpZyIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMNDAiPkNvbmZpZzwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ29uZmlnIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgQ29uZmlnIHN0cnVjdCB7CjxzcGFuIGlkPSJDb25maWcuVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZpZWxkIj4JVHJhbnNmb3JtZXJzICAgICAgICAgPGEgaHJlZj0iI1RyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5PdmVyd3JpdGUiIGRhdGEta2luZD0iZmllbGQiPglPdmVyd3JpdGUgICAgICAgICAgICA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5TaG91bGROb3REZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmaWVsZCI+CVNob3VsZE5vdERlcmVmZXJlbmNlIDxhIGhyZWY9Ii9idWlsdGluI2Jvb2wiPmJvb2w8L2E+Cjwvc3Bhbj48c3BhbiBpZD0iQ29uZmlnLkFwcGVuZFNsaWNlIiBkYXRhLWtpbmQ9ImZpZWxkIj4JQXBwZW5kU2xpY2UgICAgICAgICAgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPjxzcGFuIGlkPSJDb25maWcuVHlwZUNoZWNrIiBkYXRhLWtpbmQ9ImZpZWxkIj4JVHlwZUNoZWNrICAgICAgICAgICAgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gY29udGFpbnMgZmlsdGVyZWQgb3IgdW5leHBvcnRlZCBmaWVsZHM8L3NwYW4+Cn08L3ByZT4KICAgIDwvZGl2PgogIAoKICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJUcmFuc2Zvcm1lcnMiIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDUyIj5UcmFuc2Zvcm1lcnM8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1RyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT50eXBlIFRyYW5zZm9ybWVycyBpbnRlcmZhY2Ugewo8c3BhbiBpZD0iVHJhbnNmb3JtZXJzLlRyYW5zZm9ybWVyIiBkYXRhLWtpbmQ9Im1ldGhvZCI+CVRyYW5zZm9ybWVyKDxhIGhyZWY9Ii9yZWZsZWN0Ij5yZWZsZWN0PC9hPi48YSBocmVmPSIvcmVmbGVjdCNUeXBlIj5UeXBlPC9hPikgZnVuYyhkc3QsIHNyYyA8YSBocmVmPSIvcmVmbGVjdCI+cmVmbGVjdDwvYT4uPGEgaHJlZj0iL3JlZmxlY3QjVmFsdWUiPlZhbHVlPC9hPikgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPgo8L3NwYW4+fTwvcHJlPgogICAgPC9kaXY+CiAgCgogIAoKICAgIDwvZGl2Pjwvc2VjdGlvbj48L2Rpdj4gCgoKCgoKCiAgICAgIAogICAgPC9kaXY+CiAgPC9kaXY+CgogICAgICAgIAogICAgICAKICAgICAgCiAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdEZpbGVzIGpzLXVuaXRGaWxlcyI+CiAgICA8aDIgY2xhc3M9IlVuaXRGaWxlcy10aXRsZSIgaWQ9InNlY3Rpb24tc291cmNlZmlsZXMiPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9pbnNlcnRfZHJpdmVfZmlsZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgIFNvdXJjZSBGaWxlcwogICAgICA8YSBjbGFzcz0iVW5pdEZpbGVzLWlkTGluayIgaHJlZj0iI3NlY3Rpb24tc291cmNlZmlsZXMiPsK2PC9hPgogICAgPC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRGaWxlcy10aXRsZUxpbmsiPgogICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby90cmVlL3YwLjMuMTYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5WaWV3IGFsbDwvYT4KICAgIDwvZGl2PgogICAgPGRpdj4KICAgICAgPHVsIGNsYXNzPSJVbml0RmlsZXMtZmlsZUxpc3QiPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2RvYy5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJkb2MuZ28iPmRvYy5nbzwvYT4KICAgICAgICAgIDwvbGk+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9Im1hcC5nbyI+bWFwLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJtZXJnZS5nbyI+bWVyZ2UuZ288L2E+CiAgICAgICAgICA8L2xpPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdvLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9Im1lcmdvLmdvIj5tZXJnby5nbzwvYT4KICAgICAgICAgIDwvbGk+PC91bD4KICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgPC9kaXY+CiAgPC9kaXY+CjwvYXJ0aWNsZT4KICAgIDxmb290ZXIgY2xhc3M9ImdvLU1haW4tZm9vdGVyIj48L2Zvb3Rlcj4KICA8L21haW4+CgogICAgCiAgPGZvb3RlciBjbGFzcz0iZ28tRm9vdGVyIj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtzIj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFdoeSBHbwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVXNlIENhc2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyNjYXNlLXN0dWRpZXMiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDYXNlIFN0dWRpZXMKICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Gb290ZXItbGlua0NvbHVtbiI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9sZWFybi5nby5kZXYvIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsgZ28tRm9vdGVyLWxpbmstLXByaW1hcnkiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR2V0IFN0YXJ0ZWQKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wbGF5LmdvbGFuZy5vcmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBQbGF5Z3JvdW5kCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdG91ci5nb2xhbmcub3JnIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVG91cgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvZ28/dGFiPU5ld2VzdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFN0YWNrIE92ZXJmbG93CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBIZWxwCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldiIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9zdGQiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdGFuZGFyZCBMaWJyYXJ5CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9nb2xhbmcub3JnL3giIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdWItcmVwb3NpdG9yaWVzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldi9hYm91dCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEFib3V0IEdvIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3Byb2plY3QiIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBBYm91dAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kbC8iIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+RG93bmxvYWQ8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5CbG9nPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vaXNzdWVzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgSXNzdWUgVHJhY2tlcgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZGV2ZWwvcmVsZWFzZS5odG1sIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2Jsb2cuZ29sYW5nLm9yZy9nby1icmFuZCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEJyYW5kIEd1aWRlbGluZXMKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29uZHVjdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIENvZGUgb2YgQ29uZHVjdAogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50d2l0dGVyLmNvbS9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDb25uZWN0CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFR3aXR0ZXIKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5HaXRIdWI8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTbGFjawogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3JlZGRpdC5jb20vci9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICByL2dvbGFuZwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIE1lZXR1cAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvbGFuZ3dlZWtseS5jb20vIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR29sYW5nIFdlZWtseQogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1ib3R0b20iPgogICAgICA8aW1nIGNsYXNzPSJnby1Gb290ZXItZ29waGVyIiAgd2lkdGg9IjE0MzEiIGhlaWdodD0iOTAxIgogICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9nb3BoZXIvcGlsb3QtYnVzdC0xNDMxeDkwMS5zdmciIGFsdD0iR29waGVyIGluIGZsaWdodCBnb2dnbGVzIj4KICAgICAgPHVsIGNsYXNzPSJnby1Gb290ZXItbGlzdFJvdyI+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29weXJpZ2h0IiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5Db3B5cmlnaHQ8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90b3MiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPlRlcm1zIG9mIFNlcnZpY2U8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20vaW50bC9lbi9wb2xpY2llcy9wcml2YWN5LyIgZGF0YS1ndG1jPSJmb290ZXIgbGluayIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICAgIFByaXZhY3kgUG9saWN5CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zL3BrZ3NpdGUtZmVlZGJhY2siIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIgogICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgICBSZXBvcnQgYW4gSXNzdWUKICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iZ28tRm9vdGVyLWxpc3RJdGVtIj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLXRvZ2dsZVRoZW1lIGpzLXRvZ2dsZVRoZW1lIiBhcmlhLWxhYmVsPSJUb2dnbGUgdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImF1dG8iIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzZfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJTeXN0ZW0gdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImRhcmsiIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzJfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJEYXJrIHRoZW1lIj4KICAgICAgICAgICAgPGltZyBkYXRhLXZhbHVlPSJsaWdodCIgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xpZ2h0X21vZGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJMaWdodCB0aGVtZSI+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLWtleWJvYXJkIGpzLW9wZW5TaG9ydGN1dHMiIGFyaWEtbGFiZWw9Ik9wZW4gc2hvcmN1dHMgbW9kYWwiPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9rZXlib2FyZF9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgICA8YSBjbGFzcz0iZ28tRm9vdGVyLWdvb2dsZUxvZ28iIGhyZWY9Imh0dHBzOi8vZ29vZ2xlLmNvbSIgdGFyZ2V0PSJfYmxhbmsicmVsPSJub29wZW5lciIKICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgIDxpbWcgY2xhc3M9ImdvLUZvb3Rlci1nb29nbGVMb2dvSW1nIiBoZWlnaHQ9IjI0IiB3aWR0aD0iNzIiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nb29nbGUtd2hpdGUuc3ZnIiBhbHQ9Ikdvb2dsZSBsb2dvIj4KICAgICAgPC9hPgogICAgPC9kaXY+CiAgPC9mb290ZXI+CgogICAgCiAgPGRpYWxvZyBpZD0ianVtcC10by1tb2RhbCIgY2xhc3M9Ikp1bXBEaWFsb2cgZ28tTW9kYWwgZ28tTW9kYWwtLW1kIGpzLW1vZGFsIj4KICAgIDxmb3JtIG1ldGhvZD0iZGlhbG9nIiBkYXRhLWdtdGM9Imp1bXAgdG8gZm9ybSIgYXJpYS1sYWJlbD0iSnVtcCB0byBJZGVudGlmaWVyIj4KICAgICAgPGRpdiBjbGFzcz0iRGlhbG9nLXRpdGxlIGdvLU1vZGFsLWhlYWRlciI+CiAgICAgICAgPGgyPkp1bXAgdG88L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctZmlsdGVyIj4KICAgICAgICA8aW5wdXQgY2xhc3M9Ikp1bXBEaWFsb2ctaW5wdXQgZ28tSW5wdXQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB0eXBlPSJ0ZXh0Ij4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctYm9keSBnby1Nb2RhbC1ib2R5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJKdW1wRGlhbG9nLWxpc3QiPjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tTW9kYWwtYWN0aW9ucyI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ28tQnV0dG9uIiBkYXRhLXRlc3QtaWQ9ImNsb3NlLWRpYWxvZyI+Q2xvc2U8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CiAgPC9kaWFsb2c+CgogIDxkaWFsb2cgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZyBnby1Nb2RhbCBnby1Nb2RhbC0tc20ganMtbW9kYWwiPgogICAgPGZvcm0gbWV0aG9kPSJkaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJnby1Nb2RhbC1oZWFkZXIiPgogICAgICAgIDxoMj5LZXlib2FyZCBzaG9ydGN1dHM8L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWJvZHkiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4/PC9zdHJvbmc+PC90ZD48dGQ+IDogVGhpcyBtZW51PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4vPC9zdHJvbmc+PC90ZD48dGQ+IDogU2VhcmNoIHNpdGU8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJTaG9ydGN1dHNEaWFsb2cta2V5Ij4KICAgICAgICAgICAgICA8c3Ryb25nPmY8L3N0cm9uZz4gb3IgPHN0cm9uZz5GPC9zdHJvbmc+PC90ZD48dGQ+IDogSnVtcCB0bzwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZy1rZXkiPjxzdHJvbmc+eTwvc3Ryb25nPiBvciA8c3Ryb25nPlk8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgIDx0ZD4gOiBDYW5vbmljYWwgVVJMPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWFjdGlvbnMiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiIgZGF0YS10ZXN0LWlkPSJjbG9zZS1kaWFsb2ciPkNsb3NlPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogIDwvZGlhbG9nPgoKICAgIAogICAgICA8c2VjdGlvbiBjbGFzcz0iQ29va2llLW5vdGljZSBqcy1jb29raWVOb3RpY2UiPgogICAgICAgIDxkaXY+Z28uZGV2IHVzZXMgY29va2llcyBmcm9tIEdvb2dsZSB0byBkZWxpdmVyIGFuZCBlbmhhbmNlIHRoZSBxdWFsaXR5IG9mIGl0cyBzZXJ2aWNlcyBhbmQgdG8KICAgICAgICBhbmFseXplIHRyYWZmaWMuIDxhIHRhcmdldD1fYmxhbmsgaHJlZj0iaHR0cHM6Ly9wb2xpY2llcy5nb29nbGUuY29tL3RlY2hub2xvZ2llcy9jb29raWVzIj5MZWFybiBtb3JlLjwvYT48L2Rpdj4KICAgICAgICA8ZGl2PjxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiI+T2theTwvYnV0dG9uPjwvZGl2PgogICAgICA8L3NlY3Rpb24+CiAgICAKICAgIAogICAgICA8c2NyaXB0PgogICAgICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBpZiB0aGUgcXVlcnlTZWxlY3RvciBjYW7igJl0IGZpbmQgdGhlIGVsZW1lbnQKICAgICAgICBjb25zdCBndG1JZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1ndG1JRCcpLmRhdGFzZXQuZ3RtaWQ7CiAgICAgICAgaWYgKCFndG1JZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb29nbGUgVGFnIE1hbmFnZXIgSUQgbm90IGZvdW5kJyk7CiAgICAgICAgfQogICAgICAgIGxvYWRTY3JpcHQoYGh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0ke2d0bUlkfWApOwogICAgICA8L3NjcmlwdD4KICAgICAgPG5vc2NyaXB0PgogICAgICAgIDxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1XOE1WUVhHIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+CiAgICAgICAgPC9pZnJhbWU+CiAgICAgIDwvbm9zY3JpcHQ+CiAgICAKICAgIAogIAogIDxkaXYgY2xhc3M9ImpzLWNhbm9uaWNhbFVSTFBhdGgiIGRhdGEtY2Fub25pY2FsLXVybC1wYXRoPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvQHYwLjMuMTYiIGhpZGRlbj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJqcy1wbGF5Z3JvdW5kVmFycyIgZGF0YS1tb2R1bGVwYXRoPSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIGRhdGEtdmVyc2lvbj0idjAuMy4xNiIgaGlkZGVuPjwvZGl2PgogIDxzY3JpcHQ+CiAgICBsb2FkU2NyaXB0KCcvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLmpzJykKICA8L3NjcmlwdD4KCiAgPHNjcmlwdD4KICAgIGxvYWRTY3JpcHQoJy9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0LmpzJykKICA8L3NjcmlwdD4KCiAgPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.7.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '991160723032252386'
      X-Datadog-Parent-Id:
      - '2379468875355343049'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:33:44 GMT
      Expires:
      - Wed, 19 Jul 2023 23:33:44 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '7144'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.7","Time":"2019-01-23T23:28:27Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4323241279232641037'
      X-Datadog-Parent-Id:
      - '4283257903959452180'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:48 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.5.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3747226198576837056'
      X-Datadog-Parent-Id:
      - '2475231739547300311'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:40:56 GMT
      Expires:
      - Thu, 20 Jul 2023 00:40:56 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '3112'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.5","Time":"2018-06-08T14:01:56Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '792730047372479665'
      X-Datadog-Parent-Id:
      - '2190420626234035671'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:48 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:48 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.13.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '192609844750683553'
      X-Datadog-Parent-Id:
      - '2190690017735837934'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '51'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:22:40 GMT
      Expires:
      - Thu, 20 Jul 2023 00:22:40 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '4209'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.13","Time":"2022-05-25T20:08:08Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4463847272296437224'
      X-Datadog-Parent-Id:
      - '1725235219749023002'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:49 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.12.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '844909980815541692'
      X-Datadog-Parent-Id:
      - '967516987024057942'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '51'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:41:28 GMT
      Expires:
      - Thu, 20 Jul 2023 00:41:28 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '3081'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.12","Time":"2021-03-03T22:10:52Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4486136916060523908'
      X-Datadog-Parent-Id:
      - '4370788301324628635'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:49 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGRhdGEtbGF5b3V0PSJyZXNwb25zaXZlIiBkYXRhLWxvY2FsPSIiPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB3aW5kb3cuX19lcnI9ZnVuY3Rpb24gZihlKXtmLnA9Zi5wfHxbXTtmLnAucHVzaChlKX0pOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0PgogICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5jb29raWUubWF0Y2goL3ByZWZlcnMtY29sb3Itc2NoZW1lPShsaWdodHxkYXJrfGF1dG8pLyk/LlsxXQogICAgICAgIGlmICh0aGVtZSkgewogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLnNldEF0dHJpYnV0ZSgnZGF0YS10aGVtZScsIHRoZW1lKTsKICAgICAgICB9CiAgICAgIH0oKSkKICAgIDwvc2NyaXB0PgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDxtZXRhIG5hbWU9IkRlc2NyaXB0aW9uIiBjb250ZW50PSJBIGhlbHBlciB0byBtZXJnZSBzdHJ1Y3RzIGFuZCBtYXBzIGluIEdvbGFuZy4iPgogICAgCiAgICA8bWV0YSBjbGFzcz0ianMtZ3RtSUQiIGRhdGEtZ3RtaWQ9IkdUTS1XOE1WUVhHIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9zaGFyZWQvaWNvbi9mYXZpY29uLmljbyI+CiAgICAKICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3BrZy5nby5kZXYvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIj4KICAKCiAgICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL2Zyb250ZW5kLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIAogIDx0aXRsZT5tZXJnbyBwYWNrYWdlIC0gZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIC0gR28gUGFja2FnZXM8L3RpdGxlPgoKICAgIAogIDxsaW5rIGhyZWY9Ii9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0Lm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAKICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KCgogIDwvaGVhZD4KICA8Ym9keT4KICAgIAogICAgPHNjcmlwdD4KICAgICAgZnVuY3Rpb24gbG9hZFNjcmlwdChzcmMsIG1vZCA9IHRydWUpIHsKICAgICAgICBsZXQgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgIHMuc3JjID0gc3JjOwogICAgICAgIGlmIChtb2QpIHsKICAgICAgICAgIHMudHlwZSA9ICdtb2R1bGUnOwogICAgICAgICAgcy5hc3luYyA9IHRydWU7CiAgICAgICAgICBzLmRlZmVyID0gdHJ1ZQogICAgICAgIH0KICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpOwogICAgICB9CiAgICAgIGxvYWRTY3JpcHQoIi90aGlyZF9wYXJ0eS9kaWFsb2ctcG9seWZpbGwvZGlhbG9nLXBvbHlmaWxsLmpzIiwgZmFsc2UpCiAgICAgIGxvYWRTY3JpcHQoIi9zdGF0aWMvZnJvbnRlbmQvZnJvbnRlbmQuanMiKTsKICAgIDwvc2NyaXB0PgogICAgCiAgPGhlYWRlciBjbGFzcz0iZ28tSGVhZGVyIGdvLUhlYWRlci0tZnVsbCBqcy1zaXRlSGVhZGVyIj4KICAgIDxkaXYgY2xhc3M9ImdvLUhlYWRlci1pbm5lciBnby1IZWFkZXItaW5uZXItLWRhcmsiPgogICAgICA8bmF2IGNsYXNzPSJnby1IZWFkZXItbmF2Ij4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi8iIGNsYXNzPSJqcy1oZWFkZXJMb2dvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIgogICAgICAgICAgICBkYXRhLXRlc3QtaWQ9ImdvLWhlYWRlci1sb2dvLWxpbmsiPgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSGVhZGVyLWxvZ28iIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nby13aGl0ZS5zdmciIGFsdD0iR28iPgogICAgICAgIDwvYT4KICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItcmlnaHRDb250ZW50Ij4KICAgICAgICAgIAo8ZGl2IGNsYXNzPSJnby1TZWFyY2hGb3JtIGpzLXNlYXJjaEZvcm0iPgogIDxmb3JtCiAgICBjbGFzcz0iZ28tSW5wdXRHcm91cCBnby1TaG9ydGN1dEtleSBnby1TZWFyY2hGb3JtLWZvcm0iCiAgICBhY3Rpb249Ii9zZWFyY2giCiAgICBkYXRhLXNob3J0Y3V0PSIvIgogICAgZGF0YS1zaG9ydGN1dC1hbHQ9InNlYXJjaCIKICAgIGRhdGEtZ3RtYz0ic2VhcmNoIGZvcm0iCiAgICBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIKICAgIHJvbGU9InNlYXJjaCIKICA+CiAgICA8aW5wdXQgbmFtZT0icSIgY2xhc3M9ImdvLUlucHV0IGpzLXNlYXJjaEZvY3VzIiBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIgdHlwZT0ic2VhcmNoIgogICAgICAgIGF1dG9jYXBpdGFsaXplPSJvZmYiIGF1dG9jb21wbGV0ZT0ib2ZmIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIKICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIHBhY2thZ2VzIG9yIHN5bWJvbHMiCiAgICAgICAgdmFsdWU9IiIgLz4KICAgIDxpbnB1dCBuYW1lPSJtIiB2YWx1ZT0iIiBoaWRkZW4+CiAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbnZlcnRlZCIgYXJpYS1sYWJlbD0iU3VibWl0IHNlYXJjaCI+CiAgICAgIDxpbWcKICAgICAgICBjbGFzcz0iZ28tSWNvbiIKICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgIHdpZHRoPSIyNCIKICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vc2VhcmNoX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgYWx0PSIiCiAgICAgIC8+CiAgICA8L2J1dHRvbj4KICA8L2Zvcm0+CiAgPGJ1dHRvbiBjbGFzcz0iZ28tU2VhcmNoRm9ybS1leHBhbmRTZWFyY2gganMtZXhwYW5kU2VhcmNoIiBkYXRhLWd0bWM9Im5hdiBidXR0b24iCiAgICAgIGFyaWEtbGFiZWw9Ik9wZW4gc2VhcmNoIiBkYXRhLXRlc3QtaWQ9ImV4cGFuZC1zZWFyY2giPgogICAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9zZWFyY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgoKICA8L2J1dHRvbj4KPC9kaXY+CgogICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItbWVudSI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYXJyb3dfZHJvcF9kb3duX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0ic3VibWVudSBkcm9wZG93biBpY29uIj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItc3VibWVudSBnby1IZWFkZXItc3VibWVudS0td2h5IGpzLWRlc2t0b3Atc3VibWVudS1ob3ZlciIgYXJpYS1sYWJlbD0ic3VibWVudSI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI2Nhc2Utc3R1ZGllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5DYXNlIFN0dWRpZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHA+Q29tbW9uIHByb2JsZW1zIGNvbXBhbmllcyBzb2x2ZSB3aXRoIEdvPC9wPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyN1c2UtY2FzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+VXNlIENhc2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxwPlN0b3JpZXMgYWJvdXQgaG93IGFuZCB3aHkgY29tcGFuaWVzIHVzZSBHbzwvcD4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlNlY3VyaXR5IFBvbGljeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8cD5Ib3cgR28gY2FuIGhlbHAga2VlcCB5b3Ugc2VjdXJlIGJ5IGRlZmF1bHQ8L3A+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyIgZGF0YS1ndG1jPSJuYXYgbGluayI+TGVhcm48L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Fycm93X2Ryb3BfZG93bl9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9InN1Ym1lbnUgZHJvcGRvd24gaWNvbiI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnUgZ28tSGVhZGVyLXN1Ym1lbnUtLWRvY3MganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZWZmZWN0aXZlX2dvIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVmZmVjdGl2ZSBHbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5UaXBzIGZvciB3cml0aW5nIGNsZWFyLCBwZXJmb3JtYW50LCBhbmQgaWRpb21hdGljIEdvIGNvZGU8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R28gVXNlciBNYW51YWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+QSBjb21wbGV0ZSBpbnRyb2R1Y3Rpb24gdG8gYnVpbGRpbmcgc29mdHdhcmUgd2l0aCBHbzwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L3N0ZCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdGFuZGFyZCBsaWJyYXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPlJlZmVyZW5jZSBkb2N1bWVudGF0aW9uIGZvciBHbydzIHN0YW5kYXJkIGxpYnJhcnk8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9kZXZlbC9yZWxlYXNlIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlbGVhc2UgTm90ZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TGVhcm4gd2hhdCdzIG5ldyBpbiBlYWNoIEdvIHJlbGVhc2U8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIGdvLUhlYWRlci1tZW51SXRlbS0tYWN0aXZlIj4KICAgICAgICAgICAgICA8YSBocmVmPSIvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj5QYWNrYWdlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJqcy1kZXNrdG9wLW1lbnUtaG92ZXIiIGhyZWY9IiMiIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPgogICAgICAgICAgICAgICAgQ29tbXVuaXR5CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hcnJvd19kcm9wX2Rvd25fZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJzdWJtZW51IGRyb3Bkb3duIGljb24iPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51IGdvLUhlYWRlci1zdWJtZW51LS1jb21tdW5pdHkganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90YWxrcy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjb3JkZWQgVGFsa3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VmlkZW9zIGZyb20gcHJpb3IgZXZlbnRzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NZWV0dXBzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TWVldCBvdGhlciBsb2NhbCBHbyBkZXZlbG9wZXJzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL3dpa2kvQ29uZmVyZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29uZmVyZW5jZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5MZWFybiBhbmQgbmV0d29yayB3aXRoIEdvIGRldmVsb3BlcnMgZnJvbSBhcm91bmQgdGhlIHdvcmxkPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9ibG9nIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvIGJsb2c8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VGhlIEdvIHByb2plY3QncyBvZmZpY2lhbCBibG9nLjwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HbyBwcm9qZWN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPkdldCBoZWxwIGFuZCBzdGF5IGluZm9ybWVkIGZyb20gR288L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIEdldCBjb25uZWN0ZWQKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9nL2dvbGFuZy1udXRzIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ29vZ2xlLWdyb3Vwcy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ2l0aHViLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvdHdpdHRlci5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL3d3dy5yZWRkaXQuY29tL3IvZ29sYW5nLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3JlZGRpdC5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2ludml0ZS5zbGFjay5nb2xhbmdicmlkZ2Uub3JnLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3NsYWNrLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vY29sbGVjdGl2ZXMvZ28iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zdGFjay1vdmVyZmxvdy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1IZWFkZXItbmF2T3BlbiBqcy1oZWFkZXJNZW51QnV0dG9uIGdvLUhlYWRlci1uYXZPcGVuLS13aGl0ZSIgZGF0YS1ndG1jPSJuYXYgYnV0dG9uIiBhcmlhLWxhYmVsPSJPcGVuIG5hdmlnYXRpb24iPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgogICAgPC9kaXY+CiAgPC9oZWFkZXI+CiAgPGFzaWRlIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyIGpzLWhlYWRlciI+CiAgICA8bmF2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItaGVhZGVyIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi8iPgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1sb2dvIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vZ28tYmx1ZS5zdmciIGFsdD0iR28uIj4KICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0ganMtbW9iaWxlLXN1Ym5hdi10cmlnZ2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItaGFzU3VibmF2Ij4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgPHNwYW4+V2h5IEdvPC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfYmVmb3JlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0Ij4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjY2FzZS1zdHVkaWVzIj4KICAgICAgICAgICAgICAgICAgICAgIENhc2UgU3R1ZGllcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIj4KICAgICAgICAgICAgICAgICAgICAgIFVzZSBDYXNlcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgIFNlY3VyaXR5IFBvbGljeQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyI+TGVhcm48L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGpzLW1vYmlsZS1zdWJuYXYtdHJpZ2dlciBnby1OYXZpZ2F0aW9uRHJhd2VyLWhhc1N1Ym5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxzcGFuPkRvY3M8L3NwYW4+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX25leHRfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBnby1OYXZpZ2F0aW9uRHJhd2VyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX2JlZm9yZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2VmZmVjdGl2ZV9nbyI+CiAgICAgICAgICAgICAgICAgICAgICBFZmZlY3RpdmUgR28KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jLyI+CiAgICAgICAgICAgICAgICAgICAgICBHbyBVc2VyIE1hbnVhbAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3BrZy5nby5kZXYvc3RkIj4KICAgICAgICAgICAgICAgICAgICAgIFN0YW5kYXJkIGxpYnJhcnkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2RldmVsL3JlbGVhc2UiPgogICAgICAgICAgICAgICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSBnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtLS1hY3RpdmUiPgogICAgICAgICAgICA8YSBocmVmPSIvIj5QYWNrYWdlczwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0ganMtbW9iaWxlLXN1Ym5hdi10cmlnZ2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItaGFzU3VibmF2Ij4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgPHNwYW4+Q29tbXVuaXR5PC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBnby1OYXZpZ2F0aW9uRHJhd2VyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9iZWZvcmVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICBDb21tdW5pdHkKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvdGFsa3MvIj4KICAgICAgICAgICAgICAgICAgICAgIFJlY29yZGVkIFRhbGtzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm1lZXR1cC5jb20vcHJvL2dvIj4KICAgICAgICAgICAgICAgICAgICAgIE1lZXR1cHMKICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vd2lraS9Db25mZXJlbmNlcyI+CiAgICAgICAgICAgICAgICAgICAgICBDb25mZXJlbmNlcwogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyI+CiAgICAgICAgICAgICAgICAgICAgICBHbyBibG9nCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiPgogICAgICAgICAgICAgICAgICAgICAgR28gcHJvamVjdAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PkdldCBjb25uZWN0ZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZy9nb2xhbmctbnV0cyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL2dvb2dsZS1ncm91cHMuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ2l0aHViLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9nb2xhbmciPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC90d2l0dGVyLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2dvbGFuZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9yZWRkaXQuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2ludml0ZS5zbGFjay5nb2xhbmdicmlkZ2Uub3JnLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3NsYWNrLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9jb2xsZWN0aXZlcy9nbyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3N0YWNrLW92ZXJmbG93LnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgIDwvdWw+CiAgICA8L25hdj4KICA8L2FzaWRlPgogIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItc2NyaW0ganMtc2NyaW0iIHJvbGU9InByZXNlbnRhdGlvbiI+PC9kaXY+CgogICAgCiAgPG1haW4gY2xhc3M9ImdvLU1haW4iPgogICAgPGRpdiBjbGFzcz0iZ28tTWFpbi1iYW5uZXIiIHJvbGU9ImFsZXJ0Ij48L2Rpdj4KICAgIDxoZWFkZXIgY2xhc3M9ImdvLU1haW4taGVhZGVyIGpzLW1haW5IZWFkZXIiPgogIAogIAogIDxuYXYgY2xhc3M9ImdvLU1haW4taGVhZGVyQnJlYWRjcnVtYiBnby1CcmVhZGNydW1iIiBhcmlhLWxhYmVsPSJCcmVhZGNydW1iIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYiI+CiAgICA8b2w+CiAgICAgIAogICAgICAgIAogICAgICAgICAgPGxpIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1icmVhZGNydW1iSXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGRhdGEtZ3RtYz0iYnJlYWRjcnVtYiBsaW5rIj5EaXNjb3ZlciBQYWNrYWdlczwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnb0B2MC4zLjE2IiBkYXRhLWd0bWM9ImJyZWFkY3J1bWIgbGluayIgYXJpYS1jdXJyZW50PSJsb2NhdGlvbiIKICAgICAgICAgICAgICBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYkN1cnJlbnQiPgogICAgICAgICAgICBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28KICAgICAgICAgIDwvYT4KICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWlubGluZSBnby1DbGlwYm9hcmQganMtY2xpcGJvYXJkIgogICAgICAgICAgICAgIHRpdGxlPSJDb3B5IHBhdGggdG8gY2xpcGJvYXJkLiYjMTA7JiMxMDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ29weSBQYXRoIHRvIENsaXBib2FyZCIKICAgICAgICAgICAgICBkYXRhLXRvLWNvcHk9ImdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgICAgICBkYXRhLWd0bWM9ImJyZWFkY3J1bWJzIGJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb250ZW50X2NvcHlfZ21fZ3JleV8yNGRwLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAKICAgICAgICAKICAgICAgPC9saT4KICAgIDwvb2w+CiAgPC9uYXY+CgogIDxkaXYgY2xhc3M9ImdvLU1haW4taGVhZGVyQ29udGVudCI+CiAgICAKICA8ZGl2IGNsYXNzPSJnby1NYWluLWhlYWRlclRpdGxlIGpzLXN0aWNreUhlYWRlciI+CiAgICA8YSBjbGFzcz0iZ28tTWFpbi1oZWFkZXJMb2dvIiBocmVmPSJodHRwczovL2dvLmRldi8iIGFyaWEtaGlkZGVuPSJ0cnVlIiB0YWJpbmRleD0iLTEiIGRhdGEtZ3RtYz0iaGVhZGVyIGxpbmsiIGFyaWEtbGFiZWw9IkxpbmsgdG8gR28gSG9tZXBhZ2UiPgogICAgICA8aW1nIGhlaWdodD0iNzgiIHdpZHRoPSIyMDciIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nby1ibHVlLnN2ZyIgYWx0PSJHbyI+CiAgICA8L2E+CiAgICA8aDEgY2xhc3M9IlVuaXRIZWFkZXItdGl0bGVIZWFkaW5nIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItdGl0bGUiPm1lcmdvPC9oMT4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1pbnZlcnRlZCI+cGFja2FnZTwvc3Bhbj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1pbnZlcnRlZCI+bW9kdWxlPC9zcGFuPgogICAgCiAgICAKICAgICAgCiAgICAgICAgPGJ1dHRvbgogICAgICAgICAgY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWlubGluZSBnby1DbGlwYm9hcmQganMtY2xpcGJvYXJkIgogICAgICAgICAgdGl0bGU9IkNvcHkgcGF0aCB0byBjbGlwYm9hcmQuJiMxMDsmIzEwO2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNvcHkgUGF0aCB0byBDbGlwYm9hcmQiCiAgICAgICAgICBkYXRhLXRvLWNvcHk9ImdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgIGRhdGEtZ3RtYz0idGl0bGUgYnV0dG9uIgogICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQiCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NvbnRlbnRfY29weV9nbV9ncmV5XzI0ZHAuc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgIC8+CiAgICAgICAgPC9idXR0b24+CiAgICAgIAogICAgCiAgPC9kaXY+CgogICAgCiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxzIj4KICAgIAogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItdmVyc2lvbiI+CiAgICA8YSBocmVmPSI/dGFiPXZlcnNpb25zIiBhcmlhLWxhYmVsPSJHbyB0byBWZXJzaW9ucyIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+PHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPlZlcnNpb246IDwvc3Bhbj52MC4zLjE2PC9hPgogICAgCiAgICA8c3BhbiBjbGFzcz0iRGV0YWlsc0hlYWRlci1iYWRnZS0tbGF0ZXN0IiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItbWlub3JWZXJzaW9uQmFubmVyIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgRGV0YWlsc0hlYWRlci1zcGFuLS1sYXRlc3QiPkxhdGVzdDwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgRGV0YWlsc0hlYWRlci1zcGFuLS1ub3RBdExhdGVzdCI+CiAgICAgICAgTGF0ZXN0CiAgICAgICAgCiAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgIDxzdW1tYXJ5PgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hbGVydF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9Ildhcm5pbmciPgogICAgPC9zdW1tYXJ5PgogICAgPHA+VGhpcyBwYWNrYWdlIGlzIG5vdCBpbiB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgaXRzIG1vZHVsZS48L3A+CiAgPC9kZXRhaWxzPgoKICAgICAgPC9zcGFuPgogICAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiBhcmlhLWxhYmVsPSJHbyB0byBMYXRlc3QgVmVyc2lvbiIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0tYWxlcnQgRGV0YWlsc0hlYWRlci1zcGFuLS1nb1RvTGF0ZXN0Ij5HbyB0byBsYXRlc3Q8L3NwYW4+CiAgICAgIDwvYT4KICAgIDwvc3Bhbj4KICA8L3NwYW4+CgogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItY29tbWl0VGltZSI+CiAgICBQdWJsaXNoZWQ6IEFwciAgMiwgMjAyMwogIDwvc3Bhbj4KCiAgICAgIAogIDxzcGFuIGNsYXNzPSJnby1NYWluLWhlYWRlckRldGFpbEl0ZW0iIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1saWNlbnNlcyI+CiAgICBMaWNlbnNlOiA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1saWNlbnNlcyIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWxpY2Vuc2UiCiAgICAgICAgICAgIGFyaWEtbGFiZWw9IkdvIHRvIExpY2Vuc2VzIiBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj5CU0QtMy1DbGF1c2U8L2E+CiAgICAgIAogICAgCiAgPC9zcGFuPgoKICAgICAgCiAgICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWltcG9ydHMiPgogICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0cyIgYXJpYS1sYWJlbD0iR28gdG8gSW1wb3J0cyIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPkltcG9ydHM6IDwvc3Bhbj41CiAgICA8L2E+CiAgPC9zcGFuPgoKICAgICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItaW1wb3J0ZWRieSI+CiAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRlZGJ5IiBhcmlhLWxhYmVsPSJHbyB0byBJbXBvcnRlZCBCeSIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgIDxzcGFuIGNsYXNzPSJnby10ZXh0U3VidGxlIj5JbXBvcnRlZCBieTogPC9zcGFuPjAKICAgIDwvYT4KICA8L3NwYW4+CgogICAgICAKICAgIAogIDwvZGl2PgogIAogIDxkaXYgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dDb250YWluZXIiPgogICAgPHN2ZyBjbGFzcz0iVW5pdEhlYWRlci1vdmVyZmxvd0ltYWdlIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0Ij4KICAgICAgPHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPgogICAgICA8cGF0aCBkPSJNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6Ii8+CiAgICA8L3N2Zz4KICAgIDxzZWxlY3QgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dTZWxlY3QganMtc2VsZWN0TmF2IiB0YWJpbmRleD0iLTEiPgogICAgICA8b3B0aW9uIHZhbHVlPSIvIj5NYWluPC9vcHRpb24+CiAgICAgIDxvcHRpb24gdmFsdWU9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28/dGFiPXZlcnNpb25zIj4KICAgICAgICBWZXJzaW9ucwogICAgICA8L29wdGlvbj4KICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9bGljZW5zZXMiPgogICAgICAgIExpY2Vuc2VzCiAgICAgIDwvb3B0aW9uPgogICAgICAKICAgICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRzIj4KICAgICAgICAgIEltcG9ydHMKICAgICAgICA8L29wdGlvbj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRlZGJ5Ij4KICAgICAgICAgIEltcG9ydGVkIEJ5CiAgICAgICAgPC9vcHRpb24+CiAgICAgIAogICAgPC9zZWxlY3Q+CiAgPC9kaXY+CgoKICA8L2Rpdj4KCjwvaGVhZGVyPgogICAgPGFzaWRlIGNsYXNzPSJnby1NYWluLWFzaWRlICBqcy1tYWluQXNpZGUiPgogIAogIDxkaXYgY2xhc3M9IlVuaXRNZXRhIj4KICAgIDxoMiBjbGFzcz0iZ28tdGV4dExhYmVsIj5EZXRhaWxzPC9oMj4KICAgIAogIDx1bCBjbGFzcz0iVW5pdE1ldGEtZGV0YWlscyI+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFZhbGlkIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL3RyZWUvdjAuMy4xNi9nby5tb2QiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5nby5tb2Q8L2E+IGZpbGUKICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD4KICAgICAgICAgIFRoZSBHbyBtb2R1bGUgc3lzdGVtIHdhcyBpbnRyb2R1Y2VkIGluIEdvIDEuMTEgYW5kIGlzIHRoZSBvZmZpY2lhbCBkZXBlbmRlbmN5IG1hbmFnZW1lbnQKICAgICAgICAgIHNvbHV0aW9uIGZvciBHby4KICAgICAgICA8L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFJlZGlzdHJpYnV0YWJsZSBsaWNlbnNlCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+CiAgICAgICAgICBSZWRpc3RyaWJ1dGFibGUgbGljZW5zZXMgcGxhY2UgbWluaW1hbCByZXN0cmljdGlvbnMgb24gaG93IHNvZnR3YXJlIGNhbiBiZSB1c2VkLAogICAgICAgICAgbW9kaWZpZWQsIGFuZCByZWRpc3RyaWJ1dGVkLgogICAgICAgIDwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jaGVja19jaXJjbGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJjaGVja2VkImhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CgogICAgICAgICAgVGFnZ2VkIHZlcnNpb24KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD5Nb2R1bGVzIHdpdGggdGFnZ2VkIHZlcnNpb25zIGdpdmUgaW1wb3J0ZXJzIG1vcmUgcHJlZGljdGFibGUgYnVpbGRzLjwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jYW5jZWxfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJ1bmNoZWNrZWQiaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KCiAgICAgICAgICBTdGFibGUgdmVyc2lvbgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2hlbHBfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CiAgICAgICAgPC9zdW1tYXJ5PgogICAgICAgIDxwPldoZW4gYSBwcm9qZWN0IHJlYWNoZXMgbWFqb3IgdmVyc2lvbiB2MSBpdCBpcyBjb25zaWRlcmVkIHN0YWJsZS48L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IlVuaXRNZXRhLWRldGFpbHNMZWFybiI+CiAgICAgIDxhIGhyZWY9Ii9hYm91dCNiZXN0LXByYWN0aWNlcy1oMiIgZGF0YS1ndG1jPSJtZXRhIGxpbmsiPkxlYXJuIG1vcmU8L2E+CiAgICA8L2xpPgogIDwvdWw+CgogICAgPGgyIGNsYXNzPSJnby10ZXh0TGFiZWwiPlJlcG9zaXRvcnk8L2gyPgogICAgPGRpdiBjbGFzcz0iVW5pdE1ldGEtcmVwbyI+CiAgICAgIAogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiB0aXRsZT0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj4KICAgICAgICAgIGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwogICAgICAgIDwvYT4KICAgICAgCiAgICA8L2Rpdj4KICAgIAogICAgICA8aDIgY2xhc3M9ImdvLXRleHRMYWJlbCI+TGlua3M8L2gyPgogICAgICA8dWwgY2xhc3M9IlVuaXRNZXRhLWxpbmtzIj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kZXBzLmRldi9nby9naXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvL3YwLjMuMTYiIHRpdGxlPSJWaWV3IHRoaXMgbW9kdWxlIG9uIE9wZW4gU291cmNlIEluc2lnaHRzIgogICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBkYXRhLXRlc3QtaWQ9Im1ldGEtbGluay1kZXBzZGV2Ij4KICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJkZXBzZGV2LUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9kZXBzZGV2LWxvZ28uc3ZnIgogICAgICAgICAgICAgICAgYWx0PSJPcGVuIFNvdXJjZSBJbnNpZ2h0cyBMb2dvIiAvPgogICAgICAgICAgICAgIE9wZW4gU291cmNlIEluc2lnaHRzCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgCiAgCgogICAgICAgIAogIAoKICAgICAgICAKICAKCiAgICAgIDwvdWw+CiAgICAKICA8L2Rpdj4KCjwvYXNpZGU+CiAgICA8bmF2IGNsYXNzPSJnby1NYWluLW5hdiBnby1NYWluLW5hdi0tc3RpY2t5IGpzLW1haW5OYXYiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogIDxkaXYgY2xhc3M9ImdvLU1haW4tbmF2RGVza3RvcCI+CiAgICAKICA8ZGl2IGNsYXNzPSJVbml0T3V0bGluZS1qdW1wVG8iPgogICAgPGJ1dHRvbiBjbGFzcz0iVW5pdE91dGxpbmUtanVtcFRvSW5wdXQgZ28tU2hvcnRjdXRLZXkganMtanVtcFRvSW5wdXQiCiAgICAgICAgYXJpYS1jb250cm9scz0ianVtcC10by1tb2RhbCIKICAgICAgICBhcmlhLWxhYmVsPSJPcGVuIEp1bXAgdG8gSWRlbnRpZmllciIKICAgICAgICBkYXRhLXNob3J0Y3V0PSJmIgogICAgICAgIGRhdGEtc2hvcnRjdXQtYWx0PSJmaW5kIgogICAgICAgIGRhdGEtdGVzdC1pZD0ianVtcC10by1idXR0b24iIGRhdGEtZ3RtYz0ib3V0bGluZSBidXR0b24iPgogICAgICBKdW1wIHRvIC4uLgogICAgPC9idXR0b24+CiAgPC9kaXY+CiAgPHVsIGNsYXNzPSJnby1UcmVlIGpzLXRyZWUiIHJvbGU9InRyZWUiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogICAgCiAgICAgIDxsaSBjbGFzcz0ianMtcmVhZG1lT3V0bGluZSI+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tcmVhZG1lIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBSRUFETUUKICAgICAgICA8L2E+CiAgICAgICAgCiAgPHVsIGlkPSJyZWFkbWUtb3V0bGluZSI+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtc3RhdHVzIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgU3RhdHVzCiAgICAgICAgPC9hPgogICAgICAgIAogICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWltcG9ydGFudC1ub3RlIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBJbXBvcnRhbnQgbm90ZQogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtZG9uYXRpb25zIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBEb25hdGlvbnMKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLW1lcmdvLWluLXRoZS13aWxkIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBNZXJnbyBpbiB0aGUgd2lsZAogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvdWw+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWluc3RhbGwiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBJbnN0YWxsCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS11c2FnZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIFVzYWdlCiAgICAgICAgPC9hPgogICAgICAgIAogICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtZXJzCiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtY29udGFjdC1tZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIENvbnRhY3QgbWUKICAgICAgICA8L2E+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWFib3V0IiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgQWJvdXQKICAgICAgICA8L2E+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWxpY2Vuc2UiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBMaWNlbnNlCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgICAKICA8L3VsPgoKICAgICAgPC9saT4KICAgIAogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjc2VjdGlvbi1kb2N1bWVudGF0aW9uIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBEb2N1bWVudGF0aW9uCiAgICAgICAgPC9hPgogICAgICAgIAo8dWw+CiAgCiAgICA8bGk+CiAgICAgIDxhIGhyZWY9IiNwa2ctb3ZlcnZpZXciIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+T3ZlcnZpZXc8L2E+CiAgICA8L2xpPgogIDxsaSBjbGFzcz0iRG9jTmF2LW92ZXJ2aWV3Ij4KICAgICAgPGEgaHJlZj0iI3BrZy1pbmRleCIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBJbmRleAogICAgICA8L2E+CiAgICAgIAogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LWNvbnN0YW50cyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIENvbnN0YW50cwogICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtdmFyaWFibGVzIj4KICAgICAgPGEgaHJlZj0iI3BrZy12YXJpYWJsZXMiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgVmFyaWFibGVzCiAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY05hdi1mdW5jdGlvbnMiPgogICAgICA8YSBocmVmPSIjcGtnLWZ1bmN0aW9ucyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBGdW5jdGlvbnMKICAgICAgPC9hPgogICAgICAKICAgICAgICA8dWw+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNYXAiIHRpdGxlPSJNYXAoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWFwKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI01hcFdpdGhPdmVyd3JpdGUiIHRpdGxlPSJNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIE1hcFdpdGhPdmVyd3JpdGUoZHN0LCBzcmMsIG9wdHMpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjTWVyZ2UiIHRpdGxlPSJNZXJnZShkc3QsIHNyYywgb3B0cykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBNZXJnZShkc3QsIHNyYywgb3B0cykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiIHRpdGxlPSJNZXJnZVdpdGhPdmVyd3JpdGUoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhBcHBlbmRTbGljZSIgdGl0bGU9IldpdGhBcHBlbmRTbGljZShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aEFwcGVuZFNsaWNlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiIHRpdGxlPSJXaXRoT3ZlcnJpZGUoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVycmlkZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aE92ZXJyaWRlRW1wdHlTbGljZSIgdGl0bGU9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVycmlkZUVtcHR5U2xpY2UoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSIgdGl0bGU9IldpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoU2xpY2VEZWVwQ29weSIgdGl0bGU9IldpdGhTbGljZURlZXBDb3B5KGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoU2xpY2VEZWVwQ29weShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyIgdGl0bGU9IldpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhUeXBlQ2hlY2siIHRpdGxlPSJXaXRoVHlwZUNoZWNrKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoVHlwZUNoZWNrKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRob3V0RGVyZWZlcmVuY2UiIHRpdGxlPSJXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhvdXREZXJlZmVyZW5jZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgPC91bD4KICAgICAgCiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtdHlwZXMiPgogICAgICA8YSBocmVmPSIjcGtnLXR5cGVzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIFR5cGVzCiAgICAgIDwvYT4KICAgICAgPHVsPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDb25maWciIHRpdGxlPSJ0eXBlIENvbmZpZyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIENvbmZpZwogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1RyYW5zZm9ybWVycyIgdGl0bGU9InR5cGUgVHJhbnNmb3JtZXJzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgIHR5cGUgVHJhbnNmb3JtZXJzCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgIAogICAgICAgICAgPC9saT4KICAgICAgICAgCiAgICAgIDwvdWw+CiAgICA8L2xpPgogIAogIAo8L3VsPgoKICAgICAgPC9saT4KICAgIAogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjc2VjdGlvbi1zb3VyY2VmaWxlcyIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgU291cmNlIEZpbGVzCiAgICAgICAgPC9hPgogICAgICA8L2xpPgogICAgCiAgICAKICA8L3VsPgoKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJnby1NYWluLW5hdk1vYmlsZSBqcy1tYWluTmF2TW9iaWxlIj4KICAgIDxsYWJlbCBjbGFzcz0iZ28tTGFiZWwiPgogICAgICA8c2VsZWN0IGNsYXNzPSJnby1TZWxlY3QiPgogICAgICAgIAogICAgICAgICAgPG9wdGlvbiBzZWxlY3RlZCBkaXNhYmxlZD5SRUFETUU8L29wdGlvbj4KICAgICAgICAKICAgICAgPC9zZWxlY3Q+CiAgICA8L2xhYmVsPgogIDwvZGl2Pgo8L25hdj4KICAgIDxhcnRpY2xlIGNsYXNzPSJnby1NYWluLWFydGljbGUganMtbWFpbkNvbnRlbnQiPgogIDxkaXYgY2xhc3M9IlVuaXREZXRhaWxzIiBkYXRhLXRlc3QtaWQ9IlVuaXREZXRhaWxzIiBzdHlsZT0iZGlzcGxheTogYmxvY2s7Ij4KICAgIDxkaXYgY2xhc3M9IlVuaXREZXRhaWxzLWNvbnRlbnQganMtdW5pdERldGFpbHNDb250ZW50IiBkYXRhLXRlc3QtaWQ9IlVuaXREZXRhaWxzLWNvbnRlbnQiPgogICAgICAKICAgICAgICAKICA8ZGl2IGNsYXNzPSJVbml0UmVhZG1lIFVuaXRSZWFkbWUtLWV4cGFuZGVkIGpzLXJlYWRtZSI+CiAgICA8aDIgY2xhc3M9IlVuaXRSZWFkbWUtdGl0bGUiIGlkPSJzZWN0aW9uLXJlYWRtZSI+CiAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nocm9tZV9yZWFkZXJfbW9kZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgIFJFQURNRQogICAgICA8YSBjbGFzcz0iVW5pdFJlYWRtZS1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLXJlYWRtZSI+wrY8L2E+CiAgICA8L2gyPgogICAgCiAgICAgIDxkaXYgY2xhc3M9IlVuaXRSZWFkbWUtY29udGVudCIgZGF0YS10ZXN0LWlkPSJVbml0LXJlYWRtZUNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Ik92ZXJ2aWV3LXJlYWRtZUNvbnRlbnQganMtcmVhZG1lQ29udGVudCI+PGgzIGNsYXNzPSJoMSIgaWQ9InJlYWRtZS1tZXJnbyI+TWVyZ288L2gzPgo8cD48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9yZWxlYXNlcyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UvaW1kYXJpby9tZXJnby5zdmciIGFsdD0iR2l0SHViIHJlbGVhc2UiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ29yZXBvcnRjYXJkLmNvbS9yZXBvcnQvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9nb3JlcG9ydGNhcmQuY29tL2JhZGdlL2ltZGFyaW8vbWVyZ28iIGFsdD0iR29DYXJkIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9hY3Rpb25zL3dvcmtmbG93cy90ZXN0cy55bWwiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby93b3JrZmxvd3MvdGVzdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIiIGFsdD0iVGVzdCBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYXBpLnNlY3VyaXR5c2NvcmVjYXJkcy5kZXYvcHJvamVjdHMvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcGkuc2VjdXJpdHlzY29yZWNhcmRzLmRldi9wcm9qZWN0cy9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmFkZ2UiIGFsdD0iT3BlblNTRiBTY29yZWNhcmQiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYmVzdHByYWN0aWNlcy5jb3JlaW5mcmFzdHJ1Y3R1cmUub3JnL3Byb2plY3RzLzcxNzciIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2Jlc3RwcmFjdGljZXMuY29yZWluZnJhc3RydWN0dXJlLm9yZy9wcm9qZWN0cy83MTc3L2JhZGdlIiBhbHQ9Ik9wZW5TU0YgQmVzdCBQcmFjdGljZXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vY292ZXJhbGxzLmlvL2dpdGh1Yi9pbWRhcmlvL21lcmdvP2JyYW5jaD1tYXN0ZXIiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9naXRodWIvaW1kYXJpby9tZXJnby9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlciIgYWx0PSJDb3ZlcmFnZSBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9iYWRnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby8tL2JhZGdlLnN2ZyIgYWx0PSJTb3VyY2VncmFwaCIvPjwvYT4KPGEgaHJlZj0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vcHJvamVjdHMvZ2l0JTJCZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbz9yZWY9YmFkZ2Vfc2hpZWxkIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vYXBpL3Byb2plY3RzL2dpdCUyQmdpdGh1Yi5jb20lMkZpbWRhcmlvJTJGbWVyZ28uc3ZnP3R5cGU9c2hpZWxkIiBhbHQ9IkZPU1NBIHN0YXR1cyIvPjwvYT48L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9zdGF0dXMuc3ZnIiBhbHQ9IkdvRG9jIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc3BvbnNvcnMvaW1kYXJpbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3Nwb25zb3JzL2ltZGFyaW8iIGFsdD0iQmVjb21lIG15IHNwb25zb3IiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vdGlkZWxpZnQuY29tL3N1YnNjcmlwdGlvbi9wa2cvZ28tZ2l0aHViLmNvbS1pbWRhcmlvLW1lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly90aWRlbGlmdC5jb20vYmFkZ2VzL3BhY2thZ2UvZ28vZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbyIgYWx0PSJUaWRlbGlmdCIvPjwvYT48L3A+CjxwPkEgaGVscGVyIHRvIG1lcmdlIHN0cnVjdHMgYW5kIG1hcHMgaW4gR29sYW5nLiBVc2VmdWwgZm9yIGNvbmZpZ3VyYXRpb24gZGVmYXVsdCB2YWx1ZXMsIGF2b2lkaW5nIG1lc3N5IGlmLXN0YXRlbWVudHMuPC9wPgo8cD5NZXJnbyBtZXJnZXMgc2FtZS10eXBlIHN0cnVjdHMgYW5kIG1hcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBpbiB6ZXJvLXZhbHVlIGZpZWxkcy4gTWVyZ28gd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcy4gSXQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgb25lLiBJdCBhbHNvIHdvbiYjMzk7dCBtZXJnZSBzdHJ1Y3RzIGluc2lkZSBtYXBzIChiZWNhdXNlIHRoZXkgYXJlIG5vdCBhZGRyZXNzYWJsZSB1c2luZyBHbyByZWZsZWN0aW9uKS48L3A+CjxwPkFsc28gYSBsb3ZlbHkgPGEgaHJlZj0iaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZXJnbyIgcmVsPSJub2ZvbGxvdyI+Y29tdW5lPC9hPiAobXVuaWNpcGFsaXR5KSBpbiB0aGUgUHJvdmluY2Ugb2YgQW5jb25hIGluIHRoZSBJdGFsaWFuIHJlZ2lvbiBvZiBNYXJjaGUuPC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLXN0YXR1cyI+U3RhdHVzPC9oND4KPHA+SXQgaXMgcmVhZHkgZm9yIHByb2R1Y3Rpb24gdXNlLiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyNtZXJnby1pbi10aGUtd2lsZCIgcmVsPSJub2ZvbGxvdyI+SXQgaXMgdXNlZCBpbiBzZXZlcmFsIHByb2plY3RzIGJ5IERvY2tlciwgR29vZ2xlLCBUaGUgTGludXggRm91bmRhdGlvbiwgVk1XYXJlLCBTaG9waWZ5LCBNaWNyb3NvZnQsIGV0YzwvYT4uPC9wPgo8aDUgY2xhc3M9ImgzIiBpZD0icmVhZG1lLWltcG9ydGFudC1ub3RlIj5JbXBvcnRhbnQgbm90ZTwvaDU+CjxwPlBsZWFzZSBrZWVwIGluIG1pbmQgdGhhdCBhIHByb2JsZW1hdGljIFBSIGJyb2tlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuOSIgcmVsPSJub2ZvbGxvdyI+MC4zLjk8L2E+LiBJIHJldmVydGVkIGl0IGluIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuMTAiIHJlbD0ibm9mb2xsb3ciPjAuMy4xMDwvYT4sIGFuZCBJIGNvbnNpZGVyIGl0IHN0YWJsZSBidXQgbm90IGJ1Zy1mcmVlLiBBbHNvLCB0aGlzIHZlcnNpb24gYWRkcyBzdXBwb3J0IGZvciBnbyBtb2R1bGVzLjwvcD4KPHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2ltZGFyaW8vbWVyZ28vcmVsZWFzZXMvdGFnLzAuMy4yIiByZWw9Im5vZm9sbG93Ij4wLjMuMjwvYT4sIE1lcmdvIGNoYW5nZWQgPGNvZGU+TWVyZ2UoKTwvY29kZT5hbmQgPGNvZGU+TWFwKCk8L2NvZGU+IHNpZ25hdHVyZXMgdG8gc3VwcG9ydCA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgcmVsPSJub2ZvbGxvdyI+dHJhbnNmb3JtZXJzPC9hPi4gSSBhZGRlZCBhbiBvcHRpb25hbC92YXJpYWRpYyBhcmd1bWVudCBzbyB0aGF0IGl0IHdvbiYjMzk7dCBicmVhayB0aGUgZXhpc3RpbmcgY29kZS48L3A+CjxwPklmIHlvdSB3ZXJlIHVzaW5nIE1lcmdvIGJlZm9yZSBBcHJpbCA2dGgsIDIwMTUsIHBsZWFzZSBjaGVjayB5b3VyIHByb2plY3Qgd29ya3MgYXMgaW50ZW5kZWQgYWZ0ZXIgdXBkYXRpbmcgeW91ciBsb2NhbCBjb3B5IHdpdGggPGNvZGU+Z28gZ2V0IC11IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbzwvY29kZT4uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS48L3A+CjxoNSBjbGFzcz0iaDMiIGlkPSJyZWFkbWUtZG9uYXRpb25zIj5Eb25hdGlvbnM8L2g1Pgo8cD5JZiBNZXJnbyBpcyB1c2VmdWwgdG8geW91LCBjb25zaWRlciBidXlpbmcgbWUgYSBjb2ZmZWUsIGEgYmVlciwgb3IgbWFraW5nIGEgbW9udGhseSBkb25hdGlvbiB0byBhbGxvdyBtZSB0byBrZWVwIGJ1aWxkaW5nIGdyZWF0IGZyZWUgc29mdHdhcmUuIPCfmI08L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8va28tZmkuY29tL0IwQjU4ODM5IiByZWw9Im5vZm9sbG93Ij48aW1nIGhlaWdodD0iMzYiIHNyYz0iaHR0cHM6Ly9hejc0MzcwMi52by5tc2VjbmQubmV0L2Nkbi9rb2ZpMS5wbmc/dj0wIiBhbHQ9IkJ1eSBNZSBhIENvZmZlZSBhdCBrby1maS5jb20iLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9kYXJpby9kb25hdGUiIHJlbD0ibm9mb2xsb3ciPjxpbWcgYWx0PSJEb25hdGUgdXNpbmcgTGliZXJhcGF5IiBzcmM9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9hc3NldHMvd2lkZ2V0cy9kb25hdGUuc3ZnIj48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zcG9uc29ycy9pbWRhcmlvIiByZWw9Im5vZm9sbG93Ij48aW1nIGFsdD0iQmVjb21lIG15IHNwb25zb3IiIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvc3BvbnNvcnMvaW1kYXJpbz9zdHlsZT1mb3ItdGhlLWJhZGdlIi8+PC9hPjwvcD4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS1tZXJnby1pbi10aGUtd2lsZCI+TWVyZ28gaW4gdGhlIHdpbGQ8L2g1Pgo8dWw+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbW9ieS9tb2J5IiByZWw9Im5vZm9sbG93Ij5tb2J5L21vYnk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2t1YmVybmV0ZXMiIHJlbD0ibm9mb2xsb3ciPmt1YmVybmV0ZXMva3ViZXJuZXRlczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Ztd2FyZS9kaXNwYXRjaCIgcmVsPSJub2ZvbGxvdyI+dm13YXJlL2Rpc3BhdGNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vU2hvcGlmeS90aGVtZWtpdCIgcmVsPSJub2ZvbGxvdyI+U2hvcGlmeS90aGVtZWtpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vemFzIiByZWw9Im5vZm9sbG93Ij5pbWRhcmlvL3phczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hdGNvcm5pYy9oZXJtZXMiIHJlbD0ibm9mb2xsb3ciPm1hdGNvcm5pYy9oZXJtZXM8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuQmF6YWFyL29wZW5iYXphYXItZ28iIHJlbD0ibm9mb2xsb3ciPk9wZW5CYXphYXIvb3BlbmJhemFhci1nbzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2thdGFyYXMvaXJpcyIgcmVsPSJub2ZvbGxvdyI+a2F0YXJhcy9pcmlzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbHNhdXRlci9jcmFuZSIgcmVsPSJub2ZvbGxvdyI+bWljaGFlbHNhdXRlci9jcmFuZTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvLXRhc2svdGFzayIgcmVsPSJub2ZvbGxvdyI+Z28tdGFzay90YXNrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc2Vuc3UvdWNoaXdhIiByZWw9Im5vZm9sbG93Ij5zZW5zdS91Y2hpd2E8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vcnkvaHlkcmEiIHJlbD0ibm9mb2xsb3ciPm9yeS9oeWRyYTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Npc2F0ZWNoL3ZjbGkiIHJlbD0ibm9mb2xsb3ciPnNpc2F0ZWNoL3ZjbGk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kYWlyeWNhcnQvZGFpcnljYXJ0IiByZWw9Im5vZm9sbG93Ij5kYWlyeWNhcnQvZGFpcnljYXJ0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcHJvamVjdGNhbGljby9mZWxpeCIgcmVsPSJub2ZvbGxvdyI+cHJvamVjdGNhbGljby9mZWxpeDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Jlc2luLW9zL2JhbGVuYSIgcmVsPSJub2ZvbGxvdyI+cmVzaW4tb3MvYmFsZW5hPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ28ta2l2aWsva2l2aWsiIHJlbD0ibm9mb2xsb3ciPmdvLWtpdmlrL2tpdmlrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vVGVsZWZvbmljYS9nb3ZpY2UiIHJlbD0ibm9mb2xsb3ciPlRlbGVmb25pY2EvZ292aWNlPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvc3VwZXJnaWFudC9zdXBlcmdpYW50IiByZWw9Im5vZm9sbG93Ij5zdXBlcmdpYW50L3N1cGVyZ2lhbnQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9TZXJnZXlUc2Fsa292L2Jyb29jZSIgcmVsPSJub2ZvbGxvdyI+U2VyZ2V5VHNhbGtvdi9icm9vY2U8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zb25pYWgvZG5zbWFkZWVhc3kiIHJlbD0ibm9mb2xsb3ciPnNvbmlhaC9kbnNtYWRlZWFzeTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL29oc3UtY29tcC1iaW8vZnVubmVsIiByZWw9Im5vZm9sbG93Ij5vaHN1LWNvbXAtYmlvL2Z1bm5lbDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0VhZ2VySU8vU3RvdXQiIHJlbD0ibm9mb2xsb3ciPkVhZ2VySU8vU3RvdXQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpIiByZWw9Im5vZm9sbG93Ij5seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcnVzc3Jvc3MvY2FudmFzYXNzaWdubWVudHMiIHJlbD0ibm9mb2xsb3ciPnJ1c3Nyb3NzL2NhbnZhc2Fzc2lnbm1lbnRzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcmRlZ2dlcy9jcnlwdGx5LWFwaSIgcmVsPSJub2ZvbGxvdyI+cmRlZ2dlcy9jcnlwdGx5LWFwaTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Nhc3VhbGppbS9leGVnZ3V0b3IiIHJlbD0ibm9mb2xsb3ciPmNhc3VhbGppbS9leGVnZ3V0b3I8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kaXZzaG90L2dpdGxpbmciIHJlbD0ibm9mb2xsb3ciPmRpdnNob3QvZ2l0bGluZzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL1JXSk11cnBoeS9nb3JsIiByZWw9Im5vZm9sbG93Ij5SV0pNdXJwaHkvZ29ybDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2FuZHJlcm9ja2VyL2RlcGxveTQyIiByZWw9Im5vZm9sbG93Ij5hbmRyZXJvY2tlci9kZXBsb3k0MjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Vsd2luYXIvcmFtYmxlciIgcmVsPSJub2ZvbGxvdyI+ZWx3aW5hci9yYW1ibGVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vdG1haWFyb3RvL2dvcGFydG1hbiIgcmVsPSJub2ZvbGxvdyI+dG1haWFyb3RvL2dvcGFydG1hbjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2pmYnVzL2ltcHJlc3Npb25pc3QiIHJlbD0ibm9mb2xsb3ciPmpmYnVzL2ltcHJlc3Npb25pc3Q8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9KbWV5ZXJpbmcvemVhbG90IiByZWw9Im5vZm9sbG93Ij5KbWV5ZXJpbmcvemVhbG90PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29kZXAtbWlncmF0b3IvcmlnZ2VyLWhvc3QiIHJlbD0ibm9mb2xsb3ciPmdvZGVwLW1pZ3JhdG9yL3JpZ2dlci1ob3N0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vRHJvbmV2ZXJ5L011bHRpd2F5U3dpdGNoLUdvIiByZWw9Im5vZm9sbG93Ij5Ecm9uZXZlcnkvTXVsdGl3YXlTd2l0Y2gtR288L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90aG9hcy9waWNmaXQiIHJlbD0ibm9mb2xsb3ciPnRob2FzL3BpY2ZpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hbnRhc21hdGVsaXMvd2hvb3BsaXN0LXNlcnZlciIgcmVsPSJub2ZvbGxvdyI+bWFudGFzbWF0ZWxpcy93aG9vcGxpc3Qtc2VydmVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vam51dGhvbmcvaXRlbV9zZWFyY2giIHJlbD0ibm9mb2xsb3ciPmpudXRob25nL2l0ZW1fc2VhcmNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYnVrYWxhcGFrL3Nub3dib2FyZCIgcmVsPSJub2ZvbGxvdyI+YnVrYWxhcGFrL3Nub3dib2FyZDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcnNzaC9jb250YWluZXJzc2giIHJlbD0ibm9mb2xsb3ciPmNvbnRhaW5lcnNzaC9jb250YWluZXJzc2g8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb3JlbGVhc2VyL2dvcmVsZWFzZXIiIHJlbD0ibm9mb2xsb3ciPmdvcmVsZWFzZXIvZ29yZWxlYXNlcjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3RqcG56L3N0cnVjdGJvdCIgcmVsPSJub2ZvbGxvdyI+dGpwbnovc3RydWN0Ym90PC9hPjwvbGk+CjwvdWw+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtaW5zdGFsbCI+SW5zdGFsbDwvaDQ+CjxwcmU+PGNvZGU+Z28gZ2V0IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwoKLy8gdXNlIGluIHlvdXIgLmdvIGNvZGUKaW1wb3J0ICgKICAgICYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQo8L2NvZGU+PC9wcmU+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtdXNhZ2UiPlVzYWdlPC9oND4KPHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIDxhIGhyZWY9Imh0dHBzOi8vZ29sYW5nLm9yZy9yZWYvc3BlYyNUaGVfemVyb192YWx1ZSIgcmVsPSJub2ZvbGxvdyI+dGhleSBhcmUgemVybyB2YWx1ZXM8L2E+IHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BbHNvLCB5b3UgY2FuIG1lcmdlIG92ZXJ3cml0aW5nIHZhbHVlcyB1c2luZyB0aGUgdHJhbnNmb3JtZXIgPGNvZGU+V2l0aE92ZXJyaWRlPC9jb2RlPi48L3A+CjxwcmU+PGNvZGU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BZGRpdGlvbmFsbHksIHlvdSBjYW4gbWFwIGEgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gPGNvZGU+TWVyZ2UoKTwvY29kZT4uIEtleXMgYXJlIGNhcGl0YWxpemVkIHRvIGZpbmQgZWFjaCBjb3JyZXNwb25kaW5nIGV4cG9ydGVkIGZpZWxkLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWFwKCZhbXA7ZHN0LCBzcmNNYXApOyBlcnIgIT0gbmlsIHsKICAgIC8vIC4uLgp9CjwvY29kZT48L3ByZT4KPHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4uIFRoZXkgd2lsbCBiZSBqdXN0IGFzc2lnbmVkIGFzIHZhbHVlcy48L3A+CjxwPkhlcmUgaXMgYSBuaWNlIGV4YW1wbGU6PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQoKdHlwZSBGb28gc3RydWN0IHsKCUEgc3RyaW5nCglCIGludDY0Cn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBGb297CgkJQTogJiMzNDtvbmUmIzM0OywKCQlCOiAyLAoJfQoJZGVzdCA6PSBGb297CgkJQTogJiMzNDt0d28mIzM0OywKCX0KCW1lcmdvLk1lcmdlKCZhbXA7ZGVzdCwgc3JjKQoJZm10LlByaW50bG4oZGVzdCkKCS8vIFdpbGwgcHJpbnQKCS8vIHt0d28gMn0KfQo8L2NvZGU+PC9wcmU+CjxwPk5vdGU6IGlmIHRlc3QgYXJlIGZhaWxpbmcgZHVlIG1pc3NpbmcgcGFja2FnZSwgcGxlYXNlIGV4ZWN1dGU6PC9wPgo8cHJlPjxjb2RlPmdvIGdldCBnb3BrZy5pbi95YW1sLnYzCjwvY29kZT48L3ByZT4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS10cmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvaDU+CjxwPlRyYW5zZm9ybWVycyBhbGxvdyB0byBtZXJnZSBzcGVjaWZpYyB0eXBlcyBkaWZmZXJlbnRseSB0aGFuIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJbiBvdGhlciB3b3Jkcywgbm93IHlvdSBjYW4gY3VzdG9taXplIGhvdyBzb21lIHR5cGVzIGFyZSBtZXJnZWQuIEZvciBleGFtcGxlLCA8Y29kZT50aW1lLlRpbWU8L2NvZGU+IGlzIGEgc3RydWN0OyBpdCBkb2VzbiYjMzk7dCBoYXZlIHplcm8gdmFsdWUgYnV0IElzWmVybyBjYW4gcmV0dXJuIHRydWUgYmVjYXVzZSBpdCBoYXMgZmllbGRzIHdpdGggemVybyB2YWx1ZS4gSG93IGNhbiB3ZSBtZXJnZSBhIG5vbi16ZXJvIDxjb2RlPnRpbWUuVGltZTwvY29kZT4/PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKICAgICAgICAmIzM0O3JlZmxlY3QmIzM0OwogICAgICAgICYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9jb2RlPjwvcHJlPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWNvbnRhY3QtbWUiPkNvbnRhY3QgbWU8L2g0Pgo8cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIiByZWw9Im5vZm9sbG93Ij5AaW1fZGFyaW88L2E+PC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWFib3V0Ij5BYm91dDwvaDQ+CjxwPldyaXR0ZW4gYnkgPGEgaHJlZj0iaHR0cDovL2RhcmlvLmltIiByZWw9Im5vZm9sbG93Ij5EYXJpbyBDYXN0YcOxw6k8L2E+LjwvcD4KPGg0IGNsYXNzPSJoMiIgaWQ9InJlYWRtZS1saWNlbnNlIj5MaWNlbnNlPC9oND4KPHA+PGEgaHJlZj0iaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZSIgcmVsPSJub2ZvbGxvdyI+QlNEIDMtQ2xhdXNlPC9hPiBsaWNlbnNlLCBhcyA8YSBocmVmPSJodHRwOi8vZ29sYW5nLm9yZy9MSUNFTlNFIiByZWw9Im5vZm9sbG93Ij5HbyBsYW5ndWFnZTwvYT4uPC9wPgo8cD48YSBocmVmPSJodHRwczovL2FwcC5mb3NzYS5pby9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvP3JlZj1iYWRnZV9sYXJnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vYXBwLmZvc3NhLmlvL2FwaS9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvLnN2Zz90eXBlPWxhcmdlIiBhbHQ9IkZPU1NBIFN0YXR1cyIvPjwvYT48L3A+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iVW5pdFJlYWRtZS1leHBhbmRMaW5rIGpzLXJlYWRtZUV4cGFuZCIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWV4cGFuZCIgZGF0YS1ndG1jPSJyZWFkbWUgYnV0dG9uIgogICAgICAgICAgYXJpYS1sYWJlbD0iRXhwYW5kIFJlYWRtZSI+RXhwYW5kIOKWvjwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJVbml0UmVhZG1lLWNvbGxhcHNlTGluayBqcy1yZWFkbWVDb2xsYXBzZSIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWNvbGxhcHNlIiBkYXRhLWd0bWM9InJlYWRtZSBidXR0b24iCiAgICAgICAgICBhcmlhLWxhYmVsPSJFeHBhbmQgUmVhZG1lIj5Db2xsYXBzZSDilrQ8L2J1dHRvbj4KICAgIAogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdERvYyI+CiAgICA8aDIgY2xhc3M9IlVuaXREb2MtdGl0bGUiIGlkPSJzZWN0aW9uLWRvY3VtZW50YXRpb24iPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb2RlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgRG9jdW1lbnRhdGlvbgogICAgICA8YSBjbGFzcz0iVW5pdERvYy1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLWRvY3VtZW50YXRpb24iPsK2PC9hPgogICAgPC9oMj4KICAgIAogIAogICAgCiAgCgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbiBqcy1kb2N1bWVudGF0aW9uIj4KICAgICAgCiAgICAgICAgCgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnRlbnQganMtZG9jQ29udGVudCI+IDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3Ij4KICAgIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctb3ZlcnZpZXciIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3SGVhZGVyIj5PdmVydmlldyA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3Ij7CtjwvYT48L2gzPgoKPGRpdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJUYWJsZSBvZiBDb250ZW50cyI+CiAgPHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvYyBEb2N1bWVudGF0aW9uLXRvYy1jb2x1bW5zIj4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVN0YXR1cyI+U3RhdHVzPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItSW5zdGFsbCI+SW5zdGFsbDwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVVzYWdlIj5Vc2FnZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVRyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItQ29udGFjdF9tZSI+Q29udGFjdCBtZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUFib3V0Ij5BYm91dDwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUxpY2Vuc2UiPkxpY2Vuc2U8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgo8L2Rpdj4KPHA+QSBoZWxwZXIgdG8gbWVyZ2Ugc3RydWN0cyBhbmQgbWFwcyBpbiBHb2xhbmcuIFVzZWZ1bCBmb3IgY29uZmlndXJhdGlvbiBkZWZhdWx0IHZhbHVlcywgYXZvaWRpbmcgbWVzc3kgaWYtc3RhdGVtZW50cy4KPC9wPjxwPk1lcmdvIG1lcmdlcyBzYW1lLXR5cGUgc3RydWN0cyBhbmQgbWFwcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGluIHplcm8tdmFsdWUgZmllbGRzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzLiBJdCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IGFsc28gd29uJiMzOTt0IG1lcmdlIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLgo8L3A+PGg0IGlkPSJoZHItU3RhdHVzIj5TdGF0dXMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLVN0YXR1cyI+wrY8L2E+PC9oND48cD5JdCBpcyByZWFkeSBmb3IgcHJvZHVjdGlvbiB1c2UuIEl0IGlzIHVzZWQgaW4gc2V2ZXJhbCBwcm9qZWN0cyBieSBEb2NrZXIsIEdvb2dsZSwgVGhlIExpbnV4IEZvdW5kYXRpb24sIFZNV2FyZSwgU2hvcGlmeSwgZXRjLgo8L3A+PGg0IGlkPSJoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbXBvcnRhbnRfbm90ZSI+wrY8L2E+PC9oND48cD5QbGVhc2Uga2VlcCBpbiBtaW5kIHRoYXQgYSBwcm9ibGVtYXRpYyBQUiBicm9rZSAwLjMuOS4gV2UgcmV2ZXJ0ZWQgaXQgaW4gMC4zLjEwLiBXZSBjb25zaWRlciAwLjMuMTAgYXMgc3RhYmxlIGJ1dCBub3QgYnVnLWZyZWUuIC4gQWxzbywgdGhpcyB2ZXJzaW9uIGFkZHMgc3VwcG90IGZvciBnbyBtb2R1bGVzLgo8L3A+PHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gMC4zLjIsIE1lcmdvIGNoYW5nZWQgTWVyZ2UoKSBhbmQgTWFwKCkgc2lnbmF0dXJlcyB0byBzdXBwb3J0IHRyYW5zZm9ybWVycy4gV2UgYWRkZWQgYW4gb3B0aW9uYWwvdmFyaWFkaWMgYXJndW1lbnQgc28gdGhhdCBpdCB3b24mIzM5O3QgYnJlYWsgdGhlIGV4aXN0aW5nIGNvZGUuCjwvcD48cD5JZiB5b3Ugd2VyZSB1c2luZyBNZXJnbyBiZWZvcmUgQXByaWwgNnRoLCAyMDE1LCBwbGVhc2UgY2hlY2sgeW91ciBwcm9qZWN0IHdvcmtzIGFzIGludGVuZGVkIGFmdGVyIHVwZGF0aW5nIHlvdXIgbG9jYWwgY29weSB3aXRoIGdvIGdldCAtdSBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS4KPC9wPjxoNCBpZD0iaGRyLUluc3RhbGwiPkluc3RhbGwgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUluc3RhbGwiPsK2PC9hPjwvaDQ+PHA+RG8geW91ciB1c3VhbCBpbnN0YWxsYXRpb24gcHJvY2VkdXJlOgo8L3A+PHByZT5nbyBnZXQgZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvCgovLyB1c2UgaW4geW91ciAuZ28gY29kZQppbXBvcnQgKAogICAgJiMzNDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28mIzM0OwopCjwvcHJlPjxoNCBpZD0iaGRyLVVzYWdlIj5Vc2FnZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItVXNhZ2UiPsK2PC9hPjwvaDQ+PHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIHRoZXkgYXJlIHplcm8gdmFsdWVzIHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLgo8L3A+PHByZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+QWxzbywgeW91IGNhbiBtZXJnZSBvdmVyd3JpdGluZyB2YWx1ZXMgdXNpbmcgdGhlIHRyYW5zZm9ybWVyIFdpdGhPdmVycmlkZS4KPC9wPjxwcmU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+QWRkaXRpb25hbGx5LCB5b3UgY2FuIG1hcCBhIG1hcFtzdHJpbmddaW50ZXJmYWNle30gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gTWVyZ2UoKS4gS2V5cyBhcmUgY2FwaXRhbGl6ZWQgdG8gZmluZCBlYWNoIGNvcnJlc3BvbmRpbmcgZXhwb3J0ZWQgZmllbGQuCjwvcD48cHJlPmlmIGVyciA6PSBtZXJnby5NYXAoJmFtcDtkc3QsIHNyY01hcCk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgbWFwW3N0cmluZ11pbnRlcmZhY2V7fS4gVGhleSB3aWxsIGJlIGp1c3QgYXNzaWduZWQgYXMgdmFsdWVzLgo8L3A+PHA+SGVyZSBpcyBhIG5pY2UgZXhhbXBsZToKPC9wPjxwcmU+cGFja2FnZSBtYWluCgppbXBvcnQgKAoJJiMzNDtmbXQmIzM0OwoJJiMzNDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28mIzM0OwopCgp0eXBlIEZvbyBzdHJ1Y3QgewoJQSBzdHJpbmcKCUIgaW50NjQKfQoKZnVuYyBtYWluKCkgewoJc3JjIDo9IEZvb3sKCQlBOiAmIzM0O29uZSYjMzQ7LAoJCUI6IDIsCgl9CglkZXN0IDo9IEZvb3sKCQlBOiAmIzM0O3R3byYjMzQ7LAoJfQoJbWVyZ28uTWVyZ2UoJmFtcDtkZXN0LCBzcmMpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8ge3R3byAyfQp9CjwvcHJlPjxoNCBpZD0iaGRyLVRyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1UcmFuc2Zvcm1lcnMiPsK2PC9hPjwvaDQ+PHA+VHJhbnNmb3JtZXJzIGFsbG93IHRvIG1lcmdlIHNwZWNpZmljIHR5cGVzIGRpZmZlcmVudGx5IHRoYW4gaW4gdGhlIGRlZmF1bHQgYmVoYXZpb3IuIEluIG90aGVyIHdvcmRzLCBub3cgeW91IGNhbiBjdXN0b21pemUgaG93IHNvbWUgdHlwZXMgYXJlIG1lcmdlZC4gRm9yIGV4YW1wbGUsIHRpbWUuVGltZSBpcyBhIHN0cnVjdDsgaXQgZG9lc24mIzM5O3QgaGF2ZSB6ZXJvIHZhbHVlIGJ1dCBJc1plcm8gY2FuIHJldHVybiB0cnVlIGJlY2F1c2UgaXQgaGFzIGZpZWxkcyB3aXRoIHplcm8gdmFsdWUuIEhvdyBjYW4gd2UgbWVyZ2UgYSBub24temVybyB0aW1lLlRpbWU/CjwvcD48cHJlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKCQkmIzM0O3JlZmxlY3QmIzM0OwoJCSYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9wcmU+PGg0IGlkPSJoZHItQ29udGFjdF9tZSI+Q29udGFjdCBtZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItQ29udGFjdF9tZSI+wrY8L2E+PC9oND48cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIj5odHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvPC9hPgo8L3A+PGg0IGlkPSJoZHItQWJvdXQiPkFib3V0IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1BYm91dCI+wrY8L2E+PC9oND48cD5Xcml0dGVuIGJ5IERhcmlvIENhc3Rhw7HDqTogPGEgaHJlZj0iaHR0cHM6Ly9kYS5yaW8uaG4iPmh0dHBzOi8vZGEucmlvLmhuPC9hPgo8L3A+PGg0IGlkPSJoZHItTGljZW5zZSI+TGljZW5zZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItTGljZW5zZSI+wrY8L2E+PC9oND48cD5CU0QgMy1DbGF1c2UgbGljZW5zZSwgYXMgR28gbGFuZ3VhZ2UuCjwvcD4KPC9zZWN0aW9uPjxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4Ij4KICAgIDxoMyBpZD0icGtnLWluZGV4IiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEhlYWRlciI+SW5kZXggPGEgaHJlZj0iI3BrZy1pbmRleCI+wrY8L2E+PC9oMz4KCjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleExpc3QiPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhWYXJpYWJsZXMiPjxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj5WYXJpYWJsZXM8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNYXAiPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWFwV2l0aE92ZXJ3cml0ZSI+ZnVuYyBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWVyZ2UiPmZ1bmMgTWVyZ2UoZHN0LCBzcmMgaW50ZXJmYWNle30sIG9wdHMgLi4uZnVuYygqQ29uZmlnKSkgZXJyb3I8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiPmZ1bmMgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aEFwcGVuZFNsaWNlIj5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVycmlkZUVtcHR5U2xpY2UiPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiPmZ1bmMgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhUcmFuc2Zvcm1lcnMiPmZ1bmMgV2l0aFRyYW5zZm9ybWVycyh0cmFuc2Zvcm1lcnMgVHJhbnNmb3JtZXJzKSBmdW5jKCpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aFR5cGVDaGVjayI+ZnVuYyBXaXRoVHlwZUNoZWNrKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhvdXREZXJlZmVyZW5jZSI+ZnVuYyBXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnICpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGUiPgogICAgICAgICAgPGEgaHJlZj0iI0NvbmZpZyI+dHlwZSBDb25maWc8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjVHJhbnNmb3JtZXJzIj50eXBlIFRyYW5zZm9ybWVyczwvYT48L2xpPgo8L3VsPgo8L3NlY3Rpb24+PGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy1jb25zdGFudHMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50c0hlYWRlciI+Q29uc3RhbnRzIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIj7CtjwvYT48L2gzPgoKICA8c2VjdGlvbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1jb25zdGFudHMiPjxwIGNsYXNzPSJEb2N1bWVudGF0aW9uLWVtcHR5Ij5UaGlzIHNlY3Rpb24gaXMgZW1wdHkuPC9wPjwvc2VjdGlvbj4KCiAgPGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy12YXJpYWJsZXMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXZhcmlhYmxlc0hlYWRlciI+VmFyaWFibGVzIDxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj7CtjwvYT48L2gzPgoKICA8c2VjdGlvbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi12YXJpYWJsZXMiPgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uTGluayI+PGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ28uZ28jTDE3Ij5WaWV3IFNvdXJjZTwvYT48L3NwYW4+CiAgICAgIDxwcmU+dmFyICgKPHNwYW4gaWQ9IkVyck5pbEFyZ3VtZW50cyIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyck5pbEFyZ3VtZW50cyAgICAgICAgICAgICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtzcmMgYW5kIGRzdCBtdXN0IG5vdCBiZSBuaWwmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJEaWZmZXJlbnRBcmd1bWVudHNUeXBlcyIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckRpZmZlcmVudEFyZ3VtZW50c1R5cGVzICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtzcmMgYW5kIGRzdCBtdXN0IGJlIG9mIHNhbWUgdHlwZSYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyck5vdFN1cHBvcnRlZCIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyck5vdFN1cHBvcnRlZCAgICAgICAgICAgICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtvbmx5IHN0cnVjdHMsIG1hcHMsIGFuZCBzbGljZXMgYXJlIHN1cHBvcnRlZCYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyckV4cGVjdGVkTWFwQXNEZXN0aW5hdGlvbiIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckV4cGVjdGVkTWFwQXNEZXN0aW5hdGlvbiAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtkc3Qgd2FzIGV4cGVjdGVkIHRvIGJlIGEgbWFwJiMzNDspCjwvc3Bhbj48c3BhbiBpZD0iRXJyRXhwZWN0ZWRTdHJ1Y3RBc0Rlc3RpbmF0aW9uIiBkYXRhLWtpbmQ9InZhcmlhYmxlIj4JRXJyRXhwZWN0ZWRTdHJ1Y3RBc0Rlc3RpbmF0aW9uID0gPGEgaHJlZj0iL2Vycm9ycyI+ZXJyb3JzPC9hPi48YSBocmVmPSIvZXJyb3JzI05ldyI+TmV3PC9hPigmIzM0O2RzdCB3YXMgZXhwZWN0ZWQgdG8gYmUgYSBzdHJ1Y3QmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJOb25Qb2ludGVyQXJndW1lbnQiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJOb25Qb2ludGVyQXJndW1lbnQgICAgICAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7ZHN0IG11c3QgYmUgYSBwb2ludGVyJiMzNDspCjwvc3Bhbj4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5FcnJvcnMgcmVwb3J0ZWQgYnkgTWVyZ28gd2hlbiBpdCBmaW5kcyBpbnZhbGlkIGFyZ3VtZW50cy4KPC9wPgo8L3NlY3Rpb24+CgogIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctZnVuY3Rpb25zIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbnNIZWFkZXIiPkZ1bmN0aW9ucyA8YSBocmVmPSIjcGtnLWZ1bmN0aW9ucyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zIj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvI0wxMzIiPk1hcDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjTWFwIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NYXAgc2V0cyBmaWVsZHMmIzM5OyB2YWx1ZXMgaW4gZHN0IGZyb20gc3JjLgpzcmMgY2FuIGJlIGEgbWFwIHdpdGggc3RyaW5nIGtleXMgb3IgYSBzdHJ1Y3QuIGRzdCBtdXN0IGJlIHRoZSBvcHBvc2l0ZToKaWYgc3JjIGlzIGEgbWFwLCBkc3QgbXVzdCBiZSBhIHZhbGlkIHBvaW50ZXIgdG8gc3RydWN0LiBJZiBzcmMgaXMgYSBzdHJ1Y3QsCmRzdCBtdXN0IGJlIG1hcFtzdHJpbmddaW50ZXJmYWNle30uCkl0IHdvbiYjMzk7dCBtZXJnZSB1bmV4cG9ydGVkIChwcml2YXRlKSBmaWVsZHMgYW5kIHdpbGwgZG8gcmVjdXJzaXZlbHkKYW55IGV4cG9ydGVkIGZpZWxkLgpJZiBkc3QgaXMgYSBtYXAsIGtleXMgd2lsbCBiZSBzcmMgZmllbGRzJiMzOTsgbmFtZXMgaW4gbG93ZXIgY2FtZWwgY2FzZS4KTWlzc2luZyBrZXkgaW4gc3JjIHRoYXQgZG9lc24mIzM5O3QgbWF0Y2ggYSBmaWVsZCBpbiBkc3Qgd2lsbCBiZSBza2lwcGVkLiBUaGlzCmRvZXNuJiMzOTt0IGFwcGx5IGlmIGRzdCBpcyBhIG1hcC4KVGhpcyBpcyBzZXBhcmF0ZWQgbWV0aG9kIGZyb20gTWVyZ2UgYmVjYXVzZSBpdCBpcyBjbGVhbmVyIGFuZCBpdCBrZWVwcyBzYW5lCnNlbWFudGljczogbWVyZ2luZyBlcXVhbCB0eXBlcywgbWFwcGluZyBkaWZmZXJlbnQgKHJlc3RyaWN0ZWQpIHR5cGVzLgo8L3A+CgogIAoKICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwV2l0aE92ZXJ3cml0ZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21hcC5nbyNMMTM5Ij5NYXBXaXRoT3ZlcndyaXRlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNNYXBXaXRoT3ZlcndyaXRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWFwV2l0aE92ZXJ3cml0ZShkc3QsIHNyYyBpbnRlcmZhY2V7fSwgb3B0cyAuLi5mdW5jKCo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KSkgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TWFwV2l0aE92ZXJ3cml0ZSB3aWxsIGRvIHRoZSBzYW1lIGFzIE1hcCBleGNlcHQgdGhhdCBub24tZW1wdHkgZHN0IGF0dHJpYnV0ZXMgd2lsbCBiZSBvdmVycmlkZGVuIGJ5Cm5vbi1lbXB0eSBzcmMgYXR0cmlidXRlIHZhbHVlcy4KRGVwcmVjYXRlZDogVXNlIE1hcCjigKYpIHdpdGggV2l0aE92ZXJyaWRlCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzMTgiPk1lcmdlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNNZXJnZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NZXJnZSB3aWxsIGZpbGwgYW55IGVtcHR5IGZvciB2YWx1ZSB0eXBlIGF0dHJpYnV0ZXMgb24gdGhlIGRzdCBzdHJ1Y3QgdXNpbmcgY29ycmVzcG9uZGluZwpzcmMgYXR0cmlidXRlcyBpZiB0aGV5IHRoZW1zZWx2ZXMgYXJlIG5vdCBlbXB0eS4gZHN0IGFuZCBzcmMgbXVzdCBiZSB2YWxpZCBzYW1lLXR5cGUgc3RydWN0cwphbmQgZHN0IG11c3QgYmUgYSBwb2ludGVyIHRvIHN0cnVjdC4KSXQgd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcyBhbmQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgZmllbGQuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZVdpdGhPdmVyd3JpdGUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzI1Ij5NZXJnZVdpdGhPdmVyd3JpdGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01lcmdlV2l0aE92ZXJ3cml0ZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlV2l0aE92ZXJ3cml0ZShkc3QsIHNyYyBpbnRlcmZhY2V7fSwgb3B0cyAuLi5mdW5jKCo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KSkgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TWVyZ2VXaXRoT3ZlcndyaXRlIHdpbGwgZG8gdGhlIHNhbWUgYXMgTWVyZ2UgZXhjZXB0IHRoYXQgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpbGwgYmUgb3ZlcnJpZGRlbiBieQpub24tZW1wdHkgc3JjIGF0dHJpYnV0ZSB2YWx1ZXMuCkRlcHJlY2F0ZWQ6IHVzZSBNZXJnZSjigKYpIHdpdGggV2l0aE92ZXJyaWRlCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoQXBwZW5kU2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzU5Ij5XaXRoQXBwZW5kU2xpY2U8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhBcHBlbmRTbGljZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uTGFiZWwiPmFkZGVkIGluPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25WZXJzaW9uIj52MC4zLjQ8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoQXBwZW5kU2xpY2Ugd2lsbCBtYWtlIG1lcmdlIGFwcGVuZCBzbGljZXMgaW5zdGVhZCBvZiBvdmVyd3JpdGluZyBpdC4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzMzciPldpdGhPdmVycmlkZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aE92ZXJyaWRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhPdmVycmlkZSB3aWxsIG1ha2UgbWVyZ2Ugb3ZlcnJpZGUgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpdGggbm9uLWVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQ4Ij5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIHdpbGwgbWFrZSBtZXJnZSBvdmVycmlkZSBlbXB0eSBkc3Qgc2xpY2Ugd2l0aCBlbXB0eSBzcmMgc2xpY2UuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQyIj5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uTGFiZWwiPmFkZGVkIGluPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25WZXJzaW9uIj52MC4zLjk8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUgd2lsbCBtYWtlIG1lcmdlIG92ZXJyaWRlIG5vbiBlbXB0eSBkc3QgYXR0cmlidXRlcyB3aXRoIGVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhTbGljZURlZXBDb3B5IiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDM2OSI+V2l0aFNsaWNlRGVlcENvcHk8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTA8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhTbGljZURlZXBDb3B5IHdpbGwgbWVyZ2Ugc2xpY2UgZWxlbWVudCBvbmUgYnkgb25lIHdpdGggT3ZlcndyaXRlIGZsYWcuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDMzMCI+V2l0aFRyYW5zZm9ybWVyczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzIDxhIGhyZWY9IiNUcmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvYT4pIGZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHJhbnNmb3JtZXJzIGFkZHMgdHJhbnNmb3JtZXJzIHRvIG1lcmdlLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIG1lcmdpbmcgb2Ygc29tZSB0eXBlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhUeXBlQ2hlY2siIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzY0Ij5XaXRoVHlwZUNoZWNrPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoVHlwZUNoZWNrIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aFR5cGVDaGVjayhjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHlwZUNoZWNrIHdpbGwgbWFrZSBtZXJnZSBjaGVjayB0eXBlcyB3aGlsZSBvdmVyd3JpdGluZyBpdCAobXVzdCBiZSB1c2VkIHdpdGggV2l0aE92ZXJyaWRlKS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhvdXREZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzNTQiPldpdGhvdXREZXJlZmVyZW5jZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aG91dERlcmVmZXJlbmNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTU8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhvdXREZXJlZmVyZW5jZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRob3V0RGVyZWZlcmVuY2UgcHJldmVudHMgZGVyZWZlcmVuY2luZyBwb2ludGVycyB3aGVuIGV2YWx1YXRpbmcgd2hldGhlciB0aGV5IGFyZSBlbXB0eQooaS5lLiBhIG5vbi1uaWwgcG9pbnRlciBpcyBuZXZlciBjb25zaWRlcmVkIGVtcHR5KS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLXR5cGVzIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlc0hlYWRlciI+VHlwZXMgPGEgaHJlZj0iI3BrZy10eXBlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZXMiPjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNvbmZpZyIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMNDAiPkNvbmZpZzwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ29uZmlnIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgQ29uZmlnIHN0cnVjdCB7CjxzcGFuIGlkPSJDb25maWcuVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZpZWxkIj4JVHJhbnNmb3JtZXJzICAgICAgICAgPGEgaHJlZj0iI1RyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5PdmVyd3JpdGUiIGRhdGEta2luZD0iZmllbGQiPglPdmVyd3JpdGUgICAgICAgICAgICA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5TaG91bGROb3REZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmaWVsZCI+CVNob3VsZE5vdERlcmVmZXJlbmNlIDxhIGhyZWY9Ii9idWlsdGluI2Jvb2wiPmJvb2w8L2E+Cjwvc3Bhbj48c3BhbiBpZD0iQ29uZmlnLkFwcGVuZFNsaWNlIiBkYXRhLWtpbmQ9ImZpZWxkIj4JQXBwZW5kU2xpY2UgICAgICAgICAgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPjxzcGFuIGlkPSJDb25maWcuVHlwZUNoZWNrIiBkYXRhLWtpbmQ9ImZpZWxkIj4JVHlwZUNoZWNrICAgICAgICAgICAgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gY29udGFpbnMgZmlsdGVyZWQgb3IgdW5leHBvcnRlZCBmaWVsZHM8L3NwYW4+Cn08L3ByZT4KICAgIDwvZGl2PgogIAoKICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJUcmFuc2Zvcm1lcnMiIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDUyIj5UcmFuc2Zvcm1lcnM8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1RyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT50eXBlIFRyYW5zZm9ybWVycyBpbnRlcmZhY2Ugewo8c3BhbiBpZD0iVHJhbnNmb3JtZXJzLlRyYW5zZm9ybWVyIiBkYXRhLWtpbmQ9Im1ldGhvZCI+CVRyYW5zZm9ybWVyKDxhIGhyZWY9Ii9yZWZsZWN0Ij5yZWZsZWN0PC9hPi48YSBocmVmPSIvcmVmbGVjdCNUeXBlIj5UeXBlPC9hPikgZnVuYyhkc3QsIHNyYyA8YSBocmVmPSIvcmVmbGVjdCI+cmVmbGVjdDwvYT4uPGEgaHJlZj0iL3JlZmxlY3QjVmFsdWUiPlZhbHVlPC9hPikgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPgo8L3NwYW4+fTwvcHJlPgogICAgPC9kaXY+CiAgCgogIAoKICAgIDwvZGl2Pjwvc2VjdGlvbj48L2Rpdj4gCgoKCgoKCiAgICAgIAogICAgPC9kaXY+CiAgPC9kaXY+CgogICAgICAgIAogICAgICAKICAgICAgCiAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdEZpbGVzIGpzLXVuaXRGaWxlcyI+CiAgICA8aDIgY2xhc3M9IlVuaXRGaWxlcy10aXRsZSIgaWQ9InNlY3Rpb24tc291cmNlZmlsZXMiPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9pbnNlcnRfZHJpdmVfZmlsZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgIFNvdXJjZSBGaWxlcwogICAgICA8YSBjbGFzcz0iVW5pdEZpbGVzLWlkTGluayIgaHJlZj0iI3NlY3Rpb24tc291cmNlZmlsZXMiPsK2PC9hPgogICAgPC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRGaWxlcy10aXRsZUxpbmsiPgogICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby90cmVlL3YwLjMuMTYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5WaWV3IGFsbDwvYT4KICAgIDwvZGl2PgogICAgPGRpdj4KICAgICAgPHVsIGNsYXNzPSJVbml0RmlsZXMtZmlsZUxpc3QiPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2RvYy5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJkb2MuZ28iPmRvYy5nbzwvYT4KICAgICAgICAgIDwvbGk+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9Im1hcC5nbyI+bWFwLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJtZXJnZS5nbyI+bWVyZ2UuZ288L2E+CiAgICAgICAgICA8L2xpPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdvLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9Im1lcmdvLmdvIj5tZXJnby5nbzwvYT4KICAgICAgICAgIDwvbGk+PC91bD4KICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgPC9kaXY+CiAgPC9kaXY+CjwvYXJ0aWNsZT4KICAgIDxmb290ZXIgY2xhc3M9ImdvLU1haW4tZm9vdGVyIj48L2Zvb3Rlcj4KICA8L21haW4+CgogICAgCiAgPGZvb3RlciBjbGFzcz0iZ28tRm9vdGVyIj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtzIj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFdoeSBHbwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVXNlIENhc2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyNjYXNlLXN0dWRpZXMiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDYXNlIFN0dWRpZXMKICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Gb290ZXItbGlua0NvbHVtbiI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9sZWFybi5nby5kZXYvIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsgZ28tRm9vdGVyLWxpbmstLXByaW1hcnkiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR2V0IFN0YXJ0ZWQKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wbGF5LmdvbGFuZy5vcmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBQbGF5Z3JvdW5kCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdG91ci5nb2xhbmcub3JnIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVG91cgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvZ28/dGFiPU5ld2VzdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFN0YWNrIE92ZXJmbG93CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBIZWxwCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldiIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9zdGQiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdGFuZGFyZCBMaWJyYXJ5CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9nb2xhbmcub3JnL3giIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdWItcmVwb3NpdG9yaWVzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldi9hYm91dCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEFib3V0IEdvIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3Byb2plY3QiIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBBYm91dAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kbC8iIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+RG93bmxvYWQ8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5CbG9nPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vaXNzdWVzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgSXNzdWUgVHJhY2tlcgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZGV2ZWwvcmVsZWFzZS5odG1sIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2Jsb2cuZ29sYW5nLm9yZy9nby1icmFuZCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEJyYW5kIEd1aWRlbGluZXMKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29uZHVjdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIENvZGUgb2YgQ29uZHVjdAogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50d2l0dGVyLmNvbS9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDb25uZWN0CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFR3aXR0ZXIKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5HaXRIdWI8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTbGFjawogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3JlZGRpdC5jb20vci9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICByL2dvbGFuZwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIE1lZXR1cAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvbGFuZ3dlZWtseS5jb20vIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR29sYW5nIFdlZWtseQogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1ib3R0b20iPgogICAgICA8aW1nIGNsYXNzPSJnby1Gb290ZXItZ29waGVyIiAgd2lkdGg9IjE0MzEiIGhlaWdodD0iOTAxIgogICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9nb3BoZXIvcGlsb3QtYnVzdC0xNDMxeDkwMS5zdmciIGFsdD0iR29waGVyIGluIGZsaWdodCBnb2dnbGVzIj4KICAgICAgPHVsIGNsYXNzPSJnby1Gb290ZXItbGlzdFJvdyI+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29weXJpZ2h0IiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5Db3B5cmlnaHQ8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90b3MiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPlRlcm1zIG9mIFNlcnZpY2U8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20vaW50bC9lbi9wb2xpY2llcy9wcml2YWN5LyIgZGF0YS1ndG1jPSJmb290ZXIgbGluayIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICAgIFByaXZhY3kgUG9saWN5CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zL3BrZ3NpdGUtZmVlZGJhY2siIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIgogICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgICBSZXBvcnQgYW4gSXNzdWUKICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iZ28tRm9vdGVyLWxpc3RJdGVtIj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLXRvZ2dsZVRoZW1lIGpzLXRvZ2dsZVRoZW1lIiBhcmlhLWxhYmVsPSJUb2dnbGUgdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImF1dG8iIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzZfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJTeXN0ZW0gdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImRhcmsiIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzJfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJEYXJrIHRoZW1lIj4KICAgICAgICAgICAgPGltZyBkYXRhLXZhbHVlPSJsaWdodCIgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xpZ2h0X21vZGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJMaWdodCB0aGVtZSI+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLWtleWJvYXJkIGpzLW9wZW5TaG9ydGN1dHMiIGFyaWEtbGFiZWw9Ik9wZW4gc2hvcmN1dHMgbW9kYWwiPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9rZXlib2FyZF9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgICA8YSBjbGFzcz0iZ28tRm9vdGVyLWdvb2dsZUxvZ28iIGhyZWY9Imh0dHBzOi8vZ29vZ2xlLmNvbSIgdGFyZ2V0PSJfYmxhbmsicmVsPSJub29wZW5lciIKICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgIDxpbWcgY2xhc3M9ImdvLUZvb3Rlci1nb29nbGVMb2dvSW1nIiBoZWlnaHQ9IjI0IiB3aWR0aD0iNzIiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nb29nbGUtd2hpdGUuc3ZnIiBhbHQ9Ikdvb2dsZSBsb2dvIj4KICAgICAgPC9hPgogICAgPC9kaXY+CiAgPC9mb290ZXI+CgogICAgCiAgPGRpYWxvZyBpZD0ianVtcC10by1tb2RhbCIgY2xhc3M9Ikp1bXBEaWFsb2cgZ28tTW9kYWwgZ28tTW9kYWwtLW1kIGpzLW1vZGFsIj4KICAgIDxmb3JtIG1ldGhvZD0iZGlhbG9nIiBkYXRhLWdtdGM9Imp1bXAgdG8gZm9ybSIgYXJpYS1sYWJlbD0iSnVtcCB0byBJZGVudGlmaWVyIj4KICAgICAgPGRpdiBjbGFzcz0iRGlhbG9nLXRpdGxlIGdvLU1vZGFsLWhlYWRlciI+CiAgICAgICAgPGgyPkp1bXAgdG88L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctZmlsdGVyIj4KICAgICAgICA8aW5wdXQgY2xhc3M9Ikp1bXBEaWFsb2ctaW5wdXQgZ28tSW5wdXQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB0eXBlPSJ0ZXh0Ij4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctYm9keSBnby1Nb2RhbC1ib2R5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJKdW1wRGlhbG9nLWxpc3QiPjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tTW9kYWwtYWN0aW9ucyI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ28tQnV0dG9uIiBkYXRhLXRlc3QtaWQ9ImNsb3NlLWRpYWxvZyI+Q2xvc2U8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CiAgPC9kaWFsb2c+CgogIDxkaWFsb2cgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZyBnby1Nb2RhbCBnby1Nb2RhbC0tc20ganMtbW9kYWwiPgogICAgPGZvcm0gbWV0aG9kPSJkaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJnby1Nb2RhbC1oZWFkZXIiPgogICAgICAgIDxoMj5LZXlib2FyZCBzaG9ydGN1dHM8L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWJvZHkiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4/PC9zdHJvbmc+PC90ZD48dGQ+IDogVGhpcyBtZW51PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4vPC9zdHJvbmc+PC90ZD48dGQ+IDogU2VhcmNoIHNpdGU8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJTaG9ydGN1dHNEaWFsb2cta2V5Ij4KICAgICAgICAgICAgICA8c3Ryb25nPmY8L3N0cm9uZz4gb3IgPHN0cm9uZz5GPC9zdHJvbmc+PC90ZD48dGQ+IDogSnVtcCB0bzwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZy1rZXkiPjxzdHJvbmc+eTwvc3Ryb25nPiBvciA8c3Ryb25nPlk8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgIDx0ZD4gOiBDYW5vbmljYWwgVVJMPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWFjdGlvbnMiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiIgZGF0YS10ZXN0LWlkPSJjbG9zZS1kaWFsb2ciPkNsb3NlPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogIDwvZGlhbG9nPgoKICAgIAogICAgICA8c2VjdGlvbiBjbGFzcz0iQ29va2llLW5vdGljZSBqcy1jb29raWVOb3RpY2UiPgogICAgICAgIDxkaXY+Z28uZGV2IHVzZXMgY29va2llcyBmcm9tIEdvb2dsZSB0byBkZWxpdmVyIGFuZCBlbmhhbmNlIHRoZSBxdWFsaXR5IG9mIGl0cyBzZXJ2aWNlcyBhbmQgdG8KICAgICAgICBhbmFseXplIHRyYWZmaWMuIDxhIHRhcmdldD1fYmxhbmsgaHJlZj0iaHR0cHM6Ly9wb2xpY2llcy5nb29nbGUuY29tL3RlY2hub2xvZ2llcy9jb29raWVzIj5MZWFybiBtb3JlLjwvYT48L2Rpdj4KICAgICAgICA8ZGl2PjxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiI+T2theTwvYnV0dG9uPjwvZGl2PgogICAgICA8L3NlY3Rpb24+CiAgICAKICAgIAogICAgICA8c2NyaXB0PgogICAgICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBpZiB0aGUgcXVlcnlTZWxlY3RvciBjYW7igJl0IGZpbmQgdGhlIGVsZW1lbnQKICAgICAgICBjb25zdCBndG1JZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1ndG1JRCcpLmRhdGFzZXQuZ3RtaWQ7CiAgICAgICAgaWYgKCFndG1JZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb29nbGUgVGFnIE1hbmFnZXIgSUQgbm90IGZvdW5kJyk7CiAgICAgICAgfQogICAgICAgIGxvYWRTY3JpcHQoYGh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0ke2d0bUlkfWApOwogICAgICA8L3NjcmlwdD4KICAgICAgPG5vc2NyaXB0PgogICAgICAgIDxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1XOE1WUVhHIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+CiAgICAgICAgPC9pZnJhbWU+CiAgICAgIDwvbm9zY3JpcHQ+CiAgICAKICAgIAogIAogIDxkaXYgY2xhc3M9ImpzLWNhbm9uaWNhbFVSTFBhdGgiIGRhdGEtY2Fub25pY2FsLXVybC1wYXRoPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvQHYwLjMuMTYiIGhpZGRlbj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJqcy1wbGF5Z3JvdW5kVmFycyIgZGF0YS1tb2R1bGVwYXRoPSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIGRhdGEtdmVyc2lvbj0idjAuMy4xNiIgaGlkZGVuPjwvZGl2PgogIDxzY3JpcHQ+CiAgICBsb2FkU2NyaXB0KCcvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLmpzJykKICA8L3NjcmlwdD4KCiAgPHNjcmlwdD4KICAgIGxvYWRTY3JpcHQoJy9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0LmpzJykKICA8L3NjcmlwdD4KCiAgPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.16.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2307432324747384924'
      X-Datadog-Parent-Id:
      - '2823950517616575374'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '191'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:31:59 GMT
      Expires:
      - Thu, 20 Jul 2023 01:31:59 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '50'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.16","Time":"2023-04-02T14:27:58Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v0.3.16","Hash":"14fe2b165b83359196f820886a2b24f2771729e9"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '219735587260310001'
      X-Datadog-Parent-Id:
      - '3696228663825212318'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:49 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGRhdGEtbGF5b3V0PSJyZXNwb25zaXZlIiBkYXRhLWxvY2FsPSIiPgogIDxoZWFkPgogICAgCiAgICA8c2NyaXB0PgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB3aW5kb3cuX19lcnI9ZnVuY3Rpb24gZihlKXtmLnA9Zi5wfHxbXTtmLnAucHVzaChlKX0pOwogICAgPC9zY3JpcHQ+CiAgICA8c2NyaXB0PgogICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5jb29raWUubWF0Y2goL3ByZWZlcnMtY29sb3Itc2NoZW1lPShsaWdodHxkYXJrfGF1dG8pLyk/LlsxXQogICAgICAgIGlmICh0aGVtZSkgewogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLnNldEF0dHJpYnV0ZSgnZGF0YS10aGVtZScsIHRoZW1lKTsKICAgICAgICB9CiAgICAgIH0oKSkKICAgIDwvc2NyaXB0PgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDxtZXRhIG5hbWU9IkRlc2NyaXB0aW9uIiBjb250ZW50PSJBIGhlbHBlciB0byBtZXJnZSBzdHJ1Y3RzIGFuZCBtYXBzIGluIEdvbGFuZy4iPgogICAgCiAgICA8bWV0YSBjbGFzcz0ianMtZ3RtSUQiIGRhdGEtZ3RtaWQ9IkdUTS1XOE1WUVhHIj4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9zaGFyZWQvaWNvbi9mYXZpY29uLmljbyI+CiAgICAKICAKICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3BrZy5nby5kZXYvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIj4KICAKCiAgICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL2Zyb250ZW5kLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIAogIDx0aXRsZT5tZXJnbyBwYWNrYWdlIC0gZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIC0gR28gUGFja2FnZXM8L3RpdGxlPgoKICAgIAogIDxsaW5rIGhyZWY9Ii9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0Lm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAKICA8bGluayBocmVmPSIvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLm1pbi5jc3M/dmVyc2lvbj1wcm9kLWZyb250ZW5kLTAwMDc5LXBleCIgcmVsPSJzdHlsZXNoZWV0Ij4KCgogIDwvaGVhZD4KICA8Ym9keT4KICAgIAogICAgPHNjcmlwdD4KICAgICAgZnVuY3Rpb24gbG9hZFNjcmlwdChzcmMsIG1vZCA9IHRydWUpIHsKICAgICAgICBsZXQgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgIHMuc3JjID0gc3JjOwogICAgICAgIGlmIChtb2QpIHsKICAgICAgICAgIHMudHlwZSA9ICdtb2R1bGUnOwogICAgICAgICAgcy5hc3luYyA9IHRydWU7CiAgICAgICAgICBzLmRlZmVyID0gdHJ1ZQogICAgICAgIH0KICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpOwogICAgICB9CiAgICAgIGxvYWRTY3JpcHQoIi90aGlyZF9wYXJ0eS9kaWFsb2ctcG9seWZpbGwvZGlhbG9nLXBvbHlmaWxsLmpzIiwgZmFsc2UpCiAgICAgIGxvYWRTY3JpcHQoIi9zdGF0aWMvZnJvbnRlbmQvZnJvbnRlbmQuanMiKTsKICAgIDwvc2NyaXB0PgogICAgCiAgPGhlYWRlciBjbGFzcz0iZ28tSGVhZGVyIGdvLUhlYWRlci0tZnVsbCBqcy1zaXRlSGVhZGVyIj4KICAgIDxkaXYgY2xhc3M9ImdvLUhlYWRlci1pbm5lciBnby1IZWFkZXItaW5uZXItLWRhcmsiPgogICAgICA8bmF2IGNsYXNzPSJnby1IZWFkZXItbmF2Ij4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi8iIGNsYXNzPSJqcy1oZWFkZXJMb2dvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIgogICAgICAgICAgICBkYXRhLXRlc3QtaWQ9ImdvLWhlYWRlci1sb2dvLWxpbmsiPgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSGVhZGVyLWxvZ28iIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nby13aGl0ZS5zdmciIGFsdD0iR28iPgogICAgICAgIDwvYT4KICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItcmlnaHRDb250ZW50Ij4KICAgICAgICAgIAo8ZGl2IGNsYXNzPSJnby1TZWFyY2hGb3JtIGpzLXNlYXJjaEZvcm0iPgogIDxmb3JtCiAgICBjbGFzcz0iZ28tSW5wdXRHcm91cCBnby1TaG9ydGN1dEtleSBnby1TZWFyY2hGb3JtLWZvcm0iCiAgICBhY3Rpb249Ii9zZWFyY2giCiAgICBkYXRhLXNob3J0Y3V0PSIvIgogICAgZGF0YS1zaG9ydGN1dC1hbHQ9InNlYXJjaCIKICAgIGRhdGEtZ3RtYz0ic2VhcmNoIGZvcm0iCiAgICBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIKICAgIHJvbGU9InNlYXJjaCIKICA+CiAgICA8aW5wdXQgbmFtZT0icSIgY2xhc3M9ImdvLUlucHV0IGpzLXNlYXJjaEZvY3VzIiBhcmlhLWxhYmVsPSJTZWFyY2ggZm9yIGEgcGFja2FnZSIgdHlwZT0ic2VhcmNoIgogICAgICAgIGF1dG9jYXBpdGFsaXplPSJvZmYiIGF1dG9jb21wbGV0ZT0ib2ZmIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIKICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIHBhY2thZ2VzIG9yIHN5bWJvbHMiCiAgICAgICAgdmFsdWU9IiIgLz4KICAgIDxpbnB1dCBuYW1lPSJtIiB2YWx1ZT0iIiBoaWRkZW4+CiAgICA8YnV0dG9uIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbnZlcnRlZCIgYXJpYS1sYWJlbD0iU3VibWl0IHNlYXJjaCI+CiAgICAgIDxpbWcKICAgICAgICBjbGFzcz0iZ28tSWNvbiIKICAgICAgICBoZWlnaHQ9IjI0IgogICAgICAgIHdpZHRoPSIyNCIKICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vc2VhcmNoX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgYWx0PSIiCiAgICAgIC8+CiAgICA8L2J1dHRvbj4KICA8L2Zvcm0+CiAgPGJ1dHRvbiBjbGFzcz0iZ28tU2VhcmNoRm9ybS1leHBhbmRTZWFyY2gganMtZXhwYW5kU2VhcmNoIiBkYXRhLWd0bWM9Im5hdiBidXR0b24iCiAgICAgIGFyaWEtbGFiZWw9Ik9wZW4gc2VhcmNoIiBkYXRhLXRlc3QtaWQ9ImV4cGFuZC1zZWFyY2giPgogICAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1pbnZlcnRlZCIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9zZWFyY2hfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgoKICA8L2J1dHRvbj4KPC9kaXY+CgogICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItbWVudSI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vYXJyb3dfZHJvcF9kb3duX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0ic3VibWVudSBkcm9wZG93biBpY29uIj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnby1IZWFkZXItc3VibWVudSBnby1IZWFkZXItc3VibWVudS0td2h5IGpzLWRlc2t0b3Atc3VibWVudS1ob3ZlciIgYXJpYS1sYWJlbD0ic3VibWVudSI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvc29sdXRpb25zI2Nhc2Utc3R1ZGllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5DYXNlIFN0dWRpZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHA+Q29tbW9uIHByb2JsZW1zIGNvbXBhbmllcyBzb2x2ZSB3aXRoIEdvPC9wPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyN1c2UtY2FzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+VXNlIENhc2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxwPlN0b3JpZXMgYWJvdXQgaG93IGFuZCB3aHkgY29tcGFuaWVzIHVzZSBHbzwvcD4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlNlY3VyaXR5IFBvbGljeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8cD5Ib3cgR28gY2FuIGhlbHAga2VlcCB5b3Ugc2VjdXJlIGJ5IGRlZmF1bHQ8L3A+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyIgZGF0YS1ndG1jPSJuYXYgbGluayI+TGVhcm48L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0ianMtZGVza3RvcC1tZW51LWhvdmVyIiBocmVmPSIjIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj4KICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Fycm93X2Ryb3BfZG93bl9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9InN1Ym1lbnUgZHJvcGRvd24gaWNvbiI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnUgZ28tSGVhZGVyLXN1Ym1lbnUtLWRvY3MganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZWZmZWN0aXZlX2dvIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVmZmVjdGl2ZSBHbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5UaXBzIGZvciB3cml0aW5nIGNsZWFyLCBwZXJmb3JtYW50LCBhbmQgaWRpb21hdGljIEdvIGNvZGU8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+R28gVXNlciBNYW51YWw8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+QSBjb21wbGV0ZSBpbnRyb2R1Y3Rpb24gdG8gYnVpbGRpbmcgc29mdHdhcmUgd2l0aCBHbzwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wa2cuZ28uZGV2L3N0ZCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdGFuZGFyZCBsaWJyYXJ5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPlJlZmVyZW5jZSBkb2N1bWVudGF0aW9uIGZvciBHbydzIHN0YW5kYXJkIGxpYnJhcnk8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2RvYy9kZXZlbC9yZWxlYXNlIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlJlbGVhc2UgTm90ZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TGVhcm4gd2hhdCdzIG5ldyBpbiBlYWNoIEdvIHJlbGVhc2U8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLW1lbnVJdGVtIGdvLUhlYWRlci1tZW51SXRlbS0tYWN0aXZlIj4KICAgICAgICAgICAgICA8YSBocmVmPSIvIiBkYXRhLWd0bWM9Im5hdiBsaW5rIj5QYWNrYWdlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItbWVudUl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJqcy1kZXNrdG9wLW1lbnUtaG92ZXIiIGhyZWY9IiMiIGRhdGEtZ3RtYz0ibmF2IGxpbmsiPgogICAgICAgICAgICAgICAgQ29tbXVuaXR5CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hcnJvd19kcm9wX2Rvd25fZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJzdWJtZW51IGRyb3Bkb3duIGljb24iPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51IGdvLUhlYWRlci1zdWJtZW51LS1jb21tdW5pdHkganMtZGVza3RvcC1zdWJtZW51LWhvdmVyIiBhcmlhLWxhYmVsPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90YWxrcy8iPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVjb3JkZWQgVGFsa3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VmlkZW9zIGZyb20gcHJpb3IgZXZlbnRzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NZWV0dXBzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+TWVldCBvdGhlciBsb2NhbCBHbyBkZXZlbG9wZXJzPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL3dpa2kvQ29uZmVyZW5jZXMiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29uZmVyZW5jZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8cD5MZWFybiBhbmQgbmV0d29yayB3aXRoIEdvIGRldmVsb3BlcnMgZnJvbSBhcm91bmQgdGhlIHdvcmxkPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tSGVhZGVyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9ibG9nIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkdvIGJsb2c8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPHA+VGhlIEdvIHByb2plY3QncyBvZmZpY2lhbCBibG9nLjwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLUhlYWRlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5HbyBwcm9qZWN0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPkdldCBoZWxwIGFuZCBzdGF5IGluZm9ybWVkIGZyb20gR288L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1IZWFkZXItc3VibWVudUl0ZW0iPgogICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIEdldCBjb25uZWN0ZWQKICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb25zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9nL2dvbGFuZy1udXRzIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ29vZ2xlLWdyb3Vwcy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ2l0aHViLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvdHdpdHRlci5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL3d3dy5yZWRkaXQuY29tL3IvZ29sYW5nLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3JlZGRpdC5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2ludml0ZS5zbGFjay5nb2xhbmdicmlkZ2Uub3JnLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3NsYWNrLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vY29sbGVjdGl2ZXMvZ28iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9zdGFjay1vdmVyZmxvdy5zdmciIC8+PC9hPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJnby1IZWFkZXItbmF2T3BlbiBqcy1oZWFkZXJNZW51QnV0dG9uIGdvLUhlYWRlci1uYXZPcGVuLS13aGl0ZSIgZGF0YS1ndG1jPSJuYXYgYnV0dG9uIiBhcmlhLWxhYmVsPSJPcGVuIG5hdmlnYXRpb24iPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgogICAgPC9kaXY+CiAgPC9oZWFkZXI+CiAgPGFzaWRlIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyIGpzLWhlYWRlciI+CiAgICA8bmF2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItaGVhZGVyIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi8iPgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1sb2dvIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vZ28tYmx1ZS5zdmciIGFsdD0iR28uIj4KICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0ganMtbW9iaWxlLXN1Ym5hdi10cmlnZ2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItaGFzU3VibmF2Ij4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgPHNwYW4+V2h5IEdvPC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXIgZ28tTmF2aWdhdGlvbkRyYXdlci1zdWJtZW51SXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1uYXYiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbmF2aWdhdGVfYmVmb3JlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICAgIFdoeSBHbwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0Ij4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjY2FzZS1zdHVkaWVzIj4KICAgICAgICAgICAgICAgICAgICAgIENhc2UgU3R1ZGllcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIj4KICAgICAgICAgICAgICAgICAgICAgIFVzZSBDYXNlcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zZWN1cml0eS9wb2xpY3kvIj4KICAgICAgICAgICAgICAgICAgICAgIFNlY3VyaXR5IFBvbGljeQogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2xlYXJuLyI+TGVhcm48L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIGpzLW1vYmlsZS1zdWJuYXYtdHJpZ2dlciBnby1OYXZpZ2F0aW9uRHJhd2VyLWhhc1N1Ym5hdiI+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgIDxzcGFuPkRvY3M8L3NwYW4+CiAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX25leHRfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBnby1OYXZpZ2F0aW9uRHJhd2VyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IgogICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL25hdmlnYXRlX2JlZm9yZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgPC9pPgogICAgICAgICAgICAgICAgICAgIERvY3MKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2VmZmVjdGl2ZV9nbyI+CiAgICAgICAgICAgICAgICAgICAgICBFZmZlY3RpdmUgR28KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jLyI+CiAgICAgICAgICAgICAgICAgICAgICBHbyBVc2VyIE1hbnVhbAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3BrZy5nby5kZXYvc3RkIj4KICAgICAgICAgICAgICAgICAgICAgIFN0YW5kYXJkIGxpYnJhcnkKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvZG9jL2RldmVsL3JlbGVhc2UiPgogICAgICAgICAgICAgICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSBnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtLS1hY3RpdmUiPgogICAgICAgICAgICA8YSBocmVmPSIvIj5QYWNrYWdlczwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0ganMtbW9iaWxlLXN1Ym5hdi10cmlnZ2VyIGdvLU5hdmlnYXRpb25EcmF3ZXItaGFzU3VibmF2Ij4KICAgICAgICAgICAgPGEgaHJlZj0iIyI+CiAgICAgICAgICAgICAgPHNwYW4+Q29tbXVuaXR5PC9zcGFuPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9uZXh0X2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlciBnby1OYXZpZ2F0aW9uRHJhd2VyLXN1Ym1lbnVJdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLW5hdiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9uYXZpZ2F0ZV9iZWZvcmVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiPgogICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICBDb21tdW5pdHkKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdCI+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvdGFsa3MvIj4KICAgICAgICAgICAgICAgICAgICAgIFJlY29yZGVkIFRhbGtzCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm1lZXR1cC5jb20vcHJvL2dvIj4KICAgICAgICAgICAgICAgICAgICAgIE1lZXR1cHMKICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xhdW5jaF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICAgICAgICAgICAgICA8L2k+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vd2lraS9Db25mZXJlbmNlcyI+CiAgICAgICAgICAgICAgICAgICAgICBDb25mZXJlbmNlcwogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0IiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vbGF1bmNoX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgICAgICAgICAgICAgICAgIDwvaT4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ28tTmF2aWdhdGlvbkRyYXdlci1saXN0SXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyI+CiAgICAgICAgICAgICAgICAgICAgICBHbyBibG9nCiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItbGlzdEl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiPgogICAgICAgICAgICAgICAgICAgICAgR28gcHJvamVjdAogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnby1OYXZpZ2F0aW9uRHJhd2VyLWxpc3RJdGVtIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2PkdldCBjb25uZWN0ZWQ8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ28tSGVhZGVyLXNvY2lhbEljb24iIGhyZWY9Imh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZy9nb2xhbmctbnV0cyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL2dvb2dsZS1ncm91cHMuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nIj48aW1nIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9zb2NpYWwvZ2l0aHViLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9nb2xhbmciPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC90d2l0dGVyLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2dvbGFuZy8iPjxpbWcgc3JjPSIvc3RhdGljL3NoYXJlZC9sb2dvL3NvY2lhbC9yZWRkaXQuc3ZnIiAvPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvLUhlYWRlci1zb2NpYWxJY29uIiBocmVmPSJodHRwczovL2ludml0ZS5zbGFjay5nb2xhbmdicmlkZ2Uub3JnLyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3NsYWNrLnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnby1IZWFkZXItc29jaWFsSWNvbiIgaHJlZj0iaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9jb2xsZWN0aXZlcy9nbyI+PGltZyBzcmM9Ii9zdGF0aWMvc2hhcmVkL2xvZ28vc29jaWFsL3N0YWNrLW92ZXJmbG93LnN2ZyIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvbGk+CiAgICAgIDwvdWw+CiAgICA8L25hdj4KICA8L2FzaWRlPgogIDxkaXYgY2xhc3M9ImdvLU5hdmlnYXRpb25EcmF3ZXItc2NyaW0ganMtc2NyaW0iIHJvbGU9InByZXNlbnRhdGlvbiI+PC9kaXY+CgogICAgCiAgPG1haW4gY2xhc3M9ImdvLU1haW4iPgogICAgPGRpdiBjbGFzcz0iZ28tTWFpbi1iYW5uZXIiIHJvbGU9ImFsZXJ0Ij48L2Rpdj4KICAgIDxoZWFkZXIgY2xhc3M9ImdvLU1haW4taGVhZGVyIGpzLW1haW5IZWFkZXIiPgogIAogIAogIDxuYXYgY2xhc3M9ImdvLU1haW4taGVhZGVyQnJlYWRjcnVtYiBnby1CcmVhZGNydW1iIiBhcmlhLWxhYmVsPSJCcmVhZGNydW1iIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYiI+CiAgICA8b2w+CiAgICAgIAogICAgICAgIAogICAgICAgICAgPGxpIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1icmVhZGNydW1iSXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGRhdGEtZ3RtYz0iYnJlYWRjcnVtYiBsaW5rIj5EaXNjb3ZlciBQYWNrYWdlczwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnb0B2MC4zLjE2IiBkYXRhLWd0bWM9ImJyZWFkY3J1bWIgbGluayIgYXJpYS1jdXJyZW50PSJsb2NhdGlvbiIKICAgICAgICAgICAgICBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItYnJlYWRjcnVtYkN1cnJlbnQiPgogICAgICAgICAgICBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28KICAgICAgICAgIDwvYT4KICAgICAgICAgIAogICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWlubGluZSBnby1DbGlwYm9hcmQganMtY2xpcGJvYXJkIgogICAgICAgICAgICAgIHRpdGxlPSJDb3B5IHBhdGggdG8gY2xpcGJvYXJkLiYjMTA7JiMxMDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iCiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ29weSBQYXRoIHRvIENsaXBib2FyZCIKICAgICAgICAgICAgICBkYXRhLXRvLWNvcHk9ImdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgICAgICBkYXRhLWd0bWM9ImJyZWFkY3J1bWJzIGJ1dHRvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIyNCIKICAgICAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb250ZW50X2NvcHlfZ21fZ3JleV8yNGRwLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAKICAgICAgICAKICAgICAgPC9saT4KICAgIDwvb2w+CiAgPC9uYXY+CgogIDxkaXYgY2xhc3M9ImdvLU1haW4taGVhZGVyQ29udGVudCI+CiAgICAKICA8ZGl2IGNsYXNzPSJnby1NYWluLWhlYWRlclRpdGxlIGpzLXN0aWNreUhlYWRlciI+CiAgICA8YSBjbGFzcz0iZ28tTWFpbi1oZWFkZXJMb2dvIiBocmVmPSJodHRwczovL2dvLmRldi8iIGFyaWEtaGlkZGVuPSJ0cnVlIiB0YWJpbmRleD0iLTEiIGRhdGEtZ3RtYz0iaGVhZGVyIGxpbmsiIGFyaWEtbGFiZWw9IkxpbmsgdG8gR28gSG9tZXBhZ2UiPgogICAgICA8aW1nIGhlaWdodD0iNzgiIHdpZHRoPSIyMDciIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nby1ibHVlLnN2ZyIgYWx0PSJHbyI+CiAgICA8L2E+CiAgICA8aDEgY2xhc3M9IlVuaXRIZWFkZXItdGl0bGVIZWFkaW5nIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItdGl0bGUiPm1lcmdvPC9oMT4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1pbnZlcnRlZCI+cGFja2FnZTwvc3Bhbj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iZ28tQ2hpcCBnby1DaGlwLS1pbnZlcnRlZCI+bW9kdWxlPC9zcGFuPgogICAgCiAgICAKICAgICAgCiAgICAgICAgPGJ1dHRvbgogICAgICAgICAgY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLWlubGluZSBnby1DbGlwYm9hcmQganMtY2xpcGJvYXJkIgogICAgICAgICAgdGl0bGU9IkNvcHkgcGF0aCB0byBjbGlwYm9hcmQuJiMxMDsmIzEwO2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNvcHkgUGF0aCB0byBDbGlwYm9hcmQiCiAgICAgICAgICBkYXRhLXRvLWNvcHk9ImdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIKICAgICAgICAgIGRhdGEtZ3RtYz0idGl0bGUgYnV0dG9uIgogICAgICAgICAgdGFiaW5kZXg9Ii0xIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0tYWNjZW50ZWQiCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2NvbnRlbnRfY29weV9nbV9ncmV5XzI0ZHAuc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgIC8+CiAgICAgICAgPC9idXR0b24+CiAgICAgIAogICAgCiAgPC9kaXY+CgogICAgCiAgPGRpdiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxzIj4KICAgIAogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItdmVyc2lvbiI+CiAgICA8YSBocmVmPSI/dGFiPXZlcnNpb25zIiBhcmlhLWxhYmVsPSJHbyB0byBWZXJzaW9ucyIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+PHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPlZlcnNpb246IDwvc3Bhbj52MC4zLjE2PC9hPgogICAgCiAgICA8c3BhbiBjbGFzcz0iRGV0YWlsc0hlYWRlci1iYWRnZS0tbGF0ZXN0IiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItbWlub3JWZXJzaW9uQmFubmVyIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgRGV0YWlsc0hlYWRlci1zcGFuLS1sYXRlc3QiPkxhdGVzdDwvc3Bhbj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgRGV0YWlsc0hlYWRlci1zcGFuLS1ub3RBdExhdGVzdCI+CiAgICAgICAgTGF0ZXN0CiAgICAgICAgCiAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgIDxzdW1tYXJ5PgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9hbGVydF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9Ildhcm5pbmciPgogICAgPC9zdW1tYXJ5PgogICAgPHA+VGhpcyBwYWNrYWdlIGlzIG5vdCBpbiB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgaXRzIG1vZHVsZS48L3A+CiAgPC9kZXRhaWxzPgoKICAgICAgPC9zcGFuPgogICAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiBhcmlhLWxhYmVsPSJHbyB0byBMYXRlc3QgVmVyc2lvbiIgZGF0YS1ndG1jPSJoZWFkZXIgbGluayI+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdvLUNoaXAgZ28tQ2hpcC0tYWxlcnQgRGV0YWlsc0hlYWRlci1zcGFuLS1nb1RvTGF0ZXN0Ij5HbyB0byBsYXRlc3Q8L3NwYW4+CiAgICAgIDwvYT4KICAgIDwvc3Bhbj4KICA8L3NwYW4+CgogICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItY29tbWl0VGltZSI+CiAgICBQdWJsaXNoZWQ6IEFwciAgMiwgMjAyMwogIDwvc3Bhbj4KCiAgICAgIAogIDxzcGFuIGNsYXNzPSJnby1NYWluLWhlYWRlckRldGFpbEl0ZW0iIGRhdGEtdGVzdC1pZD0iVW5pdEhlYWRlci1saWNlbnNlcyI+CiAgICBMaWNlbnNlOiA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1saWNlbnNlcyIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWxpY2Vuc2UiCiAgICAgICAgICAgIGFyaWEtbGFiZWw9IkdvIHRvIExpY2Vuc2VzIiBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj5CU0QtMy1DbGF1c2U8L2E+CiAgICAgIAogICAgCiAgPC9zcGFuPgoKICAgICAgCiAgICAgICAgCiAgPHNwYW4gY2xhc3M9ImdvLU1haW4taGVhZGVyRGV0YWlsSXRlbSIgZGF0YS10ZXN0LWlkPSJVbml0SGVhZGVyLWltcG9ydHMiPgogICAgPGEgaHJlZj0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9aW1wb3J0cyIgYXJpYS1sYWJlbD0iR28gdG8gSW1wb3J0cyIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgPHNwYW4gY2xhc3M9ImdvLXRleHRTdWJ0bGUiPkltcG9ydHM6IDwvc3Bhbj41CiAgICA8L2E+CiAgPC9zcGFuPgoKICAgICAgICAKICA8c3BhbiBjbGFzcz0iZ28tTWFpbi1oZWFkZXJEZXRhaWxJdGVtIiBkYXRhLXRlc3QtaWQ9IlVuaXRIZWFkZXItaW1wb3J0ZWRieSI+CiAgICA8YSBocmVmPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRlZGJ5IiBhcmlhLWxhYmVsPSJHbyB0byBJbXBvcnRlZCBCeSIKICAgICAgICBkYXRhLWd0bWM9ImhlYWRlciBsaW5rIj4KICAgICAgIDxzcGFuIGNsYXNzPSJnby10ZXh0U3VidGxlIj5JbXBvcnRlZCBieTogPC9zcGFuPjAKICAgIDwvYT4KICA8L3NwYW4+CgogICAgICAKICAgIAogIDwvZGl2PgogIAogIDxkaXYgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dDb250YWluZXIiPgogICAgPHN2ZyBjbGFzcz0iVW5pdEhlYWRlci1vdmVyZmxvd0ltYWdlIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0Ij4KICAgICAgPHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPgogICAgICA8cGF0aCBkPSJNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6Ii8+CiAgICA8L3N2Zz4KICAgIDxzZWxlY3QgY2xhc3M9IlVuaXRIZWFkZXItb3ZlcmZsb3dTZWxlY3QganMtc2VsZWN0TmF2IiB0YWJpbmRleD0iLTEiPgogICAgICA8b3B0aW9uIHZhbHVlPSIvIj5NYWluPC9vcHRpb24+CiAgICAgIDxvcHRpb24gdmFsdWU9Ii9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28/dGFiPXZlcnNpb25zIj4KICAgICAgICBWZXJzaW9ucwogICAgICA8L29wdGlvbj4KICAgICAgPG9wdGlvbiB2YWx1ZT0iL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz90YWI9bGljZW5zZXMiPgogICAgICAgIExpY2Vuc2VzCiAgICAgIDwvb3B0aW9uPgogICAgICAKICAgICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRzIj4KICAgICAgICAgIEltcG9ydHMKICAgICAgICA8L29wdGlvbj4KICAgICAgICA8b3B0aW9uIHZhbHVlPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvP3RhYj1pbXBvcnRlZGJ5Ij4KICAgICAgICAgIEltcG9ydGVkIEJ5CiAgICAgICAgPC9vcHRpb24+CiAgICAgIAogICAgPC9zZWxlY3Q+CiAgPC9kaXY+CgoKICA8L2Rpdj4KCjwvaGVhZGVyPgogICAgPGFzaWRlIGNsYXNzPSJnby1NYWluLWFzaWRlICBqcy1tYWluQXNpZGUiPgogIAogIDxkaXYgY2xhc3M9IlVuaXRNZXRhIj4KICAgIDxoMiBjbGFzcz0iZ28tdGV4dExhYmVsIj5EZXRhaWxzPC9oMj4KICAgIAogIDx1bCBjbGFzcz0iVW5pdE1ldGEtZGV0YWlscyI+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFZhbGlkIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL3RyZWUvdjAuMy4xNi9nby5tb2QiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5nby5tb2Q8L2E+IGZpbGUKICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD4KICAgICAgICAgIFRoZSBHbyBtb2R1bGUgc3lzdGVtIHdhcyBpbnRyb2R1Y2VkIGluIEdvIDEuMTEgYW5kIGlzIHRoZSBvZmZpY2lhbCBkZXBlbmRlbmN5IG1hbmFnZW1lbnQKICAgICAgICAgIHNvbHV0aW9uIGZvciBHby4KICAgICAgICA8L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxkZXRhaWxzIGNsYXNzPSJnby1Ub29sdGlwIGpzLXRvb2x0aXAiIGRhdGEtZ3RtYz0idG9vbHRpcCI+CiAgICAgICAgPHN1bW1hcnkgY2xhc3M9ImdvLXRleHRTdWJ0bGUiPgogICAgICAgICAgCiAgPGltZyBjbGFzcz0iZ28tSWNvbiBnby1JY29uLS1hY2NlbnRlZCJzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vY2hlY2tfY2lyY2xlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iY2hlY2tlZCJoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgoKICAgICAgICAgIFJlZGlzdHJpYnV0YWJsZSBsaWNlbnNlCiAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBzcmM9Ii9zdGF0aWMvc2hhcmVkL2ljb24vaGVscF9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiIgaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KICAgICAgICA8L3N1bW1hcnk+CiAgICAgICAgPHA+CiAgICAgICAgICBSZWRpc3RyaWJ1dGFibGUgbGljZW5zZXMgcGxhY2UgbWluaW1hbCByZXN0cmljdGlvbnMgb24gaG93IHNvZnR3YXJlIGNhbiBiZSB1c2VkLAogICAgICAgICAgbW9kaWZpZWQsIGFuZCByZWRpc3RyaWJ1dGVkLgogICAgICAgIDwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWFjY2VudGVkInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jaGVja19jaXJjbGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJjaGVja2VkImhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CgogICAgICAgICAgVGFnZ2VkIHZlcnNpb24KICAgICAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9oZWxwX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiPgogICAgICAgIDwvc3VtbWFyeT4KICAgICAgICA8cD5Nb2R1bGVzIHdpdGggdGFnZ2VkIHZlcnNpb25zIGdpdmUgaW1wb3J0ZXJzIG1vcmUgcHJlZGljdGFibGUgYnVpbGRzLjwvcD4KICAgICAgPC9kZXRhaWxzPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGRldGFpbHMgY2xhc3M9ImdvLVRvb2x0aXAganMtdG9vbHRpcCIgZGF0YS1ndG1jPSJ0b29sdGlwIj4KICAgICAgICA8c3VtbWFyeSBjbGFzcz0iZ28tdGV4dFN1YnRsZSI+CiAgICAgICAgICAKICA8aW1nIGNsYXNzPSJnby1JY29uInNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jYW5jZWxfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJ1bmNoZWNrZWQiaGVpZ2h0PSIyNCIgd2lkdGg9IjI0Ij4KCiAgICAgICAgICBTdGFibGUgdmVyc2lvbgogICAgICAgICAgPGltZyBjbGFzcz0iZ28tSWNvbiIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2hlbHBfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSIiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCI+CiAgICAgICAgPC9zdW1tYXJ5PgogICAgICAgIDxwPldoZW4gYSBwcm9qZWN0IHJlYWNoZXMgbWFqb3IgdmVyc2lvbiB2MSBpdCBpcyBjb25zaWRlcmVkIHN0YWJsZS48L3A+CiAgICAgIDwvZGV0YWlscz4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IlVuaXRNZXRhLWRldGFpbHNMZWFybiI+CiAgICAgIDxhIGhyZWY9Ii9hYm91dCNiZXN0LXByYWN0aWNlcy1oMiIgZGF0YS1ndG1jPSJtZXRhIGxpbmsiPkxlYXJuIG1vcmU8L2E+CiAgICA8L2xpPgogIDwvdWw+CgogICAgPGgyIGNsYXNzPSJnby10ZXh0TGFiZWwiPlJlcG9zaXRvcnk8L2gyPgogICAgPGRpdiBjbGFzcz0iVW5pdE1ldGEtcmVwbyI+CiAgICAgIAogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiB0aXRsZT0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj4KICAgICAgICAgIGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwogICAgICAgIDwvYT4KICAgICAgCiAgICA8L2Rpdj4KICAgIAogICAgICA8aDIgY2xhc3M9ImdvLXRleHRMYWJlbCI+TGlua3M8L2gyPgogICAgICA8dWwgY2xhc3M9IlVuaXRNZXRhLWxpbmtzIj4KICAgICAgICAKICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kZXBzLmRldi9nby9naXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvL3YwLjMuMTYiIHRpdGxlPSJWaWV3IHRoaXMgbW9kdWxlIG9uIE9wZW4gU291cmNlIEluc2lnaHRzIgogICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIiBkYXRhLXRlc3QtaWQ9Im1ldGEtbGluay1kZXBzZGV2Ij4KICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJkZXBzZGV2LUljb24iIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9kZXBzZGV2LWxvZ28uc3ZnIgogICAgICAgICAgICAgICAgYWx0PSJPcGVuIFNvdXJjZSBJbnNpZ2h0cyBMb2dvIiAvPgogICAgICAgICAgICAgIE9wZW4gU291cmNlIEluc2lnaHRzCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgCiAgCgogICAgICAgIAogIAoKICAgICAgICAKICAKCiAgICAgIDwvdWw+CiAgICAKICA8L2Rpdj4KCjwvYXNpZGU+CiAgICA8bmF2IGNsYXNzPSJnby1NYWluLW5hdiBnby1NYWluLW5hdi0tc3RpY2t5IGpzLW1haW5OYXYiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogIDxkaXYgY2xhc3M9ImdvLU1haW4tbmF2RGVza3RvcCI+CiAgICAKICA8ZGl2IGNsYXNzPSJVbml0T3V0bGluZS1qdW1wVG8iPgogICAgPGJ1dHRvbiBjbGFzcz0iVW5pdE91dGxpbmUtanVtcFRvSW5wdXQgZ28tU2hvcnRjdXRLZXkganMtanVtcFRvSW5wdXQiCiAgICAgICAgYXJpYS1jb250cm9scz0ianVtcC10by1tb2RhbCIKICAgICAgICBhcmlhLWxhYmVsPSJPcGVuIEp1bXAgdG8gSWRlbnRpZmllciIKICAgICAgICBkYXRhLXNob3J0Y3V0PSJmIgogICAgICAgIGRhdGEtc2hvcnRjdXQtYWx0PSJmaW5kIgogICAgICAgIGRhdGEtdGVzdC1pZD0ianVtcC10by1idXR0b24iIGRhdGEtZ3RtYz0ib3V0bGluZSBidXR0b24iPgogICAgICBKdW1wIHRvIC4uLgogICAgPC9idXR0b24+CiAgPC9kaXY+CiAgPHVsIGNsYXNzPSJnby1UcmVlIGpzLXRyZWUiIHJvbGU9InRyZWUiIGFyaWEtbGFiZWw9Ik91dGxpbmUiPgogICAgCiAgICAgIDxsaSBjbGFzcz0ianMtcmVhZG1lT3V0bGluZSI+CiAgICAgICAgPGEgaHJlZj0iI3NlY3Rpb24tcmVhZG1lIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBSRUFETUUKICAgICAgICA8L2E+CiAgICAgICAgCiAgPHVsIGlkPSJyZWFkbWUtb3V0bGluZSI+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtc3RhdHVzIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgU3RhdHVzCiAgICAgICAgPC9hPgogICAgICAgIAogICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWltcG9ydGFudC1ub3RlIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBJbXBvcnRhbnQgbm90ZQogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtZG9uYXRpb25zIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBEb25hdGlvbnMKICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLW1lcmdvLWluLXRoZS13aWxkIiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgICBNZXJnbyBpbiB0aGUgd2lsZAogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvdWw+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWluc3RhbGwiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBJbnN0YWxsCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgIAogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iI3JlYWRtZS11c2FnZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIFVzYWdlCiAgICAgICAgPC9hPgogICAgICAgIAogICAgICAgICAgPHVsPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtZXJzCiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICAgCiAgICAgIDwvbGk+CiAgICAKICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9IiNyZWFkbWUtY29udGFjdC1tZSIgZGF0YS1ndG1jPSJyZWFkbWUgb3V0bGluZSBsaW5rIj4KICAgICAgICAgIENvbnRhY3QgbWUKICAgICAgICA8L2E+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWFib3V0IiBkYXRhLWd0bWM9InJlYWRtZSBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgQWJvdXQKICAgICAgICA8L2E+CiAgICAgICAgIAogICAgICA8L2xpPgogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjcmVhZG1lLWxpY2Vuc2UiIGRhdGEtZ3RtYz0icmVhZG1lIG91dGxpbmUgbGluayI+CiAgICAgICAgICBMaWNlbnNlCiAgICAgICAgPC9hPgogICAgICAgICAKICAgICAgPC9saT4KICAgICAKICA8L3VsPgoKICAgICAgPC9saT4KICAgIAogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjc2VjdGlvbi1kb2N1bWVudGF0aW9uIiBkYXRhLWd0bWM9Im91dGxpbmUgbGluayI+CiAgICAgICAgICBEb2N1bWVudGF0aW9uCiAgICAgICAgPC9hPgogICAgICAgIAo8dWw+CiAgCiAgICA8bGk+CiAgICAgIDxhIGhyZWY9IiNwa2ctb3ZlcnZpZXciIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+T3ZlcnZpZXc8L2E+CiAgICA8L2xpPgogIDxsaSBjbGFzcz0iRG9jTmF2LW92ZXJ2aWV3Ij4KICAgICAgPGEgaHJlZj0iI3BrZy1pbmRleCIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBJbmRleAogICAgICA8L2E+CiAgICAgIAogICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jTmF2LWNvbnN0YW50cyI+CiAgICAgIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIENvbnN0YW50cwogICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtdmFyaWFibGVzIj4KICAgICAgPGEgaHJlZj0iI3BrZy12YXJpYWJsZXMiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgVmFyaWFibGVzCiAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9IkRvY05hdi1mdW5jdGlvbnMiPgogICAgICA8YSBocmVmPSIjcGtnLWZ1bmN0aW9ucyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICBGdW5jdGlvbnMKICAgICAgPC9hPgogICAgICAKICAgICAgICA8dWw+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNYXAiIHRpdGxlPSJNYXAoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWFwKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI01hcFdpdGhPdmVyd3JpdGUiIHRpdGxlPSJNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIE1hcFdpdGhPdmVyd3JpdGUoZHN0LCBzcmMsIG9wdHMpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjTWVyZ2UiIHRpdGxlPSJNZXJnZShkc3QsIHNyYywgb3B0cykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBNZXJnZShkc3QsIHNyYywgb3B0cykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiIHRpdGxlPSJNZXJnZVdpdGhPdmVyd3JpdGUoZHN0LCBzcmMsIG9wdHMpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjLCBvcHRzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhBcHBlbmRTbGljZSIgdGl0bGU9IldpdGhBcHBlbmRTbGljZShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aEFwcGVuZFNsaWNlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiIHRpdGxlPSJXaXRoT3ZlcnJpZGUoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVycmlkZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aE92ZXJyaWRlRW1wdHlTbGljZSIgdGl0bGU9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhPdmVycmlkZUVtcHR5U2xpY2UoY29uZmlnKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSIgdGl0bGU9IldpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcpIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgICAgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRoU2xpY2VEZWVwQ29weSIgdGl0bGU9IldpdGhTbGljZURlZXBDb3B5KGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoU2xpY2VEZWVwQ29weShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyIgdGl0bGU9IldpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzKQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iI1dpdGhUeXBlQ2hlY2siIHRpdGxlPSJXaXRoVHlwZUNoZWNrKGNvbmZpZykiIGRhdGEtZ3RtYz0iZG9jIG91dGxpbmUgbGluayI+CiAgICAgICAgICAgICAgICBXaXRoVHlwZUNoZWNrKGNvbmZpZykKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9IiNXaXRob3V0RGVyZWZlcmVuY2UiIHRpdGxlPSJXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnKSIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICAgIFdpdGhvdXREZXJlZmVyZW5jZShjb25maWcpCiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgPC91bD4KICAgICAgCiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2NOYXYtdHlwZXMiPgogICAgICA8YSBocmVmPSIjcGtnLXR5cGVzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgIFR5cGVzCiAgICAgIDwvYT4KICAgICAgPHVsPgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICA8bGk+CiAgICAgICAgICAgIDxhIGhyZWY9IiNDb25maWciIHRpdGxlPSJ0eXBlIENvbmZpZyIgZGF0YS1ndG1jPSJkb2Mgb3V0bGluZSBsaW5rIj4KICAgICAgICAgICAgICB0eXBlIENvbmZpZwogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAKICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgIDxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iI1RyYW5zZm9ybWVycyIgdGl0bGU9InR5cGUgVHJhbnNmb3JtZXJzIiBkYXRhLWd0bWM9ImRvYyBvdXRsaW5lIGxpbmsiPgogICAgICAgICAgICAgIHR5cGUgVHJhbnNmb3JtZXJzCiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgIAogICAgICAgICAgPC9saT4KICAgICAgICAgCiAgICAgIDwvdWw+CiAgICA8L2xpPgogIAogIAo8L3VsPgoKICAgICAgPC9saT4KICAgIAogICAgCiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIjc2VjdGlvbi1zb3VyY2VmaWxlcyIgZGF0YS1ndG1jPSJvdXRsaW5lIGxpbmsiPgogICAgICAgICAgU291cmNlIEZpbGVzCiAgICAgICAgPC9hPgogICAgICA8L2xpPgogICAgCiAgICAKICA8L3VsPgoKICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJnby1NYWluLW5hdk1vYmlsZSBqcy1tYWluTmF2TW9iaWxlIj4KICAgIDxsYWJlbCBjbGFzcz0iZ28tTGFiZWwiPgogICAgICA8c2VsZWN0IGNsYXNzPSJnby1TZWxlY3QiPgogICAgICAgIAogICAgICAgICAgPG9wdGlvbiBzZWxlY3RlZCBkaXNhYmxlZD5SRUFETUU8L29wdGlvbj4KICAgICAgICAKICAgICAgPC9zZWxlY3Q+CiAgICA8L2xhYmVsPgogIDwvZGl2Pgo8L25hdj4KICAgIDxhcnRpY2xlIGNsYXNzPSJnby1NYWluLWFydGljbGUganMtbWFpbkNvbnRlbnQiPgogIDxkaXYgY2xhc3M9IlVuaXREZXRhaWxzIiBkYXRhLXRlc3QtaWQ9IlVuaXREZXRhaWxzIiBzdHlsZT0iZGlzcGxheTogYmxvY2s7Ij4KICAgIDxkaXYgY2xhc3M9IlVuaXREZXRhaWxzLWNvbnRlbnQganMtdW5pdERldGFpbHNDb250ZW50IiBkYXRhLXRlc3QtaWQ9IlVuaXREZXRhaWxzLWNvbnRlbnQiPgogICAgICAKICAgICAgICAKICA8ZGl2IGNsYXNzPSJVbml0UmVhZG1lIFVuaXRSZWFkbWUtLWV4cGFuZGVkIGpzLXJlYWRtZSI+CiAgICA8aDIgY2xhc3M9IlVuaXRSZWFkbWUtdGl0bGUiIGlkPSJzZWN0aW9uLXJlYWRtZSI+CiAgICAgIDxpbWcgY2xhc3M9ImdvLUljb24iIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nocm9tZV9yZWFkZXJfbW9kZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgIFJFQURNRQogICAgICA8YSBjbGFzcz0iVW5pdFJlYWRtZS1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLXJlYWRtZSI+wrY8L2E+CiAgICA8L2gyPgogICAgCiAgICAgIDxkaXYgY2xhc3M9IlVuaXRSZWFkbWUtY29udGVudCIgZGF0YS10ZXN0LWlkPSJVbml0LXJlYWRtZUNvbnRlbnQiPgogICAgICAgIDxkaXYgY2xhc3M9Ik92ZXJ2aWV3LXJlYWRtZUNvbnRlbnQganMtcmVhZG1lQ29udGVudCI+PGgzIGNsYXNzPSJoMSIgaWQ9InJlYWRtZS1tZXJnbyI+TWVyZ288L2gzPgo8cD48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9yZWxlYXNlcyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3JlbGVhc2UvaW1kYXJpby9tZXJnby5zdmciIGFsdD0iR2l0SHViIHJlbGVhc2UiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ29yZXBvcnRjYXJkLmNvbS9yZXBvcnQvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9nb3JlcG9ydGNhcmQuY29tL2JhZGdlL2ltZGFyaW8vbWVyZ28iIGFsdD0iR29DYXJkIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9hY3Rpb25zL3dvcmtmbG93cy90ZXN0cy55bWwiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby93b3JrZmxvd3MvdGVzdHMvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIiIGFsdD0iVGVzdCBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYXBpLnNlY3VyaXR5c2NvcmVjYXJkcy5kZXYvcHJvamVjdHMvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcGkuc2VjdXJpdHlzY29yZWNhcmRzLmRldi9wcm9qZWN0cy9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmFkZ2UiIGFsdD0iT3BlblNTRiBTY29yZWNhcmQiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vYmVzdHByYWN0aWNlcy5jb3JlaW5mcmFzdHJ1Y3R1cmUub3JnL3Byb2plY3RzLzcxNzciIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2Jlc3RwcmFjdGljZXMuY29yZWluZnJhc3RydWN0dXJlLm9yZy9wcm9qZWN0cy83MTc3L2JhZGdlIiBhbHQ9Ik9wZW5TU0YgQmVzdCBQcmFjdGljZXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vY292ZXJhbGxzLmlvL2dpdGh1Yi9pbWRhcmlvL21lcmdvP2JyYW5jaD1tYXN0ZXIiIHJlbD0ibm9mb2xsb3ciPjxpbWcgc3JjPSJodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9naXRodWIvaW1kYXJpby9tZXJnby9iYWRnZS5zdmc/YnJhbmNoPW1hc3RlciIgYWx0PSJDb3ZlcmFnZSBzdGF0dXMiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9iYWRnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vc291cmNlZ3JhcGguY29tL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby8tL2JhZGdlLnN2ZyIgYWx0PSJTb3VyY2VncmFwaCIvPjwvYT4KPGEgaHJlZj0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vcHJvamVjdHMvZ2l0JTJCZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbz9yZWY9YmFkZ2Vfc2hpZWxkIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly9hcHAuZm9zc2EuaW8vYXBpL3Byb2plY3RzL2dpdCUyQmdpdGh1Yi5jb20lMkZpbWRhcmlvJTJGbWVyZ28uc3ZnP3R5cGU9c2hpZWxkIiBhbHQ9IkZPU1NBIHN0YXR1cyIvPjwvYT48L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vZ29kb2Mub3JnL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbz9zdGF0dXMuc3ZnIiBhbHQ9IkdvRG9jIi8+PC9hPgo8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc3BvbnNvcnMvaW1kYXJpbyIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3Nwb25zb3JzL2ltZGFyaW8iIGFsdD0iQmVjb21lIG15IHNwb25zb3IiLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vdGlkZWxpZnQuY29tL3N1YnNjcmlwdGlvbi9wa2cvZ28tZ2l0aHViLmNvbS1pbWRhcmlvLW1lcmdvIiByZWw9Im5vZm9sbG93Ij48aW1nIHNyYz0iaHR0cHM6Ly90aWRlbGlmdC5jb20vYmFkZ2VzL3BhY2thZ2UvZ28vZ2l0aHViLmNvbSUyRmltZGFyaW8lMkZtZXJnbyIgYWx0PSJUaWRlbGlmdCIvPjwvYT48L3A+CjxwPkEgaGVscGVyIHRvIG1lcmdlIHN0cnVjdHMgYW5kIG1hcHMgaW4gR29sYW5nLiBVc2VmdWwgZm9yIGNvbmZpZ3VyYXRpb24gZGVmYXVsdCB2YWx1ZXMsIGF2b2lkaW5nIG1lc3N5IGlmLXN0YXRlbWVudHMuPC9wPgo8cD5NZXJnbyBtZXJnZXMgc2FtZS10eXBlIHN0cnVjdHMgYW5kIG1hcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBpbiB6ZXJvLXZhbHVlIGZpZWxkcy4gTWVyZ28gd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcy4gSXQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgb25lLiBJdCBhbHNvIHdvbiYjMzk7dCBtZXJnZSBzdHJ1Y3RzIGluc2lkZSBtYXBzIChiZWNhdXNlIHRoZXkgYXJlIG5vdCBhZGRyZXNzYWJsZSB1c2luZyBHbyByZWZsZWN0aW9uKS48L3A+CjxwPkFsc28gYSBsb3ZlbHkgPGEgaHJlZj0iaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZXJnbyIgcmVsPSJub2ZvbGxvdyI+Y29tdW5lPC9hPiAobXVuaWNpcGFsaXR5KSBpbiB0aGUgUHJvdmluY2Ugb2YgQW5jb25hIGluIHRoZSBJdGFsaWFuIHJlZ2lvbiBvZiBNYXJjaGUuPC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLXN0YXR1cyI+U3RhdHVzPC9oND4KPHA+SXQgaXMgcmVhZHkgZm9yIHByb2R1Y3Rpb24gdXNlLiA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnbyNtZXJnby1pbi10aGUtd2lsZCIgcmVsPSJub2ZvbGxvdyI+SXQgaXMgdXNlZCBpbiBzZXZlcmFsIHByb2plY3RzIGJ5IERvY2tlciwgR29vZ2xlLCBUaGUgTGludXggRm91bmRhdGlvbiwgVk1XYXJlLCBTaG9waWZ5LCBNaWNyb3NvZnQsIGV0YzwvYT4uPC9wPgo8aDUgY2xhc3M9ImgzIiBpZD0icmVhZG1lLWltcG9ydGFudC1ub3RlIj5JbXBvcnRhbnQgbm90ZTwvaDU+CjxwPlBsZWFzZSBrZWVwIGluIG1pbmQgdGhhdCBhIHByb2JsZW1hdGljIFBSIGJyb2tlIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuOSIgcmVsPSJub2ZvbGxvdyI+MC4zLjk8L2E+LiBJIHJldmVydGVkIGl0IGluIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9pbWRhcmlvL21lcmdvL3JlbGVhc2VzL3RhZy8wLjMuMTAiIHJlbD0ibm9mb2xsb3ciPjAuMy4xMDwvYT4sIGFuZCBJIGNvbnNpZGVyIGl0IHN0YWJsZSBidXQgbm90IGJ1Zy1mcmVlLiBBbHNvLCB0aGlzIHZlcnNpb24gYWRkcyBzdXBwb3J0IGZvciBnbyBtb2R1bGVzLjwvcD4KPHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2ltZGFyaW8vbWVyZ28vcmVsZWFzZXMvdGFnLzAuMy4yIiByZWw9Im5vZm9sbG93Ij4wLjMuMjwvYT4sIE1lcmdvIGNoYW5nZWQgPGNvZGU+TWVyZ2UoKTwvY29kZT5hbmQgPGNvZGU+TWFwKCk8L2NvZGU+IHNpZ25hdHVyZXMgdG8gc3VwcG9ydCA8YSBocmVmPSIjcmVhZG1lLXRyYW5zZm9ybWVycyIgcmVsPSJub2ZvbGxvdyI+dHJhbnNmb3JtZXJzPC9hPi4gSSBhZGRlZCBhbiBvcHRpb25hbC92YXJpYWRpYyBhcmd1bWVudCBzbyB0aGF0IGl0IHdvbiYjMzk7dCBicmVhayB0aGUgZXhpc3RpbmcgY29kZS48L3A+CjxwPklmIHlvdSB3ZXJlIHVzaW5nIE1lcmdvIGJlZm9yZSBBcHJpbCA2dGgsIDIwMTUsIHBsZWFzZSBjaGVjayB5b3VyIHByb2plY3Qgd29ya3MgYXMgaW50ZW5kZWQgYWZ0ZXIgdXBkYXRpbmcgeW91ciBsb2NhbCBjb3B5IHdpdGggPGNvZGU+Z28gZ2V0IC11IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbzwvY29kZT4uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS48L3A+CjxoNSBjbGFzcz0iaDMiIGlkPSJyZWFkbWUtZG9uYXRpb25zIj5Eb25hdGlvbnM8L2g1Pgo8cD5JZiBNZXJnbyBpcyB1c2VmdWwgdG8geW91LCBjb25zaWRlciBidXlpbmcgbWUgYSBjb2ZmZWUsIGEgYmVlciwgb3IgbWFraW5nIGEgbW9udGhseSBkb25hdGlvbiB0byBhbGxvdyBtZSB0byBrZWVwIGJ1aWxkaW5nIGdyZWF0IGZyZWUgc29mdHdhcmUuIPCfmI08L3A+CjxwPjxhIGhyZWY9Imh0dHBzOi8va28tZmkuY29tL0IwQjU4ODM5IiByZWw9Im5vZm9sbG93Ij48aW1nIGhlaWdodD0iMzYiIHNyYz0iaHR0cHM6Ly9hejc0MzcwMi52by5tc2VjbmQubmV0L2Nkbi9rb2ZpMS5wbmc/dj0wIiBhbHQ9IkJ1eSBNZSBhIENvZmZlZSBhdCBrby1maS5jb20iLz48L2E+CjxhIGhyZWY9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9kYXJpby9kb25hdGUiIHJlbD0ibm9mb2xsb3ciPjxpbWcgYWx0PSJEb25hdGUgdXNpbmcgTGliZXJhcGF5IiBzcmM9Imh0dHBzOi8vbGliZXJhcGF5LmNvbS9hc3NldHMvd2lkZ2V0cy9kb25hdGUuc3ZnIj48L2E+CjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zcG9uc29ycy9pbWRhcmlvIiByZWw9Im5vZm9sbG93Ij48aW1nIGFsdD0iQmVjb21lIG15IHNwb25zb3IiIHNyYz0iaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvc3BvbnNvcnMvaW1kYXJpbz9zdHlsZT1mb3ItdGhlLWJhZGdlIi8+PC9hPjwvcD4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS1tZXJnby1pbi10aGUtd2lsZCI+TWVyZ28gaW4gdGhlIHdpbGQ8L2g1Pgo8dWw+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbW9ieS9tb2J5IiByZWw9Im5vZm9sbG93Ij5tb2J5L21vYnk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2t1YmVybmV0ZXMiIHJlbD0ibm9mb2xsb3ciPmt1YmVybmV0ZXMva3ViZXJuZXRlczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Ztd2FyZS9kaXNwYXRjaCIgcmVsPSJub2ZvbGxvdyI+dm13YXJlL2Rpc3BhdGNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vU2hvcGlmeS90aGVtZWtpdCIgcmVsPSJub2ZvbGxvdyI+U2hvcGlmeS90aGVtZWtpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vemFzIiByZWw9Im5vZm9sbG93Ij5pbWRhcmlvL3phczwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hdGNvcm5pYy9oZXJtZXMiIHJlbD0ibm9mb2xsb3ciPm1hdGNvcm5pYy9oZXJtZXM8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9PcGVuQmF6YWFyL29wZW5iYXphYXItZ28iIHJlbD0ibm9mb2xsb3ciPk9wZW5CYXphYXIvb3BlbmJhemFhci1nbzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2thdGFyYXMvaXJpcyIgcmVsPSJub2ZvbGxvdyI+a2F0YXJhcy9pcmlzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbHNhdXRlci9jcmFuZSIgcmVsPSJub2ZvbGxvdyI+bWljaGFlbHNhdXRlci9jcmFuZTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvLXRhc2svdGFzayIgcmVsPSJub2ZvbGxvdyI+Z28tdGFzay90YXNrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vc2Vuc3UvdWNoaXdhIiByZWw9Im5vZm9sbG93Ij5zZW5zdS91Y2hpd2E8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9vcnkvaHlkcmEiIHJlbD0ibm9mb2xsb3ciPm9yeS9oeWRyYTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Npc2F0ZWNoL3ZjbGkiIHJlbD0ibm9mb2xsb3ciPnNpc2F0ZWNoL3ZjbGk8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kYWlyeWNhcnQvZGFpcnljYXJ0IiByZWw9Im5vZm9sbG93Ij5kYWlyeWNhcnQvZGFpcnljYXJ0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcHJvamVjdGNhbGljby9mZWxpeCIgcmVsPSJub2ZvbGxvdyI+cHJvamVjdGNhbGljby9mZWxpeDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3Jlc2luLW9zL2JhbGVuYSIgcmVsPSJub2ZvbGxvdyI+cmVzaW4tb3MvYmFsZW5hPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ28ta2l2aWsva2l2aWsiIHJlbD0ibm9mb2xsb3ciPmdvLWtpdmlrL2tpdmlrPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vVGVsZWZvbmljYS9nb3ZpY2UiIHJlbD0ibm9mb2xsb3ciPlRlbGVmb25pY2EvZ292aWNlPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvc3VwZXJnaWFudC9zdXBlcmdpYW50IiByZWw9Im5vZm9sbG93Ij5zdXBlcmdpYW50L3N1cGVyZ2lhbnQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9TZXJnZXlUc2Fsa292L2Jyb29jZSIgcmVsPSJub2ZvbGxvdyI+U2VyZ2V5VHNhbGtvdi9icm9vY2U8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9zb25pYWgvZG5zbWFkZWVhc3kiIHJlbD0ibm9mb2xsb3ciPnNvbmlhaC9kbnNtYWRlZWFzeTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL29oc3UtY29tcC1iaW8vZnVubmVsIiByZWw9Im5vZm9sbG93Ij5vaHN1LWNvbXAtYmlvL2Z1bm5lbDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL0VhZ2VySU8vU3RvdXQiIHJlbD0ibm9mb2xsb3ciPkVhZ2VySU8vU3RvdXQ8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpIiByZWw9Im5vZm9sbG93Ij5seW5uZHlsYW5odXJsZXkvZGVmc3ludGgtYXBpPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcnVzc3Jvc3MvY2FudmFzYXNzaWdubWVudHMiIHJlbD0ibm9mb2xsb3ciPnJ1c3Nyb3NzL2NhbnZhc2Fzc2lnbm1lbnRzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vcmRlZ2dlcy9jcnlwdGx5LWFwaSIgcmVsPSJub2ZvbGxvdyI+cmRlZ2dlcy9jcnlwdGx5LWFwaTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Nhc3VhbGppbS9leGVnZ3V0b3IiIHJlbD0ibm9mb2xsb3ciPmNhc3VhbGppbS9leGVnZ3V0b3I8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9kaXZzaG90L2dpdGxpbmciIHJlbD0ibm9mb2xsb3ciPmRpdnNob3QvZ2l0bGluZzwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL1JXSk11cnBoeS9nb3JsIiByZWw9Im5vZm9sbG93Ij5SV0pNdXJwaHkvZ29ybDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2FuZHJlcm9ja2VyL2RlcGxveTQyIiByZWw9Im5vZm9sbG93Ij5hbmRyZXJvY2tlci9kZXBsb3k0MjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2Vsd2luYXIvcmFtYmxlciIgcmVsPSJub2ZvbGxvdyI+ZWx3aW5hci9yYW1ibGVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vdG1haWFyb3RvL2dvcGFydG1hbiIgcmVsPSJub2ZvbGxvdyI+dG1haWFyb3RvL2dvcGFydG1hbjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2pmYnVzL2ltcHJlc3Npb25pc3QiIHJlbD0ibm9mb2xsb3ciPmpmYnVzL2ltcHJlc3Npb25pc3Q8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9KbWV5ZXJpbmcvemVhbG90IiByZWw9Im5vZm9sbG93Ij5KbWV5ZXJpbmcvemVhbG90PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZ29kZXAtbWlncmF0b3IvcmlnZ2VyLWhvc3QiIHJlbD0ibm9mb2xsb3ciPmdvZGVwLW1pZ3JhdG9yL3JpZ2dlci1ob3N0PC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vRHJvbmV2ZXJ5L011bHRpd2F5U3dpdGNoLUdvIiByZWw9Im5vZm9sbG93Ij5Ecm9uZXZlcnkvTXVsdGl3YXlTd2l0Y2gtR288L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS90aG9hcy9waWNmaXQiIHJlbD0ibm9mb2xsb3ciPnRob2FzL3BpY2ZpdDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL21hbnRhc21hdGVsaXMvd2hvb3BsaXN0LXNlcnZlciIgcmVsPSJub2ZvbGxvdyI+bWFudGFzbWF0ZWxpcy93aG9vcGxpc3Qtc2VydmVyPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vam51dGhvbmcvaXRlbV9zZWFyY2giIHJlbD0ibm9mb2xsb3ciPmpudXRob25nL2l0ZW1fc2VhcmNoPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYnVrYWxhcGFrL3Nub3dib2FyZCIgcmVsPSJub2ZvbGxvdyI+YnVrYWxhcGFrL3Nub3dib2FyZDwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcnNzaC9jb250YWluZXJzc2giIHJlbD0ibm9mb2xsb3ciPmNvbnRhaW5lcnNzaC9jb250YWluZXJzc2g8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb3JlbGVhc2VyL2dvcmVsZWFzZXIiIHJlbD0ibm9mb2xsb3ciPmdvcmVsZWFzZXIvZ29yZWxlYXNlcjwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3RqcG56L3N0cnVjdGJvdCIgcmVsPSJub2ZvbGxvdyI+dGpwbnovc3RydWN0Ym90PC9hPjwvbGk+CjwvdWw+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtaW5zdGFsbCI+SW5zdGFsbDwvaDQ+CjxwcmU+PGNvZGU+Z28gZ2V0IGdpdGh1Yi5jb20vaW1kYXJpby9tZXJnbwoKLy8gdXNlIGluIHlvdXIgLmdvIGNvZGUKaW1wb3J0ICgKICAgICYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQo8L2NvZGU+PC9wcmU+CjxoNCBjbGFzcz0iaDIiIGlkPSJyZWFkbWUtdXNhZ2UiPlVzYWdlPC9oND4KPHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIDxhIGhyZWY9Imh0dHBzOi8vZ29sYW5nLm9yZy9yZWYvc3BlYyNUaGVfemVyb192YWx1ZSIgcmVsPSJub2ZvbGxvdyI+dGhleSBhcmUgemVybyB2YWx1ZXM8L2E+IHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BbHNvLCB5b3UgY2FuIG1lcmdlIG92ZXJ3cml0aW5nIHZhbHVlcyB1c2luZyB0aGUgdHJhbnNmb3JtZXIgPGNvZGU+V2l0aE92ZXJyaWRlPC9jb2RlPi48L3A+CjxwcmU+PGNvZGU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewogICAgLy8gLi4uCn0KPC9jb2RlPjwvcHJlPgo8cD5BZGRpdGlvbmFsbHksIHlvdSBjYW4gbWFwIGEgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gPGNvZGU+TWVyZ2UoKTwvY29kZT4uIEtleXMgYXJlIGNhcGl0YWxpemVkIHRvIGZpbmQgZWFjaCBjb3JyZXNwb25kaW5nIGV4cG9ydGVkIGZpZWxkLjwvcD4KPHByZT48Y29kZT5pZiBlcnIgOj0gbWVyZ28uTWFwKCZhbXA7ZHN0LCBzcmNNYXApOyBlcnIgIT0gbmlsIHsKICAgIC8vIC4uLgp9CjwvY29kZT48L3ByZT4KPHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgPGNvZGU+bWFwW3N0cmluZ11pbnRlcmZhY2V7fTwvY29kZT4uIFRoZXkgd2lsbCBiZSBqdXN0IGFzc2lnbmVkIGFzIHZhbHVlcy48L3A+CjxwPkhlcmUgaXMgYSBuaWNlIGV4YW1wbGU6PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKKQoKdHlwZSBGb28gc3RydWN0IHsKCUEgc3RyaW5nCglCIGludDY0Cn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBGb297CgkJQTogJiMzNDtvbmUmIzM0OywKCQlCOiAyLAoJfQoJZGVzdCA6PSBGb297CgkJQTogJiMzNDt0d28mIzM0OywKCX0KCW1lcmdvLk1lcmdlKCZhbXA7ZGVzdCwgc3JjKQoJZm10LlByaW50bG4oZGVzdCkKCS8vIFdpbGwgcHJpbnQKCS8vIHt0d28gMn0KfQo8L2NvZGU+PC9wcmU+CjxwPk5vdGU6IGlmIHRlc3QgYXJlIGZhaWxpbmcgZHVlIG1pc3NpbmcgcGFja2FnZSwgcGxlYXNlIGV4ZWN1dGU6PC9wPgo8cHJlPjxjb2RlPmdvIGdldCBnb3BrZy5pbi95YW1sLnYzCjwvY29kZT48L3ByZT4KPGg1IGNsYXNzPSJoMyIgaWQ9InJlYWRtZS10cmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvaDU+CjxwPlRyYW5zZm9ybWVycyBhbGxvdyB0byBtZXJnZSBzcGVjaWZpYyB0eXBlcyBkaWZmZXJlbnRseSB0aGFuIGluIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBJbiBvdGhlciB3b3Jkcywgbm93IHlvdSBjYW4gY3VzdG9taXplIGhvdyBzb21lIHR5cGVzIGFyZSBtZXJnZWQuIEZvciBleGFtcGxlLCA8Y29kZT50aW1lLlRpbWU8L2NvZGU+IGlzIGEgc3RydWN0OyBpdCBkb2VzbiYjMzk7dCBoYXZlIHplcm8gdmFsdWUgYnV0IElzWmVybyBjYW4gcmV0dXJuIHRydWUgYmVjYXVzZSBpdCBoYXMgZmllbGRzIHdpdGggemVybyB2YWx1ZS4gSG93IGNhbiB3ZSBtZXJnZSBhIG5vbi16ZXJvIDxjb2RlPnRpbWUuVGltZTwvY29kZT4/PC9wPgo8cHJlPjxjb2RlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKICAgICAgICAmIzM0O3JlZmxlY3QmIzM0OwogICAgICAgICYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9jb2RlPjwvcHJlPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWNvbnRhY3QtbWUiPkNvbnRhY3QgbWU8L2g0Pgo8cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIiByZWw9Im5vZm9sbG93Ij5AaW1fZGFyaW88L2E+PC9wPgo8aDQgY2xhc3M9ImgyIiBpZD0icmVhZG1lLWFib3V0Ij5BYm91dDwvaDQ+CjxwPldyaXR0ZW4gYnkgPGEgaHJlZj0iaHR0cDovL2RhcmlvLmltIiByZWw9Im5vZm9sbG93Ij5EYXJpbyBDYXN0YcOxw6k8L2E+LjwvcD4KPGg0IGNsYXNzPSJoMiIgaWQ9InJlYWRtZS1saWNlbnNlIj5MaWNlbnNlPC9oND4KPHA+PGEgaHJlZj0iaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZSIgcmVsPSJub2ZvbGxvdyI+QlNEIDMtQ2xhdXNlPC9hPiBsaWNlbnNlLCBhcyA8YSBocmVmPSJodHRwOi8vZ29sYW5nLm9yZy9MSUNFTlNFIiByZWw9Im5vZm9sbG93Ij5HbyBsYW5ndWFnZTwvYT4uPC9wPgo8cD48YSBocmVmPSJodHRwczovL2FwcC5mb3NzYS5pby9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvP3JlZj1iYWRnZV9sYXJnZSIgcmVsPSJub2ZvbGxvdyI+PGltZyBzcmM9Imh0dHBzOi8vYXBwLmZvc3NhLmlvL2FwaS9wcm9qZWN0cy9naXQlMkJnaXRodWIuY29tJTJGaW1kYXJpbyUyRm1lcmdvLnN2Zz90eXBlPWxhcmdlIiBhbHQ9IkZPU1NBIFN0YXR1cyIvPjwvYT48L3A+CjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGJ1dHRvbiBjbGFzcz0iVW5pdFJlYWRtZS1leHBhbmRMaW5rIGpzLXJlYWRtZUV4cGFuZCIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWV4cGFuZCIgZGF0YS1ndG1jPSJyZWFkbWUgYnV0dG9uIgogICAgICAgICAgYXJpYS1sYWJlbD0iRXhwYW5kIFJlYWRtZSI+RXhwYW5kIOKWvjwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJVbml0UmVhZG1lLWNvbGxhcHNlTGluayBqcy1yZWFkbWVDb2xsYXBzZSIKICAgICAgICAgIGRhdGEtdGVzdC1pZD0icmVhZG1lLWNvbGxhcHNlIiBkYXRhLWd0bWM9InJlYWRtZSBidXR0b24iCiAgICAgICAgICBhcmlhLWxhYmVsPSJFeHBhbmQgUmVhZG1lIj5Db2xsYXBzZSDilrQ8L2J1dHRvbj4KICAgIAogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdERvYyI+CiAgICA8aDIgY2xhc3M9IlVuaXREb2MtdGl0bGUiIGlkPSJzZWN0aW9uLWRvY3VtZW50YXRpb24iPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9jb2RlX2dtX2dyZXlfMjRkcC5zdmciIGFsdD0iIj4KICAgICAgRG9jdW1lbnRhdGlvbgogICAgICA8YSBjbGFzcz0iVW5pdERvYy1pZExpbmsiIGhyZWY9IiNzZWN0aW9uLWRvY3VtZW50YXRpb24iPsK2PC9hPgogICAgPC9oMj4KICAgIAogIAogICAgCiAgCgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbiBqcy1kb2N1bWVudGF0aW9uIj4KICAgICAgCiAgICAgICAgCgo8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnRlbnQganMtZG9jQ29udGVudCI+IDxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3Ij4KICAgIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctb3ZlcnZpZXciIGNsYXNzPSJEb2N1bWVudGF0aW9uLW92ZXJ2aWV3SGVhZGVyIj5PdmVydmlldyA8YSBocmVmPSIjcGtnLW92ZXJ2aWV3Ij7CtjwvYT48L2gzPgoKPGRpdiByb2xlPSJuYXZpZ2F0aW9uIiBhcmlhLWxhYmVsPSJUYWJsZSBvZiBDb250ZW50cyI+CiAgPHVsIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvYyBEb2N1bWVudGF0aW9uLXRvYy1jb2x1bW5zIj4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVN0YXR1cyI+U3RhdHVzPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItSW5zdGFsbCI+SW5zdGFsbDwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVVzYWdlIj5Vc2FnZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLVRyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzPC9hPgogICAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLXRvY0l0ZW0iPgogICAgICAgIDxhIGhyZWY9IiNoZHItQ29udGFjdF9tZSI+Q29udGFjdCBtZTwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUFib3V0Ij5BYm91dDwvYT4KICAgICAgPC9saT4KICAgIDxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi10b2NJdGVtIj4KICAgICAgICA8YSBocmVmPSIjaGRyLUxpY2Vuc2UiPkxpY2Vuc2U8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgo8L2Rpdj4KPHA+QSBoZWxwZXIgdG8gbWVyZ2Ugc3RydWN0cyBhbmQgbWFwcyBpbiBHb2xhbmcuIFVzZWZ1bCBmb3IgY29uZmlndXJhdGlvbiBkZWZhdWx0IHZhbHVlcywgYXZvaWRpbmcgbWVzc3kgaWYtc3RhdGVtZW50cy4KPC9wPjxwPk1lcmdvIG1lcmdlcyBzYW1lLXR5cGUgc3RydWN0cyBhbmQgbWFwcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGluIHplcm8tdmFsdWUgZmllbGRzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzLiBJdCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IGFsc28gd29uJiMzOTt0IG1lcmdlIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLgo8L3A+PGg0IGlkPSJoZHItU3RhdHVzIj5TdGF0dXMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLVN0YXR1cyI+wrY8L2E+PC9oND48cD5JdCBpcyByZWFkeSBmb3IgcHJvZHVjdGlvbiB1c2UuIEl0IGlzIHVzZWQgaW4gc2V2ZXJhbCBwcm9qZWN0cyBieSBEb2NrZXIsIEdvb2dsZSwgVGhlIExpbnV4IEZvdW5kYXRpb24sIFZNV2FyZSwgU2hvcGlmeSwgZXRjLgo8L3A+PGg0IGlkPSJoZHItSW1wb3J0YW50X25vdGUiPkltcG9ydGFudCBub3RlIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1JbXBvcnRhbnRfbm90ZSI+wrY8L2E+PC9oND48cD5QbGVhc2Uga2VlcCBpbiBtaW5kIHRoYXQgYSBwcm9ibGVtYXRpYyBQUiBicm9rZSAwLjMuOS4gV2UgcmV2ZXJ0ZWQgaXQgaW4gMC4zLjEwLiBXZSBjb25zaWRlciAwLjMuMTAgYXMgc3RhYmxlIGJ1dCBub3QgYnVnLWZyZWUuIC4gQWxzbywgdGhpcyB2ZXJzaW9uIGFkZHMgc3VwcG90IGZvciBnbyBtb2R1bGVzLgo8L3A+PHA+S2VlcCBpbiBtaW5kIHRoYXQgaW4gMC4zLjIsIE1lcmdvIGNoYW5nZWQgTWVyZ2UoKSBhbmQgTWFwKCkgc2lnbmF0dXJlcyB0byBzdXBwb3J0IHRyYW5zZm9ybWVycy4gV2UgYWRkZWQgYW4gb3B0aW9uYWwvdmFyaWFkaWMgYXJndW1lbnQgc28gdGhhdCBpdCB3b24mIzM5O3QgYnJlYWsgdGhlIGV4aXN0aW5nIGNvZGUuCjwvcD48cD5JZiB5b3Ugd2VyZSB1c2luZyBNZXJnbyBiZWZvcmUgQXByaWwgNnRoLCAyMDE1LCBwbGVhc2UgY2hlY2sgeW91ciBwcm9qZWN0IHdvcmtzIGFzIGludGVuZGVkIGFmdGVyIHVwZGF0aW5nIHlvdXIgbG9jYWwgY29weSB3aXRoIGdvIGdldCAtdSBnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28uIEkgYXBvbG9naXplIGZvciBhbnkgaXNzdWUgY2F1c2VkIGJ5IGl0cyBwcmV2aW91cyBiZWhhdmlvciBhbmQgYW55IGZ1dHVyZSBidWcgdGhhdCBNZXJnbyBjb3VsZCBjYXVzZSBpbiBleGlzdGluZyBwcm9qZWN0cyBhZnRlciB0aGUgY2hhbmdlIChyZWxlYXNlIDAuMi4wKS4KPC9wPjxoNCBpZD0iaGRyLUluc3RhbGwiPkluc3RhbGwgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjaGRyLUluc3RhbGwiPsK2PC9hPjwvaDQ+PHA+RG8geW91ciB1c3VhbCBpbnN0YWxsYXRpb24gcHJvY2VkdXJlOgo8L3A+PHByZT5nbyBnZXQgZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvCgovLyB1c2UgaW4geW91ciAuZ28gY29kZQppbXBvcnQgKAogICAgJiMzNDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28mIzM0OwopCjwvcHJlPjxoNCBpZD0iaGRyLVVzYWdlIj5Vc2FnZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItVXNhZ2UiPsK2PC9hPjwvaDQ+PHA+WW91IGNhbiBvbmx5IG1lcmdlIHNhbWUtdHlwZSBzdHJ1Y3RzIHdpdGggZXhwb3J0ZWQgZmllbGRzIGluaXRpYWxpemVkIGFzIHplcm8gdmFsdWUgb2YgdGhlaXIgdHlwZSBhbmQgc2FtZS10eXBlcyBtYXBzLiBNZXJnbyB3b24mIzM5O3QgbWVyZ2UgdW5leHBvcnRlZCAocHJpdmF0ZSkgZmllbGRzIGJ1dCB3aWxsIGRvIHJlY3Vyc2l2ZWx5IGFueSBleHBvcnRlZCBvbmUuIEl0IHdvbiYjMzk7dCBtZXJnZSBlbXB0eSBzdHJ1Y3RzIHZhbHVlIGFzIHRoZXkgYXJlIHplcm8gdmFsdWVzIHRvby4gQWxzbywgbWFwcyB3aWxsIGJlIG1lcmdlZCByZWN1cnNpdmVseSBleGNlcHQgZm9yIHN0cnVjdHMgaW5zaWRlIG1hcHMgKGJlY2F1c2UgdGhleSBhcmUgbm90IGFkZHJlc3NhYmxlIHVzaW5nIEdvIHJlZmxlY3Rpb24pLgo8L3A+PHByZT5pZiBlcnIgOj0gbWVyZ28uTWVyZ2UoJmFtcDtkc3QsIHNyYyk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+QWxzbywgeW91IGNhbiBtZXJnZSBvdmVyd3JpdGluZyB2YWx1ZXMgdXNpbmcgdGhlIHRyYW5zZm9ybWVyIFdpdGhPdmVycmlkZS4KPC9wPjxwcmU+aWYgZXJyIDo9IG1lcmdvLk1lcmdlKCZhbXA7ZHN0LCBzcmMsIG1lcmdvLldpdGhPdmVycmlkZSk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+QWRkaXRpb25hbGx5LCB5b3UgY2FuIG1hcCBhIG1hcFtzdHJpbmddaW50ZXJmYWNle30gdG8gYSBzdHJ1Y3QgKGFuZCBvdGhlcndpc2UsIGZyb20gc3RydWN0IHRvIG1hcCksIGZvbGxvd2luZyB0aGUgc2FtZSByZXN0cmljdGlvbnMgYXMgaW4gTWVyZ2UoKS4gS2V5cyBhcmUgY2FwaXRhbGl6ZWQgdG8gZmluZCBlYWNoIGNvcnJlc3BvbmRpbmcgZXhwb3J0ZWQgZmllbGQuCjwvcD48cHJlPmlmIGVyciA6PSBtZXJnby5NYXAoJmFtcDtkc3QsIHNyY01hcCk7IGVyciAhPSBuaWwgewoJLy8gLi4uCn0KPC9wcmU+PHA+V2FybmluZzogaWYgeW91IG1hcCBhIHN0cnVjdCB0byBtYXAsIGl0IHdvbiYjMzk7dCBkbyBpdCByZWN1cnNpdmVseS4gRG9uJiMzOTt0IGV4cGVjdCBNZXJnbyB0byBtYXAgc3RydWN0IG1lbWJlcnMgb2YgeW91ciBzdHJ1Y3QgYXMgbWFwW3N0cmluZ11pbnRlcmZhY2V7fS4gVGhleSB3aWxsIGJlIGp1c3QgYXNzaWduZWQgYXMgdmFsdWVzLgo8L3A+PHA+SGVyZSBpcyBhIG5pY2UgZXhhbXBsZToKPC9wPjxwcmU+cGFja2FnZSBtYWluCgppbXBvcnQgKAoJJiMzNDtmbXQmIzM0OwoJJiMzNDtnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28mIzM0OwopCgp0eXBlIEZvbyBzdHJ1Y3QgewoJQSBzdHJpbmcKCUIgaW50NjQKfQoKZnVuYyBtYWluKCkgewoJc3JjIDo9IEZvb3sKCQlBOiAmIzM0O29uZSYjMzQ7LAoJCUI6IDIsCgl9CglkZXN0IDo9IEZvb3sKCQlBOiAmIzM0O3R3byYjMzQ7LAoJfQoJbWVyZ28uTWVyZ2UoJmFtcDtkZXN0LCBzcmMpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8ge3R3byAyfQp9CjwvcHJlPjxoNCBpZD0iaGRyLVRyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1UcmFuc2Zvcm1lcnMiPsK2PC9hPjwvaDQ+PHA+VHJhbnNmb3JtZXJzIGFsbG93IHRvIG1lcmdlIHNwZWNpZmljIHR5cGVzIGRpZmZlcmVudGx5IHRoYW4gaW4gdGhlIGRlZmF1bHQgYmVoYXZpb3IuIEluIG90aGVyIHdvcmRzLCBub3cgeW91IGNhbiBjdXN0b21pemUgaG93IHNvbWUgdHlwZXMgYXJlIG1lcmdlZC4gRm9yIGV4YW1wbGUsIHRpbWUuVGltZSBpcyBhIHN0cnVjdDsgaXQgZG9lc24mIzM5O3QgaGF2ZSB6ZXJvIHZhbHVlIGJ1dCBJc1plcm8gY2FuIHJldHVybiB0cnVlIGJlY2F1c2UgaXQgaGFzIGZpZWxkcyB3aXRoIHplcm8gdmFsdWUuIEhvdyBjYW4gd2UgbWVyZ2UgYSBub24temVybyB0aW1lLlRpbWU/CjwvcD48cHJlPnBhY2thZ2UgbWFpbgoKaW1wb3J0ICgKCSYjMzQ7Zm10JiMzNDsKCSYjMzQ7Z2l0aHViLmNvbS9pbWRhcmlvL21lcmdvJiMzNDsKCQkmIzM0O3JlZmxlY3QmIzM0OwoJCSYjMzQ7dGltZSYjMzQ7CikKCnR5cGUgdGltZVRyYW5zZm9ybWVyIHN0cnVjdCB7Cn0KCmZ1bmMgKHQgdGltZVRyYW5zZm9ybWVyKSBUcmFuc2Zvcm1lcih0eXAgcmVmbGVjdC5UeXBlKSBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCWlmIHR5cCA9PSByZWZsZWN0LlR5cGVPZih0aW1lLlRpbWV7fSkgewoJCXJldHVybiBmdW5jKGRzdCwgc3JjIHJlZmxlY3QuVmFsdWUpIGVycm9yIHsKCQkJaWYgZHN0LkNhblNldCgpIHsKCQkJCWlzWmVybyA6PSBkc3QuTWV0aG9kQnlOYW1lKCYjMzQ7SXNaZXJvJiMzNDspCgkJCQlyZXN1bHQgOj0gaXNaZXJvLkNhbGwoW11yZWZsZWN0LlZhbHVle30pCgkJCQlpZiByZXN1bHRbMF0uQm9vbCgpIHsKCQkJCQlkc3QuU2V0KHNyYykKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfQoJfQoJcmV0dXJuIG5pbAp9Cgp0eXBlIFNuYXBzaG90IHN0cnVjdCB7CglUaW1lIHRpbWUuVGltZQoJLy8gLi4uCn0KCmZ1bmMgbWFpbigpIHsKCXNyYyA6PSBTbmFwc2hvdHt0aW1lLk5vdygpfQoJZGVzdCA6PSBTbmFwc2hvdHt9CgltZXJnby5NZXJnZSgmYW1wO2Rlc3QsIHNyYywgbWVyZ28uV2l0aFRyYW5zZm9ybWVycyh0aW1lVHJhbnNmb3JtZXJ7fSkpCglmbXQuUHJpbnRsbihkZXN0KQoJLy8gV2lsbCBwcmludAoJLy8geyAyMDE4LTAxLTEyIDAxOjE1OjAwICswMDAwIFVUQyBtPSswLjAwMDAwMDAwMSB9Cn0KPC9wcmU+PGg0IGlkPSJoZHItQ29udGFjdF9tZSI+Q29udGFjdCBtZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItQ29udGFjdF9tZSI+wrY8L2E+PC9oND48cD5JZiBJIGNhbiBoZWxwIHlvdSwgeW91IGhhdmUgYW4gaWRlYSBvciB5b3UgYXJlIHVzaW5nIE1lcmdvIGluIHlvdXIgcHJvamVjdHMsIGRvbiYjMzk7dCBoZXNpdGF0ZSB0byBkcm9wIG1lIGEgbGluZSAob3IgYSBwdWxsIHJlcXVlc3QpOiA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvIj5odHRwczovL3R3aXR0ZXIuY29tL2ltX2RhcmlvPC9hPgo8L3A+PGg0IGlkPSJoZHItQWJvdXQiPkFib3V0IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI2hkci1BYm91dCI+wrY8L2E+PC9oND48cD5Xcml0dGVuIGJ5IERhcmlvIENhc3Rhw7HDqTogPGEgaHJlZj0iaHR0cHM6Ly9kYS5yaW8uaG4iPmh0dHBzOi8vZGEucmlvLmhuPC9hPgo8L3A+PGg0IGlkPSJoZHItTGljZW5zZSI+TGljZW5zZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNoZHItTGljZW5zZSI+wrY8L2E+PC9oND48cD5CU0QgMy1DbGF1c2UgbGljZW5zZSwgYXMgR28gbGFuZ3VhZ2UuCjwvcD4KPC9zZWN0aW9uPjxzZWN0aW9uIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4Ij4KICAgIDxoMyBpZD0icGtnLWluZGV4IiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEhlYWRlciI+SW5kZXggPGEgaHJlZj0iI3BrZy1pbmRleCI+wrY8L2E+PC9oMz4KCjx1bCBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleExpc3QiPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhWYXJpYWJsZXMiPjxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj5WYXJpYWJsZXM8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNYXAiPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWFwV2l0aE92ZXJ3cml0ZSI+ZnVuYyBNYXBXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjTWVyZ2UiPmZ1bmMgTWVyZ2UoZHN0LCBzcmMgaW50ZXJmYWNle30sIG9wdHMgLi4uZnVuYygqQ29uZmlnKSkgZXJyb3I8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNNZXJnZVdpdGhPdmVyd3JpdGUiPmZ1bmMgTWVyZ2VXaXRoT3ZlcndyaXRlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKkNvbmZpZykpIGVycm9yPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aEFwcGVuZFNsaWNlIj5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcnJpZGUiPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhPdmVycmlkZUVtcHR5U2xpY2UiPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKkNvbmZpZyk8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4RnVuY3Rpb24iPgogICAgICAgIDxhIGhyZWY9IiNXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiPmZ1bmMgV2l0aE92ZXJ3cml0ZVdpdGhFbXB0eVZhbHVlKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhUcmFuc2Zvcm1lcnMiPmZ1bmMgV2l0aFRyYW5zZm9ybWVycyh0cmFuc2Zvcm1lcnMgVHJhbnNmb3JtZXJzKSBmdW5jKCpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleEZ1bmN0aW9uIj4KICAgICAgICA8YSBocmVmPSIjV2l0aFR5cGVDaGVjayI+ZnVuYyBXaXRoVHlwZUNoZWNrKGNvbmZpZyAqQ29uZmlnKTwvYT48L2xpPgo8bGkgY2xhc3M9IkRvY3VtZW50YXRpb24taW5kZXhGdW5jdGlvbiI+CiAgICAgICAgPGEgaHJlZj0iI1dpdGhvdXREZXJlZmVyZW5jZSI+ZnVuYyBXaXRob3V0RGVyZWZlcmVuY2UoY29uZmlnICpDb25maWcpPC9hPjwvbGk+CjxsaSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pbmRleFR5cGUiPgogICAgICAgICAgPGEgaHJlZj0iI0NvbmZpZyI+dHlwZSBDb25maWc8L2E+PC9saT4KPGxpIGNsYXNzPSJEb2N1bWVudGF0aW9uLWluZGV4VHlwZSI+CiAgICAgICAgICA8YSBocmVmPSIjVHJhbnNmb3JtZXJzIj50eXBlIFRyYW5zZm9ybWVyczwvYT48L2xpPgo8L3VsPgo8L3NlY3Rpb24+PGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy1jb25zdGFudHMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLWNvbnN0YW50c0hlYWRlciI+Q29uc3RhbnRzIDxhIGhyZWY9IiNwa2ctY29uc3RhbnRzIj7CtjwvYT48L2gzPgoKICA8c2VjdGlvbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1jb25zdGFudHMiPjxwIGNsYXNzPSJEb2N1bWVudGF0aW9uLWVtcHR5Ij5UaGlzIHNlY3Rpb24gaXMgZW1wdHkuPC9wPjwvc2VjdGlvbj4KCiAgPGgzIHRhYmluZGV4PSItMSIgaWQ9InBrZy12YXJpYWJsZXMiIGNsYXNzPSJEb2N1bWVudGF0aW9uLXZhcmlhYmxlc0hlYWRlciI+VmFyaWFibGVzIDxhIGhyZWY9IiNwa2ctdmFyaWFibGVzIj7CtjwvYT48L2gzPgoKICA8c2VjdGlvbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi12YXJpYWJsZXMiPgogICAgPGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1kZWNsYXJhdGlvbiI+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uTGluayI+PGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ28uZ28jTDE3Ij5WaWV3IFNvdXJjZTwvYT48L3NwYW4+CiAgICAgIDxwcmU+dmFyICgKPHNwYW4gaWQ9IkVyck5pbEFyZ3VtZW50cyIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyck5pbEFyZ3VtZW50cyAgICAgICAgICAgICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtzcmMgYW5kIGRzdCBtdXN0IG5vdCBiZSBuaWwmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJEaWZmZXJlbnRBcmd1bWVudHNUeXBlcyIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckRpZmZlcmVudEFyZ3VtZW50c1R5cGVzICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtzcmMgYW5kIGRzdCBtdXN0IGJlIG9mIHNhbWUgdHlwZSYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyck5vdFN1cHBvcnRlZCIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyck5vdFN1cHBvcnRlZCAgICAgICAgICAgICAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtvbmx5IHN0cnVjdHMsIG1hcHMsIGFuZCBzbGljZXMgYXJlIHN1cHBvcnRlZCYjMzQ7KQo8L3NwYW4+PHNwYW4gaWQ9IkVyckV4cGVjdGVkTWFwQXNEZXN0aW5hdGlvbiIgZGF0YS1raW5kPSJ2YXJpYWJsZSI+CUVyckV4cGVjdGVkTWFwQXNEZXN0aW5hdGlvbiAgICA9IDxhIGhyZWY9Ii9lcnJvcnMiPmVycm9yczwvYT4uPGEgaHJlZj0iL2Vycm9ycyNOZXciPk5ldzwvYT4oJiMzNDtkc3Qgd2FzIGV4cGVjdGVkIHRvIGJlIGEgbWFwJiMzNDspCjwvc3Bhbj48c3BhbiBpZD0iRXJyRXhwZWN0ZWRTdHJ1Y3RBc0Rlc3RpbmF0aW9uIiBkYXRhLWtpbmQ9InZhcmlhYmxlIj4JRXJyRXhwZWN0ZWRTdHJ1Y3RBc0Rlc3RpbmF0aW9uID0gPGEgaHJlZj0iL2Vycm9ycyI+ZXJyb3JzPC9hPi48YSBocmVmPSIvZXJyb3JzI05ldyI+TmV3PC9hPigmIzM0O2RzdCB3YXMgZXhwZWN0ZWQgdG8gYmUgYSBzdHJ1Y3QmIzM0OykKPC9zcGFuPjxzcGFuIGlkPSJFcnJOb25Qb2ludGVyQXJndW1lbnQiIGRhdGEta2luZD0idmFyaWFibGUiPglFcnJOb25Qb2ludGVyQXJndW1lbnQgICAgICAgICAgPSA8YSBocmVmPSIvZXJyb3JzIj5lcnJvcnM8L2E+LjxhIGhyZWY9Ii9lcnJvcnMjTmV3Ij5OZXc8L2E+KCYjMzQ7ZHN0IG11c3QgYmUgYSBwb2ludGVyJiMzNDspCjwvc3Bhbj4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5FcnJvcnMgcmVwb3J0ZWQgYnkgTWVyZ28gd2hlbiBpdCBmaW5kcyBpbnZhbGlkIGFyZ3VtZW50cy4KPC9wPgo8L3NlY3Rpb24+CgogIDxoMyB0YWJpbmRleD0iLTEiIGlkPSJwa2ctZnVuY3Rpb25zIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbnNIZWFkZXIiPkZ1bmN0aW9ucyA8YSBocmVmPSIjcGtnLWZ1bmN0aW9ucyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25zIj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvI0wxMzIiPk1hcDwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjTWFwIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWFwKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NYXAgc2V0cyBmaWVsZHMmIzM5OyB2YWx1ZXMgaW4gZHN0IGZyb20gc3JjLgpzcmMgY2FuIGJlIGEgbWFwIHdpdGggc3RyaW5nIGtleXMgb3IgYSBzdHJ1Y3QuIGRzdCBtdXN0IGJlIHRoZSBvcHBvc2l0ZToKaWYgc3JjIGlzIGEgbWFwLCBkc3QgbXVzdCBiZSBhIHZhbGlkIHBvaW50ZXIgdG8gc3RydWN0LiBJZiBzcmMgaXMgYSBzdHJ1Y3QsCmRzdCBtdXN0IGJlIG1hcFtzdHJpbmddaW50ZXJmYWNle30uCkl0IHdvbiYjMzk7dCBtZXJnZSB1bmV4cG9ydGVkIChwcml2YXRlKSBmaWVsZHMgYW5kIHdpbGwgZG8gcmVjdXJzaXZlbHkKYW55IGV4cG9ydGVkIGZpZWxkLgpJZiBkc3QgaXMgYSBtYXAsIGtleXMgd2lsbCBiZSBzcmMgZmllbGRzJiMzOTsgbmFtZXMgaW4gbG93ZXIgY2FtZWwgY2FzZS4KTWlzc2luZyBrZXkgaW4gc3JjIHRoYXQgZG9lc24mIzM5O3QgbWF0Y2ggYSBmaWVsZCBpbiBkc3Qgd2lsbCBiZSBza2lwcGVkLiBUaGlzCmRvZXNuJiMzOTt0IGFwcGx5IGlmIGRzdCBpcyBhIG1hcC4KVGhpcyBpcyBzZXBhcmF0ZWQgbWV0aG9kIGZyb20gTWVyZ2UgYmVjYXVzZSBpdCBpcyBjbGVhbmVyIGFuZCBpdCBrZWVwcyBzYW5lCnNlbWFudGljczogbWVyZ2luZyBlcXVhbCB0eXBlcywgbWFwcGluZyBkaWZmZXJlbnQgKHJlc3RyaWN0ZWQpIHR5cGVzLgo8L3A+CgogIAoKICAgICAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uIj4KCSAgCiAgCiAgCiAgICA8aDQgdGFiaW5kZXg9Ii0xIiBpZD0iTWFwV2l0aE92ZXJ3cml0ZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21hcC5nbyNMMTM5Ij5NYXBXaXRoT3ZlcndyaXRlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNNYXBXaXRoT3ZlcndyaXRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgTWFwV2l0aE92ZXJ3cml0ZShkc3QsIHNyYyBpbnRlcmZhY2V7fSwgb3B0cyAuLi5mdW5jKCo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KSkgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TWFwV2l0aE92ZXJ3cml0ZSB3aWxsIGRvIHRoZSBzYW1lIGFzIE1hcCBleGNlcHQgdGhhdCBub24tZW1wdHkgZHN0IGF0dHJpYnV0ZXMgd2lsbCBiZSBvdmVycmlkZGVuIGJ5Cm5vbi1lbXB0eSBzcmMgYXR0cmlidXRlIHZhbHVlcy4KRGVwcmVjYXRlZDogVXNlIE1hcCjigKYpIHdpdGggV2l0aE92ZXJyaWRlCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzMTgiPk1lcmdlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNNZXJnZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlKGRzdCwgc3JjIGludGVyZmFjZXt9LCBvcHRzIC4uLmZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pKSA8YSBocmVmPSIvYnVpbHRpbiNlcnJvciI+ZXJyb3I8L2E+PC9wcmU+CiAgICA8L2Rpdj4KICA8cD5NZXJnZSB3aWxsIGZpbGwgYW55IGVtcHR5IGZvciB2YWx1ZSB0eXBlIGF0dHJpYnV0ZXMgb24gdGhlIGRzdCBzdHJ1Y3QgdXNpbmcgY29ycmVzcG9uZGluZwpzcmMgYXR0cmlidXRlcyBpZiB0aGV5IHRoZW1zZWx2ZXMgYXJlIG5vdCBlbXB0eS4gZHN0IGFuZCBzcmMgbXVzdCBiZSB2YWxpZCBzYW1lLXR5cGUgc3RydWN0cwphbmQgZHN0IG11c3QgYmUgYSBwb2ludGVyIHRvIHN0cnVjdC4KSXQgd29uJiMzOTt0IG1lcmdlIHVuZXhwb3J0ZWQgKHByaXZhdGUpIGZpZWxkcyBhbmQgd2lsbCBkbyByZWN1cnNpdmVseSBhbnkgZXhwb3J0ZWQgZmllbGQuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJNZXJnZVdpdGhPdmVyd3JpdGUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzI1Ij5NZXJnZVdpdGhPdmVyd3JpdGU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI01lcmdlV2l0aE92ZXJ3cml0ZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIE1lcmdlV2l0aE92ZXJ3cml0ZShkc3QsIHNyYyBpbnRlcmZhY2V7fSwgb3B0cyAuLi5mdW5jKCo8YSBocmVmPSIjQ29uZmlnIj5Db25maWc8L2E+KSkgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPjwvcHJlPgogICAgPC9kaXY+CiAgPHA+TWVyZ2VXaXRoT3ZlcndyaXRlIHdpbGwgZG8gdGhlIHNhbWUgYXMgTWVyZ2UgZXhjZXB0IHRoYXQgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpbGwgYmUgb3ZlcnJpZGRlbiBieQpub24tZW1wdHkgc3JjIGF0dHJpYnV0ZSB2YWx1ZXMuCkRlcHJlY2F0ZWQ6IHVzZSBNZXJnZSjigKYpIHdpdGggV2l0aE92ZXJyaWRlCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoQXBwZW5kU2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzU5Ij5XaXRoQXBwZW5kU2xpY2U8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhBcHBlbmRTbGljZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uTGFiZWwiPmFkZGVkIGluPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25WZXJzaW9uIj52MC4zLjQ8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhBcHBlbmRTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoQXBwZW5kU2xpY2Ugd2lsbCBtYWtlIG1lcmdlIGFwcGVuZCBzbGljZXMgaW5zdGVhZCBvZiBvdmVyd3JpdGluZyBpdC4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzMzciPldpdGhPdmVycmlkZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aE92ZXJyaWRlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlKGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhPdmVycmlkZSB3aWxsIG1ha2UgbWVyZ2Ugb3ZlcnJpZGUgbm9uLWVtcHR5IGRzdCBhdHRyaWJ1dGVzIHdpdGggbm9uLWVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhPdmVycmlkZUVtcHR5U2xpY2UiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQ4Ij5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aE92ZXJyaWRlRW1wdHlTbGljZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcnJpZGVFbXB0eVNsaWNlIHdpbGwgbWFrZSBtZXJnZSBvdmVycmlkZSBlbXB0eSBkc3Qgc2xpY2Ugd2l0aCBlbXB0eSBzcmMgc2xpY2UuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUiIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzQyIj5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWU8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZSI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICAgICAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uTGFiZWwiPmFkZGVkIGluPC9zcGFuPgogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25WZXJzaW9uIj52MC4zLjk8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhPdmVyd3JpdGVXaXRoRW1wdHlWYWx1ZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoT3ZlcndyaXRlV2l0aEVtcHR5VmFsdWUgd2lsbCBtYWtlIG1lcmdlIG92ZXJyaWRlIG5vbiBlbXB0eSBkc3QgYXR0cmlidXRlcyB3aXRoIGVtcHR5IHNyYyBhdHRyaWJ1dGVzIHZhbHVlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhTbGljZURlZXBDb3B5IiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDM2OSI+V2l0aFNsaWNlRGVlcENvcHk8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1dpdGhTbGljZURlZXBDb3B5Ij7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTA8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhTbGljZURlZXBDb3B5KGNvbmZpZyAqPGEgaHJlZj0iI0NvbmZpZyI+Q29uZmlnPC9hPik8L3ByZT4KICAgIDwvZGl2PgogIDxwPldpdGhTbGljZURlZXBDb3B5IHdpbGwgbWVyZ2Ugc2xpY2UgZWxlbWVudCBvbmUgYnkgb25lIHdpdGggT3ZlcndyaXRlIGZsYWcuCjwvcD4KCiAgCgogICAgICAgIDwvZGl2PjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb24iPgoJICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJXaXRoVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZ1bmN0aW9uIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbkhlYWRlciI+CiAgICAgIDxzcGFuPmZ1bmMgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDMzMCI+V2l0aFRyYW5zZm9ybWVyczwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aFRyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhUcmFuc2Zvcm1lcnModHJhbnNmb3JtZXJzIDxhIGhyZWY9IiNUcmFuc2Zvcm1lcnMiPlRyYW5zZm9ybWVyczwvYT4pIGZ1bmMoKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHJhbnNmb3JtZXJzIGFkZHMgdHJhbnNmb3JtZXJzIHRvIG1lcmdlLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIG1lcmdpbmcgb2Ygc29tZSB0eXBlcy4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhUeXBlQ2hlY2siIGRhdGEta2luZD0iZnVuY3Rpb24iIGNsYXNzPSJEb2N1bWVudGF0aW9uLWZ1bmN0aW9uSGVhZGVyIj4KICAgICAgPHNwYW4+ZnVuYyA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMMzY0Ij5XaXRoVHlwZUNoZWNrPC9hPiA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1pZExpbmsiIGhyZWY9IiNXaXRoVHlwZUNoZWNrIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuODwvc3Bhbj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPmZ1bmMgV2l0aFR5cGVDaGVjayhjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRoVHlwZUNoZWNrIHdpbGwgbWFrZSBtZXJnZSBjaGVjayB0eXBlcyB3aGlsZSBvdmVyd3JpdGluZyBpdCAobXVzdCBiZSB1c2VkIHdpdGggV2l0aE92ZXJyaWRlKS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PGRpdiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1mdW5jdGlvbiI+CgkgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IldpdGhvdXREZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmdW5jdGlvbiIgY2xhc3M9IkRvY3VtZW50YXRpb24tZnVuY3Rpb25IZWFkZXIiPgogICAgICA8c3Bhbj5mdW5jIDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNvdXJjZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdlLmdvI0wzNTQiPldpdGhvdXREZXJlZmVyZW5jZTwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjV2l0aG91dERlcmVmZXJlbmNlIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogICAgICA8c3BhbiBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zaW5jZVZlcnNpb25MYWJlbCI+YWRkZWQgaW48L3NwYW4+CiAgICAgIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvblZlcnNpb24iPnYwLjMuMTU8L3NwYW4+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT5mdW5jIFdpdGhvdXREZXJlZmVyZW5jZShjb25maWcgKjxhIGhyZWY9IiNDb25maWciPkNvbmZpZzwvYT4pPC9wcmU+CiAgICA8L2Rpdj4KICA8cD5XaXRob3V0RGVyZWZlcmVuY2UgcHJldmVudHMgZGVyZWZlcmVuY2luZyBwb2ludGVycyB3aGVuIGV2YWx1YXRpbmcgd2hldGhlciB0aGV5IGFyZSBlbXB0eQooaS5lLiBhIG5vbi1uaWwgcG9pbnRlciBpcyBuZXZlciBjb25zaWRlcmVkIGVtcHR5KS4KPC9wPgoKICAKCiAgICAgICAgPC9kaXY+PC9zZWN0aW9uPgoKICA8aDMgdGFiaW5kZXg9Ii0xIiBpZD0icGtnLXR5cGVzIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlc0hlYWRlciI+VHlwZXMgPGEgaHJlZj0iI3BrZy10eXBlcyI+wrY8L2E+PC9oMz4KCiAgPHNlY3Rpb24gY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZXMiPjxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZSI+CiAgICAgIAogIAogIAogICAgPGg0IHRhYmluZGV4PSItMSIgaWQ9IkNvbmZpZyIgZGF0YS1raW5kPSJ0eXBlIiBjbGFzcz0iRG9jdW1lbnRhdGlvbi10eXBlSGVhZGVyIj4KICAgICAgPHNwYW4+dHlwZSA8YSBjbGFzcz0iRG9jdW1lbnRhdGlvbi1zb3VyY2UiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyNMNDAiPkNvbmZpZzwvYT4gPGEgY2xhc3M9IkRvY3VtZW50YXRpb24taWRMaW5rIiBocmVmPSIjQ29uZmlnIj7CtjwvYT48L3NwYW4+CiAgPHNwYW4gY2xhc3M9IkRvY3VtZW50YXRpb24tc2luY2VWZXJzaW9uIj4KICAgIAogIDwvc3Bhbj4KPC9oND4KCiAgICAKICAgIDxkaXYgY2xhc3M9IkRvY3VtZW50YXRpb24tZGVjbGFyYXRpb24iPgogICAgICA8cHJlPnR5cGUgQ29uZmlnIHN0cnVjdCB7CjxzcGFuIGlkPSJDb25maWcuVHJhbnNmb3JtZXJzIiBkYXRhLWtpbmQ9ImZpZWxkIj4JVHJhbnNmb3JtZXJzICAgICAgICAgPGEgaHJlZj0iI1RyYW5zZm9ybWVycyI+VHJhbnNmb3JtZXJzPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5PdmVyd3JpdGUiIGRhdGEta2luZD0iZmllbGQiPglPdmVyd3JpdGUgICAgICAgICAgICA8YSBocmVmPSIvYnVpbHRpbiNib29sIj5ib29sPC9hPgo8L3NwYW4+PHNwYW4gaWQ9IkNvbmZpZy5TaG91bGROb3REZXJlZmVyZW5jZSIgZGF0YS1raW5kPSJmaWVsZCI+CVNob3VsZE5vdERlcmVmZXJlbmNlIDxhIGhyZWY9Ii9idWlsdGluI2Jvb2wiPmJvb2w8L2E+Cjwvc3Bhbj48c3BhbiBpZD0iQ29uZmlnLkFwcGVuZFNsaWNlIiBkYXRhLWtpbmQ9ImZpZWxkIj4JQXBwZW5kU2xpY2UgICAgICAgICAgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPjxzcGFuIGlkPSJDb25maWcuVHlwZUNoZWNrIiBkYXRhLWtpbmQ9ImZpZWxkIj4JVHlwZUNoZWNrICAgICAgICAgICAgPGEgaHJlZj0iL2J1aWx0aW4jYm9vbCI+Ym9vbDwvYT4KPC9zcGFuPgk8c3BhbiBjbGFzcz0iY29tbWVudCI+Ly8gY29udGFpbnMgZmlsdGVyZWQgb3IgdW5leHBvcnRlZCBmaWVsZHM8L3NwYW4+Cn08L3ByZT4KICAgIDwvZGl2PgogIAoKICAKCiAgICA8L2Rpdj48ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLXR5cGUiPgogICAgICAKICAKICAKICAgIDxoNCB0YWJpbmRleD0iLTEiIGlkPSJUcmFuc2Zvcm1lcnMiIGRhdGEta2luZD0idHlwZSIgY2xhc3M9IkRvY3VtZW50YXRpb24tdHlwZUhlYWRlciI+CiAgICAgIDxzcGFuPnR5cGUgPGEgY2xhc3M9IkRvY3VtZW50YXRpb24tc291cmNlIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWVyZ2UuZ28jTDUyIj5UcmFuc2Zvcm1lcnM8L2E+IDxhIGNsYXNzPSJEb2N1bWVudGF0aW9uLWlkTGluayIgaHJlZj0iI1RyYW5zZm9ybWVycyI+wrY8L2E+PC9zcGFuPgogIDxzcGFuIGNsYXNzPSJEb2N1bWVudGF0aW9uLXNpbmNlVmVyc2lvbiI+CiAgICAKICA8L3NwYW4+CjwvaDQ+CgogICAgCiAgICA8ZGl2IGNsYXNzPSJEb2N1bWVudGF0aW9uLWRlY2xhcmF0aW9uIj4KICAgICAgPHByZT50eXBlIFRyYW5zZm9ybWVycyBpbnRlcmZhY2Ugewo8c3BhbiBpZD0iVHJhbnNmb3JtZXJzLlRyYW5zZm9ybWVyIiBkYXRhLWtpbmQ9Im1ldGhvZCI+CVRyYW5zZm9ybWVyKDxhIGhyZWY9Ii9yZWZsZWN0Ij5yZWZsZWN0PC9hPi48YSBocmVmPSIvcmVmbGVjdCNUeXBlIj5UeXBlPC9hPikgZnVuYyhkc3QsIHNyYyA8YSBocmVmPSIvcmVmbGVjdCI+cmVmbGVjdDwvYT4uPGEgaHJlZj0iL3JlZmxlY3QjVmFsdWUiPlZhbHVlPC9hPikgPGEgaHJlZj0iL2J1aWx0aW4jZXJyb3IiPmVycm9yPC9hPgo8L3NwYW4+fTwvcHJlPgogICAgPC9kaXY+CiAgCgogIAoKICAgIDwvZGl2Pjwvc2VjdGlvbj48L2Rpdj4gCgoKCgoKCiAgICAgIAogICAgPC9kaXY+CiAgPC9kaXY+CgogICAgICAgIAogICAgICAKICAgICAgCiAgICAgICAgCiAgPGRpdiBjbGFzcz0iVW5pdEZpbGVzIGpzLXVuaXRGaWxlcyI+CiAgICA8aDIgY2xhc3M9IlVuaXRGaWxlcy10aXRsZSIgaWQ9InNlY3Rpb24tc291cmNlZmlsZXMiPgogICAgICA8aW1nIGNsYXNzPSJnby1JY29uIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9pbnNlcnRfZHJpdmVfZmlsZV9nbV9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgIFNvdXJjZSBGaWxlcwogICAgICA8YSBjbGFzcz0iVW5pdEZpbGVzLWlkTGluayIgaHJlZj0iI3NlY3Rpb24tc291cmNlZmlsZXMiPsK2PC9hPgogICAgPC9oMj4KICAgIDxkaXYgY2xhc3M9IlVuaXRGaWxlcy10aXRsZUxpbmsiPgogICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby90cmVlL3YwLjMuMTYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIj5WaWV3IGFsbDwvYT4KICAgIDwvZGl2PgogICAgPGRpdj4KICAgICAgPHVsIGNsYXNzPSJVbml0RmlsZXMtZmlsZUxpc3QiPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L2RvYy5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJkb2MuZ28iPmRvYy5nbzwvYT4KICAgICAgICAgIDwvbGk+PGxpPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vaW1kYXJpby9tZXJnby9ibG9iL3YwLjMuMTYvbWFwLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9Im1hcC5nbyI+bWFwLmdvPC9hPgogICAgICAgICAgPC9saT48bGk+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvL2Jsb2IvdjAuMy4xNi9tZXJnZS5nbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJtZXJnZS5nbyI+bWVyZ2UuZ288L2E+CiAgICAgICAgICA8L2xpPjxsaT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2ltZGFyaW8vbWVyZ28vYmxvYi92MC4zLjE2L21lcmdvLmdvIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciIgdGl0bGU9Im1lcmdvLmdvIj5tZXJnby5nbzwvYT4KICAgICAgICAgIDwvbGk+PC91bD4KICAgIDwvZGl2PgogIDwvZGl2PgoKICAgICAgCiAgICAgIAogICAgPC9kaXY+CiAgPC9kaXY+CjwvYXJ0aWNsZT4KICAgIDxmb290ZXIgY2xhc3M9ImdvLU1haW4tZm9vdGVyIj48L2Zvb3Rlcj4KICA8L21haW4+CgogICAgCiAgPGZvb3RlciBjbGFzcz0iZ28tRm9vdGVyIj4KICAgIAogICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtzIj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFdoeSBHbwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zb2x1dGlvbnMjdXNlLWNhc2VzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVXNlIENhc2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3NvbHV0aW9ucyNjYXNlLXN0dWRpZXMiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDYXNlIFN0dWRpZXMKICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJnby1Gb290ZXItbGlua0NvbHVtbiI+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9sZWFybi5nby5kZXYvIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsgZ28tRm9vdGVyLWxpbmstLXByaW1hcnkiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR2V0IFN0YXJ0ZWQKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wbGF5LmdvbGFuZy5vcmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBQbGF5Z3JvdW5kCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdG91ci5nb2xhbmcub3JnIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgVG91cgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvZ28/dGFiPU5ld2VzdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFN0YWNrIE92ZXJmbG93CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L2hlbHAiIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBIZWxwCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldiIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIGdvLUZvb3Rlci1saW5rLS1wcmltYXJ5IgogICAgICAgICAgICBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9zdGQiIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdGFuZGFyZCBMaWJyYXJ5CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Ii9nb2xhbmcub3JnL3giIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTdWItcmVwb3NpdG9yaWVzCiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcGtnLmdvLmRldi9hYm91dCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEFib3V0IEdvIFBhY2thZ2VzCiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tRm9vdGVyLWxpbmtDb2x1bW4iPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ28uZGV2L3Byb2plY3QiIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBBYm91dAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kbC8iIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+RG93bmxvYWQ8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvYmxvZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5CbG9nPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9nb2xhbmcvZ28vaXNzdWVzIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgSXNzdWUgVHJhY2tlcgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9kb2MvZGV2ZWwvcmVsZWFzZS5odG1sIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiCiAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgUmVsZWFzZSBOb3RlcwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2Jsb2cuZ29sYW5nLm9yZy9nby1icmFuZCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIEJyYW5kIEd1aWRlbGluZXMKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29uZHVjdCIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIENvZGUgb2YgQ29uZHVjdAogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1saW5rQ29sdW1uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy50d2l0dGVyLmNvbS9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayBnby1Gb290ZXItbGluay0tcHJpbWFyeSIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBDb25uZWN0CiAgICAgICAgPC9hPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIFR3aXR0ZXIKICAgICAgICA8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5HaXRIdWI8L2E+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9pbnZpdGUuc2xhY2suZ29sYW5nYnJpZGdlLm9yZy8iIGNsYXNzPSJnby1Gb290ZXItbGluayIKICAgICAgICAgICAgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICBTbGFjawogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3JlZGRpdC5jb20vci9nb2xhbmciIGNsYXNzPSJnby1Gb290ZXItbGluayIgZGF0YS1ndG1jPSJmb290ZXIgbGluayI+CiAgICAgICAgICByL2dvbGFuZwogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5tZWV0dXAuY29tL3Byby9nbyIgY2xhc3M9ImdvLUZvb3Rlci1saW5rIiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj4KICAgICAgICAgIE1lZXR1cAogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL2dvbGFuZ3dlZWtseS5jb20vIiBjbGFzcz0iZ28tRm9vdGVyLWxpbmsiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgR29sYW5nIFdlZWtseQogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImdvLUZvb3Rlci1ib3R0b20iPgogICAgICA8aW1nIGNsYXNzPSJnby1Gb290ZXItZ29waGVyIiAgd2lkdGg9IjE0MzEiIGhlaWdodD0iOTAxIgogICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9nb3BoZXIvcGlsb3QtYnVzdC0xNDMxeDkwMS5zdmciIGFsdD0iR29waGVyIGluIGZsaWdodCBnb2dnbGVzIj4KICAgICAgPHVsIGNsYXNzPSJnby1Gb290ZXItbGlzdFJvdyI+CiAgICAgICAgPGxpIGNsYXNzPSJnby1Gb290ZXItbGlzdEl0ZW0iPgogICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9nby5kZXYvY29weXJpZ2h0IiBkYXRhLWd0bWM9ImZvb3RlciBsaW5rIj5Db3B5cmlnaHQ8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi90b3MiIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPlRlcm1zIG9mIFNlcnZpY2U8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lmdvb2dsZS5jb20vaW50bC9lbi9wb2xpY2llcy9wcml2YWN5LyIgZGF0YS1ndG1jPSJmb290ZXIgbGluayIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciI+CiAgICAgICAgICAgIFByaXZhY3kgUG9saWN5CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9ImdvLUZvb3Rlci1saXN0SXRlbSI+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2dvLmRldi9zL3BrZ3NpdGUtZmVlZGJhY2siIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIgogICAgICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgICAgICBSZXBvcnQgYW4gSXNzdWUKICAgICAgICAgIDwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0iZ28tRm9vdGVyLWxpc3RJdGVtIj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLXRvZ2dsZVRoZW1lIGpzLXRvZ2dsZVRoZW1lIiBhcmlhLWxhYmVsPSJUb2dnbGUgdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImF1dG8iIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzZfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJTeXN0ZW0gdGhlbWUiPgogICAgICAgICAgICA8aW1nIGRhdGEtdmFsdWU9ImRhcmsiIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9icmlnaHRuZXNzXzJfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJEYXJrIHRoZW1lIj4KICAgICAgICAgICAgPGltZyBkYXRhLXZhbHVlPSJsaWdodCIgY2xhc3M9ImdvLUljb24gZ28tSWNvbi0taW52ZXJ0ZWQiIGhlaWdodD0iMjQiIHdpZHRoPSIyNCIgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2xpZ2h0X21vZGVfZ21fZ3JleV8yNGRwLnN2ZyIgYWx0PSJMaWdodCB0aGVtZSI+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiBnby1CdXR0b24tLXRleHQgZ28tRm9vdGVyLWtleWJvYXJkIGpzLW9wZW5TaG9ydGN1dHMiIGFyaWEtbGFiZWw9Ik9wZW4gc2hvcmN1dHMgbW9kYWwiPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJnby1JY29uIGdvLUljb24tLWludmVydGVkIiBoZWlnaHQ9IjI0IiB3aWR0aD0iMjQiIHNyYz0iL3N0YXRpYy9zaGFyZWQvaWNvbi9rZXlib2FyZF9ncmV5XzI0ZHAuc3ZnIiBhbHQ9IiI+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgICA8YSBjbGFzcz0iZ28tRm9vdGVyLWdvb2dsZUxvZ28iIGhyZWY9Imh0dHBzOi8vZ29vZ2xlLmNvbSIgdGFyZ2V0PSJfYmxhbmsicmVsPSJub29wZW5lciIKICAgICAgICAgIGRhdGEtZ3RtYz0iZm9vdGVyIGxpbmsiPgogICAgICAgIDxpbWcgY2xhc3M9ImdvLUZvb3Rlci1nb29nbGVMb2dvSW1nIiBoZWlnaHQ9IjI0IiB3aWR0aD0iNzIiCiAgICAgICAgICAgIHNyYz0iL3N0YXRpYy9zaGFyZWQvbG9nby9nb29nbGUtd2hpdGUuc3ZnIiBhbHQ9Ikdvb2dsZSBsb2dvIj4KICAgICAgPC9hPgogICAgPC9kaXY+CiAgPC9mb290ZXI+CgogICAgCiAgPGRpYWxvZyBpZD0ianVtcC10by1tb2RhbCIgY2xhc3M9Ikp1bXBEaWFsb2cgZ28tTW9kYWwgZ28tTW9kYWwtLW1kIGpzLW1vZGFsIj4KICAgIDxmb3JtIG1ldGhvZD0iZGlhbG9nIiBkYXRhLWdtdGM9Imp1bXAgdG8gZm9ybSIgYXJpYS1sYWJlbD0iSnVtcCB0byBJZGVudGlmaWVyIj4KICAgICAgPGRpdiBjbGFzcz0iRGlhbG9nLXRpdGxlIGdvLU1vZGFsLWhlYWRlciI+CiAgICAgICAgPGgyPkp1bXAgdG88L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctZmlsdGVyIj4KICAgICAgICA8aW5wdXQgY2xhc3M9Ikp1bXBEaWFsb2ctaW5wdXQgZ28tSW5wdXQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB0eXBlPSJ0ZXh0Ij4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Ikp1bXBEaWFsb2ctYm9keSBnby1Nb2RhbC1ib2R5Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJKdW1wRGlhbG9nLWxpc3QiPjwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ28tTW9kYWwtYWN0aW9ucyI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ28tQnV0dG9uIiBkYXRhLXRlc3QtaWQ9ImNsb3NlLWRpYWxvZyI+Q2xvc2U8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CiAgPC9kaWFsb2c+CgogIDxkaWFsb2cgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZyBnby1Nb2RhbCBnby1Nb2RhbC0tc20ganMtbW9kYWwiPgogICAgPGZvcm0gbWV0aG9kPSJkaWFsb2ciPgogICAgICA8ZGl2IGNsYXNzPSJnby1Nb2RhbC1oZWFkZXIiPgogICAgICAgIDxoMj5LZXlib2FyZCBzaG9ydGN1dHM8L2gyPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGNsYXNzPSJnby1CdXR0b24gZ28tQnV0dG9uLS1pbmxpbmUiCiAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlCiAgICAgICAgICBkYXRhLWd0bWM9Im1vZGFsIGJ1dHRvbiIKICAgICAgICAgIGFyaWEtbGFiZWw9IkNsb3NlIgogICAgICAgID4KICAgICAgICAgIDxpbWcKICAgICAgICAgICAgY2xhc3M9ImdvLUljb24iCiAgICAgICAgICAgIGhlaWdodD0iMjQiCiAgICAgICAgICAgIHdpZHRoPSIyNCIKICAgICAgICAgICAgc3JjPSIvc3RhdGljL3NoYXJlZC9pY29uL2Nsb3NlX2dtX2dyZXlfMjRkcC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgLz4KICAgICAgICA8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWJvZHkiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4/PC9zdHJvbmc+PC90ZD48dGQ+IDogVGhpcyBtZW51PC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iU2hvcnRjdXRzRGlhbG9nLWtleSI+CiAgICAgICAgICAgICAgPHN0cm9uZz4vPC9zdHJvbmc+PC90ZD48dGQ+IDogU2VhcmNoIHNpdGU8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJTaG9ydGN1dHNEaWFsb2cta2V5Ij4KICAgICAgICAgICAgICA8c3Ryb25nPmY8L3N0cm9uZz4gb3IgPHN0cm9uZz5GPC9zdHJvbmc+PC90ZD48dGQ+IDogSnVtcCB0bzwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGQgY2xhc3M9IlNob3J0Y3V0c0RpYWxvZy1rZXkiPjxzdHJvbmc+eTwvc3Ryb25nPiBvciA8c3Ryb25nPlk8L3N0cm9uZz48L3RkPgogICAgICAgICAgICAgIDx0ZD4gOiBDYW5vbmljYWwgVVJMPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvLU1vZGFsLWFjdGlvbnMiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiIgZGF0YS10ZXN0LWlkPSJjbG9zZS1kaWFsb2ciPkNsb3NlPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgPC9mb3JtPgogIDwvZGlhbG9nPgoKICAgIAogICAgICA8c2VjdGlvbiBjbGFzcz0iQ29va2llLW5vdGljZSBqcy1jb29raWVOb3RpY2UiPgogICAgICAgIDxkaXY+Z28uZGV2IHVzZXMgY29va2llcyBmcm9tIEdvb2dsZSB0byBkZWxpdmVyIGFuZCBlbmhhbmNlIHRoZSBxdWFsaXR5IG9mIGl0cyBzZXJ2aWNlcyBhbmQgdG8KICAgICAgICBhbmFseXplIHRyYWZmaWMuIDxhIHRhcmdldD1fYmxhbmsgaHJlZj0iaHR0cHM6Ly9wb2xpY2llcy5nb29nbGUuY29tL3RlY2hub2xvZ2llcy9jb29raWVzIj5MZWFybiBtb3JlLjwvYT48L2Rpdj4KICAgICAgICA8ZGl2PjxidXR0b24gY2xhc3M9ImdvLUJ1dHRvbiI+T2theTwvYnV0dG9uPjwvZGl2PgogICAgICA8L3NlY3Rpb24+CiAgICAKICAgIAogICAgICA8c2NyaXB0PgogICAgICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBpZiB0aGUgcXVlcnlTZWxlY3RvciBjYW7igJl0IGZpbmQgdGhlIGVsZW1lbnQKICAgICAgICBjb25zdCBndG1JZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1ndG1JRCcpLmRhdGFzZXQuZ3RtaWQ7CiAgICAgICAgaWYgKCFndG1JZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb29nbGUgVGFnIE1hbmFnZXIgSUQgbm90IGZvdW5kJyk7CiAgICAgICAgfQogICAgICAgIGxvYWRTY3JpcHQoYGh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0ke2d0bUlkfWApOwogICAgICA8L3NjcmlwdD4KICAgICAgPG5vc2NyaXB0PgogICAgICAgIDxpZnJhbWUgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ucy5odG1sP2lkPUdUTS1XOE1WUVhHIgogICAgICAgICAgICAgICAgaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+CiAgICAgICAgPC9pZnJhbWU+CiAgICAgIDwvbm9zY3JpcHQ+CiAgICAKICAgIAogIAogIDxkaXYgY2xhc3M9ImpzLWNhbm9uaWNhbFVSTFBhdGgiIGRhdGEtY2Fub25pY2FsLXVybC1wYXRoPSIvZ2l0aHViLmNvbS9pbWRhcmlvL21lcmdvQHYwLjMuMTYiIGhpZGRlbj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJqcy1wbGF5Z3JvdW5kVmFycyIgZGF0YS1tb2R1bGVwYXRoPSJnaXRodWIuY29tL2ltZGFyaW8vbWVyZ28iIGRhdGEtdmVyc2lvbj0idjAuMy4xNiIgaGlkZGVuPjwvZGl2PgogIDxzY3JpcHQ+CiAgICBsb2FkU2NyaXB0KCcvc3RhdGljL2Zyb250ZW5kL3VuaXQvbWFpbi9tYWluLmpzJykKICA8L3NjcmlwdD4KCiAgPHNjcmlwdD4KICAgIGxvYWRTY3JpcHQoJy9zdGF0aWMvZnJvbnRlbmQvdW5pdC91bml0LmpzJykKICA8L3NjcmlwdD4KCiAgPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.3.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4091556064732006113'
      X-Datadog-Parent-Id:
      - '2119875519263697793'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:29 GMT
      Expires:
      - Thu, 20 Jul 2023 01:32:29 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '20'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.3","Time":"2018-04-02T13:55:43Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2196302111405100937'
      X-Datadog-Parent-Id:
      - '122603717364797213'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:49 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.15.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1766779601068663716'
      X-Datadog-Parent-Id:
      - '1869343200339696920'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '191'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:41:30 GMT
      Expires:
      - Wed, 19 Jul 2023 23:41:30 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '6679'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.15","Time":"2023-03-24T09:53:52Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v0.3.15","Hash":"fb3c08209137e2760d63653c9098745d157e2986"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2488395636276679733'
      X-Datadog-Parent-Id:
      - '3144135590827252117'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:49 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:49 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.14.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1145441062234878342'
      X-Datadog-Parent-Id:
      - '2265836411973512411'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '191'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:26:15 GMT
      Expires:
      - Thu, 20 Jul 2023 00:26:15 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '3995'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.14","Time":"2023-03-15T22:59:33Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v0.3.14","Hash":"d19834bb682056bd1eec5dfe6d9ec9bd9d6ba58f"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:50 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2717701432228640715'
      X-Datadog-Parent-Id:
      - '1122110163956629142'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:50 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:50 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.10.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2645439947699892567'
      X-Datadog-Parent-Id:
      - '521354047223026808'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '51'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:30 GMT
      Expires:
      - Thu, 20 Jul 2023 01:32:30 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '20'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.10","Time":"2020-07-18T11:18:36Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:50 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/imdario/mergo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1401111454386631569'
      X-Datadog-Parent-Id:
      - '382636612412533135'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:32:50 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:50 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1360857445858740240'
      X-Datadog-Parent-Id:
      - '1314048547954502242'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '23'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:50 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2870772526476599096'
      X-Datadog-Parent-Id:
      - '203686128197216136'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5715'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:50 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1922115615063692158'
      X-Datadog-Parent-Id:
      - '2474011083011546161'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:51 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:51 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '931440059864635839'
      X-Datadog-Parent-Id:
      - '1251426213012988683'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:51 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:51 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4138032852804073838'
      X-Datadog-Parent-Id:
      - '579365034340016317'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '24'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:51 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '272689505864661674'
      X-Datadog-Parent-Id:
      - '3514873792976637590'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5716'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:51 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3982570471835906416'
      X-Datadog-Parent-Id:
      - '1055296421408618732'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:52 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:52 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2177290330166741829'
      X-Datadog-Parent-Id:
      - '4172994977896874833'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:52 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:52 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '392334537915766715'
      X-Datadog-Parent-Id:
      - '952252570751082213'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '25'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:52 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2238555813374314656'
      X-Datadog-Parent-Id:
      - '3559728530544074945'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5717'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:52 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '379370376596068799'
      X-Datadog-Parent-Id:
      - '3058788913395519374'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:52 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:52 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1580845355603845173'
      X-Datadog-Parent-Id:
      - '1792094931843063802'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:53 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:53 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3480504249661117679'
      X-Datadog-Parent-Id:
      - '453651657164534544'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '26'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:53 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1945407362000873135'
      X-Datadog-Parent-Id:
      - '4370820101765894634'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5718'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:53 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4546723802390464028'
      X-Datadog-Parent-Id:
      - '4283135468598805369'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:53 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:53 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3197349914272596780'
      X-Datadog-Parent-Id:
      - '90460931934161311'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:53 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:53 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2038913530524440030'
      X-Datadog-Parent-Id:
      - '920494517072238079'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '27'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:53 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2185763282711849594'
      X-Datadog-Parent-Id:
      - '4555058060032722350'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5719'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:54 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2609775127986000804'
      X-Datadog-Parent-Id:
      - '2371187236192866336'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:54 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:54 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2286590247780905468'
      X-Datadog-Parent-Id:
      - '3444772309115710176'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:54 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:54 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1736351857209911350'
      X-Datadog-Parent-Id:
      - '2627468051335184633'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '27'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:54 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3199905729765273829'
      X-Datadog-Parent-Id:
      - '2504748729819614252'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5719'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:54 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1831659262443556250'
      X-Datadog-Parent-Id:
      - '1126095892680277922'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:55 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:55 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '644872314782398570'
      X-Datadog-Parent-Id:
      - '890554456862901000'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:55 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:55 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '298213836626309467'
      X-Datadog-Parent-Id:
      - '4334515550828937229'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '28'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:55 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4531573096630059519'
      X-Datadog-Parent-Id:
      - '2595520885408123190'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5720'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:55 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3375170649528399383'
      X-Datadog-Parent-Id:
      - '2757813653011044604'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:55 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:55 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1743144826460609258'
      X-Datadog-Parent-Id:
      - '3913178948414746792'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:56 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:56 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '49581061018736616'
      X-Datadog-Parent-Id:
      - '1660612345545706191'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '29'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:56 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2828377879377331161'
      X-Datadog-Parent-Id:
      - '975048236548895544'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5721'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:56 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4383987456754133736'
      X-Datadog-Parent-Id:
      - '1253348330360784087'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:56 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:56 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '400876054204996390'
      X-Datadog-Parent-Id:
      - '3654900940356933201'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:56 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:56 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '276757375548552196'
      X-Datadog-Parent-Id:
      - '878026866850178942'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '29'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:56 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '62481646762074067'
      X-Datadog-Parent-Id:
      - '1652352047510274932'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5721'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:56 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '184711949686790953'
      X-Datadog-Parent-Id:
      - '931068794633937248'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:57 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:57 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4569184955268264077'
      X-Datadog-Parent-Id:
      - '3563748831779773063'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:57 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:57 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2481504417366737463'
      X-Datadog-Parent-Id:
      - '2408435739850586031'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '30'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:57 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '795572838934658896'
      X-Datadog-Parent-Id:
      - '3726673258454829146'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5722'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:57 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1512484376681033981'
      X-Datadog-Parent-Id:
      - '314402825951322191'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:57 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:57 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2758979840057957435'
      X-Datadog-Parent-Id:
      - '1137661886146893705'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:58 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:58 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '55023249000577287'
      X-Datadog-Parent-Id:
      - '2986089549346331438'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '31'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:58 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2411216115467881604'
      X-Datadog-Parent-Id:
      - '3808242888704958438'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5723'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:58 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '173543734333785208'
      X-Datadog-Parent-Id:
      - '3586152838394653396'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:58 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:58 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1126291457652156774'
      X-Datadog-Parent-Id:
      - '4338342927849795627'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:58 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:58 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4396030772638497324'
      X-Datadog-Parent-Id:
      - '3283701462044231857'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '32'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:59 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '58278737258140099'
      X-Datadog-Parent-Id:
      - '1349981824461280816'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5724'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:59 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2730297319138159781'
      X-Datadog-Parent-Id:
      - '2547395889456767100'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:59 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:59 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1269064743066825088'
      X-Datadog-Parent-Id:
      - '1303935438987492862'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:32:59 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:59 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1622683323744750226'
      X-Datadog-Parent-Id:
      - '997613336725345482'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '32'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:59 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '985437078311041108'
      X-Datadog-Parent-Id:
      - '2107991661873388223'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5724'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:32:59 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3083015230617681362'
      X-Datadog-Parent-Id:
      - '3104975751668337961'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:33:00 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:00 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '667001515099652876'
      X-Datadog-Parent-Id:
      - '3933320598573582089'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:33:00 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:00 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2654295527262642110'
      X-Datadog-Parent-Id:
      - '3158237198537177470'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '33'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:00 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '882900565133704000'
      X-Datadog-Parent-Id:
      - '1112374478920512028'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5725'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:00 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2011464649618899171'
      X-Datadog-Parent-Id:
      - '998323685986891808'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:33:00 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:00 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4533032097025685643'
      X-Datadog-Parent-Id:
      - '454977902955014557'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:33:01 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:01 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3362050410646474597'
      X-Datadog-Parent-Id:
      - '3487544702269130342'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '189'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:27 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:27 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '34'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.0.0","Time":"2023-06-20T06:39:01Z","Origin":{"VCS":"git","URL":"https://github.com/imdario/mergo","Ref":"refs/tags/v1.0.0","Hash":"131de815afc35a77c41ae99da6c8f4288b6cb513"}}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:01 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1280090196748636268'
      X-Datadog-Parent-Id:
      - '1675004893383492747'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '65'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 20:57:35 GMT
      Expires:
      - Wed, 19 Jul 2023 23:57:35 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5726'
      Last-Modified:
      - Tue, 20 Jun 2023 06:45:50 GMT
      Etag:
      - '"e23c4b803a6c6e6e45747946e87d24704cd77756cc484bdfd17b57223bf320d6"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module dario.cat/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:01 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '224927932962059171'
      X-Datadog-Parent-Id:
      - '62822132125669290'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:33:01 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:01 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v3?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1148712116686761453'
      X-Datadog-Parent-Id:
      - '1737462560668906222'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 19 Jul 2023 22:33:01 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v3 git https://gopkg.in/yaml.v3">
        <meta name="go-source" content="gopkg.in/yaml.v3 _ https://github.com/go-yaml/yaml/tree/v3.0.1{/dir} https://github.com/go-yaml/yaml/blob/v3.0.1{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v3
        </body>
        </html>
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:01 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2687789258394412486'
      X-Datadog-Parent-Id:
      - '3674022191435381183'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:02 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/list
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1968100090932963663'
      X-Datadog-Parent-Id:
      - '4392662902369256512'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Length:
      - '49'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 19 Jul 2023 22:33:02 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:02 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        v0.3.9
        v0.3.8
        v0.3.6
        v0.3.4
        v0.3.7
        v0.3.5
        v0.3.3
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:02 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '161794397173963016'
      X-Datadog-Parent-Id:
      - '435549457773985153'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.9.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4597309721635962089'
      X-Datadog-Parent-Id:
      - '3144112426028345422'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Expires:
      - Thu, 20 Jul 2023 01:33:06 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.9","Time":"2020-03-24T21:25:48Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1759367143183019341'
      X-Datadog-Parent-Id:
      - '4559831178649420681'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.8.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '762002756995803005'
      X-Datadog-Parent-Id:
      - '1088037218908392379'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Expires:
      - Thu, 20 Jul 2023 01:33:06 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.8","Time":"2019-10-03T07:39:17Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2230418104508210423'
      X-Datadog-Parent-Id:
      - '2039637415428339877'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.6.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '993573741836090711'
      X-Datadog-Parent-Id:
      - '3509932855517577078'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Expires:
      - Thu, 20 Jul 2023 01:33:06 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.6","Time":"2018-07-30T21:26:40Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1512112303954324412'
      X-Datadog-Parent-Id:
      - '3973483152425811794'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.4.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2997346123909718603'
      X-Datadog-Parent-Id:
      - '2628093740505916884'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Expires:
      - Thu, 20 Jul 2023 01:33:06 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.4","Time":"2018-04-04T21:29:33Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2957148651914045168'
      X-Datadog-Parent-Id:
      - '1922957100096534461'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:06 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:06 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.7.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4340685655401316657'
      X-Datadog-Parent-Id:
      - '2403525858232510698'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 19:58:19 GMT
      Expires:
      - Wed, 19 Jul 2023 22:58:19 GMT
      Cache-Control:
      - public, max-age=10800
      Content-Type:
      - application/json
      Age:
      - '9288'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.7","Time":"2019-01-23T23:28:27Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2179751596113440616'
      X-Datadog-Parent-Id:
      - '2533024696043916948'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:07 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.5.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3909868232847930585'
      X-Datadog-Parent-Id:
      - '2669056508021278518'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:33:07 GMT
      Expires:
      - Thu, 20 Jul 2023 01:33:07 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.5","Time":"2018-06-08T14:01:56Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3669764926215765988'
      X-Datadog-Parent-Id:
      - '4335130046963247240'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:07 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.3.info
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '396006717273082090'
      X-Datadog-Parent-Id:
      - '1626583287107095972'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '50'
      Content-Type:
      - application/json
      Date:
      - Wed, 19 Jul 2023 22:33:07 GMT
      Expires:
      - Thu, 20 Jul 2023 01:33:07 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v0.3.3","Time":"2018-04-02T13:55:43Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://pkg.go.dev/gopkg.in/imdario/mergo.v0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '770209776835502809'
      X-Datadog-Parent-Id:
      - '2743834039749765281'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Wed, 19 Jul 2023 22:33:07 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1644540432194207884'
      X-Datadog-Parent-Id:
      - '722408003039459594'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '2'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '155462114496289469'
      X-Datadog-Parent-Id:
      - '3627242380620502638'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '2'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3157098275181151755'
      X-Datadog-Parent-Id:
      - '1273261437798673332'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '2'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3140476754951639756'
      X-Datadog-Parent-Id:
      - '3834262427306841972'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '2'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3391582187814374296'
      X-Datadog-Parent-Id:
      - '1049547640700383937'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '3'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:07 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2600713558691138007'
      X-Datadog-Parent-Id:
      - '580721905786055758'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '3'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:08 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1546901894193716006'
      X-Datadog-Parent-Id:
      - '2477035820132128620'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '143'
      Date:
      - Wed, 19 Jul 2023 22:33:05 GMT
      Expires:
      - Wed, 19 Jul 2023 22:34:05 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '3'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: gopkg.in/imdario/mergo.v0@v0.3.16: invalid version: go.mod
        has non-....v0 module path "github.com/imdario/mergo" at revision v0.3.16'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:08 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3847830962050311178'
      X-Datadog-Parent-Id:
      - '2001667751257105174'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '50'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 22:32:24 GMT
      Expires:
      - Wed, 19 Jul 2023 22:33:24 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - application/json
      Age:
      - '45'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: '{"Version":"v1.2.0","Time":"2018-05-05T20:34:41Z"}'
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:09 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.2.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1606364190794685103'
      X-Datadog-Parent-Id:
      - '912968180103747033'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '30'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Wed, 19 Jul 2023 21:24:46 GMT
      Expires:
      - Thu, 20 Jul 2023 00:24:46 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '4103'
      Last-Modified:
      - Mon, 17 Jun 2019 12:19:42 GMT
      Etag:
      - '"38c3512f0207856125c29e96d7919ed25e0c2c5aa18f09208e5bc227e580f584"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/robfig/cron

        '
    http_version:
  recorded_at: Wed, 19 Jul 2023 22:33:09 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.0-rc1.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2113551630485558275'
      X-Datadog-Parent-Id:
      - '3418065264249775283'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '42'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:50:05 GMT
      Etag:
      - '"f895601ed42554966d2979f56420f655966b079254d92205b53828422298244f"'
      Expires:
      - Thu, 20 Jul 2023 21:50:05 GMT
      Last-Modified:
      - Mon, 17 Jun 2019 12:48:28 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/robfig/cron/v3

        go 1.12
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:50:05 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/v3/@v/v3.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3158066277479107692'
      X-Datadog-Parent-Id:
      - '1657788044118762161'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '42'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 17:46:58 GMT
      Expires:
      - Thu, 20 Jul 2023 20:46:58 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '3787'
      Last-Modified:
      - Thu, 11 Jul 2019 19:10:18 GMT
      Etag:
      - '"f895601ed42554966d2979f56420f655966b079254d92205b53828422298244f"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/robfig/cron/v3

        go 1.12
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:50:05 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v3.0.0-rc1.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3549959377209316754'
      X-Datadog-Parent-Id:
      - '1615659229231258589'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=1797
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:50:08 GMT
      Expires:
      - Thu, 20 Jul 2023 19:20:05 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '144'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: github.com/robfig/cron@v3.0.0-rc1: invalid version: go.mod
        has post-v3 module path "github.com/robfig/cron/v3" at revision v3.0.0-rc1'
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:50:08 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.0.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2427875521604696370'
      X-Datadog-Parent-Id:
      - '867165015529333088'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '30'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:50:42 GMT
      Etag:
      - '"38c3512f0207856125c29e96d7919ed25e0c2c5aa18f09208e5bc227e580f584"'
      Expires:
      - Thu, 20 Jul 2023 21:50:42 GMT
      Last-Modified:
      - Tue, 04 Jun 2019 11:05:10 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/robfig/cron

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:50:42 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/robfig/cron/@v/v1.1.0.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '833640688614663403'
      X-Datadog-Parent-Id:
      - '4063563045494645215'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '30'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 17:23:33 GMT
      Expires:
      - Thu, 20 Jul 2023 20:23:33 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5229'
      Last-Modified:
      - Sun, 05 May 2019 12:19:27 GMT
      Etag:
      - '"38c3512f0207856125c29e96d7919ed25e0c2c5aa18f09208e5bc227e580f584"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/robfig/cron

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:50:42 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.9.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1058072855752782877'
      X-Datadog-Parent-Id:
      - '3397573137486943042'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 17:25:58 GMT
      Expires:
      - Thu, 20 Jul 2023 20:25:58 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5117'
      Last-Modified:
      - Tue, 24 Mar 2020 21:33:08 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:15 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.11.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4350873820086294808'
      X-Datadog-Parent-Id:
      - '978202524441258517'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 17:34:53 GMT
      Expires:
      - Thu, 20 Jul 2023 20:34:53 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '4582'
      Last-Modified:
      - Tue, 11 Aug 2020 19:51:41 GMT
      Etag:
      - '"31bbd3c9d8b390093bf1f10994207cbf5c158797283911af5dad728a344e3af9"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v2 v2.3.0
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:15 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v2?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '886497995991611823'
      X-Datadog-Parent-Id:
      - '4539746469678557667'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 20 Jul 2023 18:51:16 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v2 git https://gopkg.in/yaml.v2">
        <meta name="go-source" content="gopkg.in/yaml.v2 _ https://github.com/go-yaml/yaml/tree/v2.4.0{/dir} https://github.com/go-yaml/yaml/blob/v2.4.0{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v2
        </body>
        </html>
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v2?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2459372966420288278'
      X-Datadog-Parent-Id:
      - '4152358375996797470'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 20 Jul 2023 18:51:16 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v2 git https://gopkg.in/yaml.v2">
        <meta name="go-source" content="gopkg.in/yaml.v2 _ https://github.com/go-yaml/yaml/tree/v2.4.0{/dir} https://github.com/go-yaml/yaml/blob/v2.4.0{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v2
        </body>
        </html>
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.8.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2436536943669157230'
      X-Datadog-Parent-Id:
      - '1222657162509394174'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 16:30:01 GMT
      Expires:
      - Thu, 20 Jul 2023 19:30:01 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '8475'
      Last-Modified:
      - Thu, 03 Oct 2019 11:24:54 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.6.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '914258219069045068'
      X-Datadog-Parent-Id:
      - '3982915119912269344'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 16:54:38 GMT
      Expires:
      - Thu, 20 Jul 2023 19:54:38 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '6998'
      Last-Modified:
      - Thu, 11 Apr 2019 14:57:29 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.4.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2364706387307947469'
      X-Datadog-Parent-Id:
      - '3200782742951264807'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 17:15:19 GMT
      Expires:
      - Thu, 20 Jul 2023 20:15:19 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '5757'
      Last-Modified:
      - Thu, 11 Apr 2019 15:08:21 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.7.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '308623599372650992'
      X-Datadog-Parent-Id:
      - '3881604664234477882'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 16:46:41 GMT
      Expires:
      - Thu, 20 Jul 2023 19:46:41 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '7475'
      Last-Modified:
      - Thu, 11 Apr 2019 18:51:53 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.5.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2670644310961257710'
      X-Datadog-Parent-Id:
      - '1388980770519249621'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '32'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 17:53:57 GMT
      Expires:
      - Thu, 20 Jul 2023 20:53:57 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '3439'
      Last-Modified:
      - Tue, 23 Apr 2019 21:16:57 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.13.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3327841570290926172'
      X-Datadog-Parent-Id:
      - '202230531017078660'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 18:22:40 GMT
      Expires:
      - Thu, 20 Jul 2023 21:22:40 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '1716'
      Last-Modified:
      - Wed, 25 May 2022 20:16:41 GMT
      Etag:
      - '"ca5731139deb241ecd04a991864e74e16cc922493ee217b59ae6c5ae309a07ac"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.0
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.12.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3538492031461827548'
      X-Datadog-Parent-Id:
      - '1346586368379878000'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 18:20:00 GMT
      Expires:
      - Thu, 20 Jul 2023 21:20:00 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '1876'
      Last-Modified:
      - Tue, 09 Mar 2021 21:44:30 GMT
      Etag:
      - '"31bbd3c9d8b390093bf1f10994207cbf5c158797283911af5dad728a344e3af9"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v2 v2.3.0
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:16 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v2?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4505622816185477376'
      X-Datadog-Parent-Id:
      - '2545516039630203531'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 20 Jul 2023 18:51:17 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v2 git https://gopkg.in/yaml.v2">
        <meta name="go-source" content="gopkg.in/yaml.v2 _ https://github.com/go-yaml/yaml/tree/v2.4.0{/dir} https://github.com/go-yaml/yaml/blob/v2.4.0{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v2
        </body>
        </html>
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:17 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v2?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1333145646659667210'
      X-Datadog-Parent-Id:
      - '777517126011878620'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 20 Jul 2023 18:51:17 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v2 git https://gopkg.in/yaml.v2">
        <meta name="go-source" content="gopkg.in/yaml.v2 _ https://github.com/go-yaml/yaml/tree/v2.4.0{/dir} https://github.com/go-yaml/yaml/blob/v2.4.0{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v2
        </body>
        </html>
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:17 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.16.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1034607045942667127'
      X-Datadog-Parent-Id:
      - '2450601800835500925'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 17:48:24 GMT
      Expires:
      - Thu, 20 Jul 2023 20:48:24 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '3773'
      Last-Modified:
      - Sat, 27 May 2023 08:01:31 GMT
      Etag:
      - '"a002f9d36d613da1f750a66a37de22ab8f6ffe8865f30423913930c67428a7dc"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:17 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.3.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3127585155553038067'
      X-Datadog-Parent-Id:
      - '278637795776322242'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '32'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:51:17 GMT
      Etag:
      - '"b5bce6ab66c097f3454be93c3d25b7daddf49183f5d5bac776c81c456bbdcb00"'
      Expires:
      - Thu, 20 Jul 2023 21:51:17 GMT
      Last-Modified:
      - Fri, 10 May 2019 10:34:51 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module github.com/imdario/mergo

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:17 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.15.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '707678679849230656'
      X-Datadog-Parent-Id:
      - '2423020591950156920'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 16:37:07 GMT
      Expires:
      - Thu, 20 Jul 2023 19:37:07 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '8050'
      Last-Modified:
      - Fri, 24 Mar 2023 09:58:12 GMT
      Etag:
      - '"a002f9d36d613da1f750a66a37de22ab8f6ffe8865f30423913930c67428a7dc"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:17 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.14.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '617490929471010985'
      X-Datadog-Parent-Id:
      - '2347863766985079525'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 16:29:10 GMT
      Expires:
      - Thu, 20 Jul 2023 19:29:10 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '8528'
      Last-Modified:
      - Wed, 15 Mar 2023 23:01:31 GMT
      Etag:
      - '"a002f9d36d613da1f750a66a37de22ab8f6ffe8865f30423913930c67428a7dc"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v3 v3.0.1
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:18 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/imdario/mergo/@v/v0.3.10.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2007030996376903598'
      X-Datadog-Parent-Id:
      - '2853989625735983849'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '74'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 18:36:59 GMT
      Expires:
      - Thu, 20 Jul 2023 21:36:59 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '859'
      Last-Modified:
      - Sat, 18 Jul 2020 14:59:43 GMT
      Etag:
      - '"31bbd3c9d8b390093bf1f10994207cbf5c158797283911af5dad728a344e3af9"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: |
        module github.com/imdario/mergo

        go 1.13

        require gopkg.in/yaml.v2 v2.3.0
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:18 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v2?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1390214438877428728'
      X-Datadog-Parent-Id:
      - '2138061067145609410'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 20 Jul 2023 18:51:18 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v2 git https://gopkg.in/yaml.v2">
        <meta name="go-source" content="gopkg.in/yaml.v2 _ https://github.com/go-yaml/yaml/tree/v2.4.0{/dir} https://github.com/go-yaml/yaml/blob/v2.4.0{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v2
        </body>
        </html>
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:18 GMT
- request:
    method: get
    uri: https://gopkg.in/yaml.v2?go-get=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4220861230447323685'
      X-Datadog-Parent-Id:
      - '35487466460320465'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 20 Jul 2023 18:51:18 GMT
      Server:
      - Apache/2.4.41 (Ubuntu)
      Content-Type:
      - text/html
      Vary:
      - Accept-Encoding
      Content-Length:
      - '318'
    body:
      encoding: ASCII-8BIT
      string: |2

        <html>
        <head>
        <meta name="go-import" content="gopkg.in/yaml.v2 git https://gopkg.in/yaml.v2">
        <meta name="go-source" content="gopkg.in/yaml.v2 _ https://github.com/go-yaml/yaml/tree/v2.4.0{/dir} https://github.com/go-yaml/yaml/blob/v2.4.0{/dir}/{file}#L{line}">
        </head>
        <body>
        go get gopkg.in/yaml.v2
        </body>
        </html>
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:18 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.9.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1386024476393125678'
      X-Datadog-Parent-Id:
      - '2989102683154394344'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:51:18 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Thu, 20 Jul 2023 21:51:18 GMT
      Last-Modified:
      - Tue, 24 Mar 2020 22:10:52 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:18 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.8.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '4314519752491394927'
      X-Datadog-Parent-Id:
      - '1469306075798959272'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:51:18 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Thu, 20 Jul 2023 21:51:18 GMT
      Last-Modified:
      - Thu, 03 Oct 2019 16:43:24 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:18 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.6.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3609427515859336287'
      X-Datadog-Parent-Id:
      - '733073031638748952'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:51:19 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Thu, 20 Jul 2023 21:51:19 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:55 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:19 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.4.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '181395303899336658'
      X-Datadog-Parent-Id:
      - '1638633656551063527'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:51:19 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Thu, 20 Jul 2023 21:51:19 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:44 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:19 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.7.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3016501896950389787'
      X-Datadog-Parent-Id:
      - '3285367018462255135'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '33'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Date:
      - Thu, 20 Jul 2023 18:39:30 GMT
      Expires:
      - Thu, 20 Jul 2023 21:39:30 GMT
      Cache-Control:
      - public, max-age=10800
      Age:
      - '709'
      Last-Modified:
      - Tue, 16 Jul 2019 13:43:42 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Content-Type:
      - text/plain; charset=UTF-8
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:19 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.5.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3648895691516335534'
      X-Datadog-Parent-Id:
      - '3264445697985926883'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:51:19 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Thu, 20 Jul 2023 21:51:19 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:50 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:19 GMT
- request:
    method: get
    uri: https://proxy.golang.org/gopkg.in/imdario/mergo.v0/@v/v0.3.3.mod
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2447027063783248132'
      X-Datadog-Parent-Id:
      - '912949568066455421'
      X-Datadog-Sampling-Priority:
      - '1'
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Accept-Ranges:
      - bytes
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=10800
      Content-Length:
      - '33'
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 20 Jul 2023 18:51:19 GMT
      Etag:
      - '"645c56907f624983308f7021187e6900761ef1403d446df5b47ecb60f17f6aca"'
      Expires:
      - Thu, 20 Jul 2023 21:51:19 GMT
      Last-Modified:
      - Sat, 20 Jul 2019 04:59:39 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'module gopkg.in/imdario/mergo.v0

        '
    http_version:
  recorded_at: Thu, 20 Jul 2023 18:51:19 GMT
recorded_with: VCR 4.0.0
