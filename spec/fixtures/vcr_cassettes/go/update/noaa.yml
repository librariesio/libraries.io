---
http_interactions:
- request:
    method: get
    uri: https://pkg.go.dev/github.com/cloudfoundry/noaa/errors
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '1931469397355852843'
      X-Datadog-Parent-Id:
      - '3198877964394590211'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-DVdvl49HC0iGx/YKQq/kVNATnEdzGfExbJVTHqT95l8='' ''sha256-CoGrkqEM1Kjjf5b1bpcnDLl8ZZLAsVX+BoAzZ5+AOmc=''
        ''sha256-QqhlxKosyquihHG/Jahbski3BB1pDss2/CDgLzKKbmE='' ''sha256-karKh1IrXOF1g+uoSxK+k9BuciCwYY/ytGuQVUiRzcM=''
        ''sha256-mxm3e8M0u3nPPBmLIBgGuMvGUIL5LGv+HzV3bLAIBgw='' ''sha256-+iS8jRq15Ez/Kzz0/G+SNc0geLNvTyf2NZC7MyJgpRE=''
        ''sha256-bL+cN9GtUg5dqjPwDiPJq4yfiEvOyEJ3rfw/YkNIAWc='' ''sha256-UiVwSVJIK9udADqG5GZe+nRUXWK9wEot2vrxL4D2pQs=''
        ''sha256-cB+y/oSfWGFf7lHk8KX+ZX2CZQz/dPamIICuPvHcB6w='' ''sha256-7mi5SPcD1cogj2+ju8J/+/qJG99F6Qo+3pO4xQkRf6Q=''
        ''sha256-rEbn/zvLCsDDvDrVWQuUkKGEQsjQjFvIvJK4NVIMqZ4='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Thu, 12 Oct 2023 15:49:00 GMT
      Server:
      - Google Frontend
      Via:
      - 1.1 google
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 12 Oct 2023 15:49:01 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/cloudfoundry/noaa/errors/@v/list
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '834931919794535326'
      X-Datadog-Parent-Id:
      - '221436591688072076'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 12 Oct 2023 15:49:01 GMT
      Expires:
      - Thu, 12 Oct 2023 15:50:01 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '94'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: module github.com/cloudfoundry/noaa/errors: no matching
        versions for query "latest"'
  recorded_at: Thu, 12 Oct 2023 15:49:01 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/cloudfoundry/noaa/errors/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '2963236779311398732'
      X-Datadog-Parent-Id:
      - '3876954325826836283'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Date:
      - Thu, 12 Oct 2023 15:49:01 GMT
      Expires:
      - Thu, 12 Oct 2023 15:50:01 GMT
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '94'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: module github.com/cloudfoundry/noaa/errors: no matching
        versions for query "latest"'
  recorded_at: Thu, 12 Oct 2023 15:49:01 GMT
- request:
    method: get
    uri: https://proxy.golang.org/github.com/cloudfoundry/noaa/errors/@latest
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept:
      - application/json
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3694898394775740169'
      X-Datadog-Parent-Id:
      - '123873898128843296'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 404
      message: ''
    headers:
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '0'
      Content-Length:
      - '94'
      Date:
      - Thu, 12 Oct 2023 15:49:01 GMT
      Expires:
      - Thu, 12 Oct 2023 15:50:01 GMT
      Cache-Control:
      - public, max-age=60
      Content-Type:
      - text/plain; charset=UTF-8
      Age:
      - '0'
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
    body:
      encoding: ASCII-8BIT
      string: 'not found: module github.com/cloudfoundry/noaa/errors: no matching
        versions for query "latest"'
  recorded_at: Thu, 12 Oct 2023 15:49:01 GMT
recorded_with: VCR 6.2.0
