---
http_interactions:
- request:
    method: get
    uri: https://pkg.go.dev/github.com/stretchr/testify
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-CgM7SjnSbDyuIteS+D1CQuSnzyKwL0qtXLU6ZW2hB+g='' ''sha256-qPGTOKPn+niRiNKQIEX0Ktwuj+D+iPQWIxnlhPicw58=''
        ''sha256-LIQd8c4GSueKwR3q2fz3AB92cOdy2Ld7ox8pfvMPHns='' ''sha256-dwce5DnVX7uk6fdvvNxQyLTH/cJrTMDK6zzrdKwdwcg=''
        ''sha256-T7xOt6cgLji3rhOWyKK7t5XKv8+LASQwOnHiHHy8Kwk='' ''sha256-EWdCQW4XtY7zS2MZgs76+2EhMbqpaPtC+9EPGnbHBtM=''
        ''sha256-1J6DWwTWs/QDZ2+ORDuUQCibmFnXXaNXYOtc0Jk6VU4='' ''sha256-y5EX2GR3tCwSK0/kmqZnsWVeBROA8tA75L+I+woljOE=''
        ''sha256-91GG/273d2LdEV//lJMbTodGN501OuKZKYYphui+wDQ='' ''sha256-ABETDefmLMyKpLsjAartd0H1SHvPVqmVWv6841qII1U=''
        ''sha256-uQODpjQEw2CWPIl6zEmpUU1uULk5RYVCofnBw59UOOw='' ''sha256-hsHIJwO1h0Vzwa75j0l07kUfQ7MEZGI/HlSPB/8leZ0=''
        ''sha256-CFun5NgnYeEpye8qcbQPq5Ycwavi4IXuZiIzSMNqRUw='' ''sha256-IHdniK/yZ8URNA2OYbc4R7BssOAe3/dFrSQW7PxEEfM=''
        ''sha256-MBIVDkCvJUTM2/rxXDRYO9B+ovOUGLVJOww8fxur+LU='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Cloud-Trace-Context:
      - 615df1c2ab6ae7e64811c60ff6ae2420
      Date:
      - Tue, 17 Nov 2020 19:02:44 GMT
      Server:
      - Google Frontend
      Cache-Control:
      - private
      Content-Length:
      - '39711'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 17 Nov 2020 19:02:44 GMT
- request:
    method: get
    uri: https://pkg.go.dev/github.com/stretchr/testify?tab=versions
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip,deflate,br
      Expect:
      - ''
  response:
    status:
      code: 200
      message: ''
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Content-Security-Policy:
      - 'object-src ''none''; base-uri ''none''; script-src ''unsafe-inline'' ''strict-dynamic''
        https: http: ''sha256-CgM7SjnSbDyuIteS+D1CQuSnzyKwL0qtXLU6ZW2hB+g='' ''sha256-qPGTOKPn+niRiNKQIEX0Ktwuj+D+iPQWIxnlhPicw58=''
        ''sha256-LIQd8c4GSueKwR3q2fz3AB92cOdy2Ld7ox8pfvMPHns='' ''sha256-dwce5DnVX7uk6fdvvNxQyLTH/cJrTMDK6zzrdKwdwcg=''
        ''sha256-T7xOt6cgLji3rhOWyKK7t5XKv8+LASQwOnHiHHy8Kwk='' ''sha256-EWdCQW4XtY7zS2MZgs76+2EhMbqpaPtC+9EPGnbHBtM=''
        ''sha256-1J6DWwTWs/QDZ2+ORDuUQCibmFnXXaNXYOtc0Jk6VU4='' ''sha256-y5EX2GR3tCwSK0/kmqZnsWVeBROA8tA75L+I+woljOE=''
        ''sha256-91GG/273d2LdEV//lJMbTodGN501OuKZKYYphui+wDQ='' ''sha256-ABETDefmLMyKpLsjAartd0H1SHvPVqmVWv6841qII1U=''
        ''sha256-uQODpjQEw2CWPIl6zEmpUU1uULk5RYVCofnBw59UOOw='' ''sha256-hsHIJwO1h0Vzwa75j0l07kUfQ7MEZGI/HlSPB/8leZ0=''
        ''sha256-CFun5NgnYeEpye8qcbQPq5Ycwavi4IXuZiIzSMNqRUw='' ''sha256-IHdniK/yZ8URNA2OYbc4R7BssOAe3/dFrSQW7PxEEfM=''
        ''sha256-MBIVDkCvJUTM2/rxXDRYO9B+ovOUGLVJOww8fxur+LU='''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Cloud-Trace-Context:
      - bd9eebb781b3fa46cd9b4abb6789d729
      Date:
      - Tue, 17 Nov 2020 19:02:44 GMT
      Server:
      - Google Frontend
      Cache-Control:
      - private
      Content-Length:
      - '16176'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 17 Nov 2020 19:02:44 GMT
recorded_with: VCR 4.0.0
