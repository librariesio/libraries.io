---
http_interactions:
- request:
    method: get
    uri: https://nuget.org/packages/Fels%C3%B6kning
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3868767701544180838'
      X-Datadog-Parent-Id:
      - '1813003502001858424'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Length:
      - '165'
      Content-Type:
      - text/html; charset=utf-8
      Date:
      - Mon, 01 Apr 2024 03:39:05 GMT
      Server:
      - Microsoft-IIS/10.0
      Location:
      - !binary |-
        aHR0cHM6Ly93d3cubnVnZXQub3JnL3BhY2thZ2VzL0ZlbHPDtmtuaW5n
      Set-Cookie:
      - ARRAffinity=8cb9eb8a9c8e49bb32964ef5e087477636164e3b1bd119e62b62b2d516d04b33;Path=/;HttpOnly;Secure;Domain=nuget.org
      - ARRAffinitySameSite=8cb9eb8a9c8e49bb32964ef5e087477636164e3b1bd119e62b62b2d516d04b33;Path=/;HttpOnly;SameSite=None;Secure;Domain=nuget.org
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      Content-Security-Policy:
      - frame-ancestors 'none'
      X-Frame-Options:
      - DENY
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGhlYWQ+PHRpdGxlPkRvY3VtZW50IE1vdmVkPC90aXRsZT48L2hlYWQ+Cjxib2R5PjxoMT5PYmplY3QgTW92ZWQ8L2gxPlRoaXMgZG9jdW1lbnQgbWF5IGJlIGZvdW5kIDxhIEhSRUY9Imh0dHBzOi8vd3d3Lm51Z2V0Lm9yZy9wYWNrYWdlcy9GZWxzw7ZrbmluZyI+aGVyZTwvYT48L2JvZHk+
  recorded_at: Mon, 01 Apr 2024 03:39:06 GMT
- request:
    method: get
    uri: https://www.nuget.org/packages/Fels%C3%B6kning
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.17.6
      Accept-Encoding:
      - gzip,deflate,br
      X-Datadog-Trace-Id:
      - '3698748902700918209'
      X-Datadog-Parent-Id:
      - '303779828442783086'
      X-Datadog-Sampling-Priority:
      - '1'
      X-Datadog-Tags:
      - _dd.p.dm=-0
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Access-Control-Expose-Headers:
      - Request-Context
      Set-Cookie:
      - ARRAffinity=0632ca9db79921cff52d39e8281a50ff464d1c11d97e789130cd466b9287fce9;Path=/;HttpOnly;Secure;Domain=www.nuget.org
      - ARRAffinitySameSite=0632ca9db79921cff52d39e8281a50ff464d1c11d97e789130cd466b9287fce9;Path=/;HttpOnly;SameSite=None;Secure;Domain=www.nuget.org
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      Request-Context:
      - appId=cid-v1:338f6804-b1a9-4fe3-bba7-c93064e7ae7b
      Content-Security-Policy:
      - frame-ancestors 'none'
      X-Frame-Options:
      - DENY
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Date:
      - Mon, 01 Apr 2024 03:39:05 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    adapter_metadata:
      vcr_decompressed: gzip
  recorded_at: Mon, 01 Apr 2024 03:39:06 GMT
recorded_with: VCR 6.2.0
